"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _utils = require("./utils");

function createState(initial) {
  var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  validateInitial(initial);
  validateHandler(handler);
  var state = {
    current: initial
  };
  var didUpdate = (0, _utils.curry)(didStateUpdate)(state, handler);
  var update = (0, _utils.curry)(updateState)(state);
  var validate = (0, _utils.curry)(validateChanges)(initial);
  var getChanges = (0, _utils.curry)(extractChanges)(state);

  function getState() {
    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (state) {
      return state;
    };
    return selector(state.current);
  }

  function setState(causedChanges) {
    (0, _utils.compose)(didUpdate, update, validate, getChanges)(causedChanges);
  }

  return [getState, setState];
}

function extractChanges(state, causedChanges) {
  return (0, _utils.isFunction)(causedChanges) ? causedChanges(state.current) : causedChanges;
}

function updateState(state, changes) {
  state.current = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, state.current), changes);
  return changes;
}

function didStateUpdate(state, handler, changes) {
  (0, _utils.isFunction)(handler) ? handler(state.current) : Object.keys(changes).forEach(function (field) {
    var _handler$field;

    return (_handler$field = handler[field]) === null || _handler$field === void 0 ? void 0 : _handler$field.call(handler, state.current[field]);
  });
  return changes;
}

function validateChanges(initial, changes) {
  if (!(0, _utils.isObject)(changes)) errorHandler('changeType');
  if (Object.keys(changes).some(function (field) {
    return !initial.hasOwnProperty(field);
  })) errorHandler('changeField');
  return changes;
}

function validateHandler(handler) {
  if (!((0, _utils.isFunction)(handler) || (0, _utils.isObject)(handler))) errorHandler('handlerType');
}

function validateInitial(initial) {
  if (!initial) errorHandler('initialIsRequired');
  if (!(0, _utils.isObject)(initial)) errorHandler('initialType');
  if ((0, _utils.isEmpty)(initial)) errorHandler('initialContent');
}

var errorMessages = {
  initialIsRequired: 'initial state is required',
  initialType: 'initial state should be an object',
  initialContent: 'initial state shouldn\'t be an empty object',
  handlerType: 'handler should be an object or a function',
  changeType: 'provided value of changes should be an object',
  changeField: 'it seams you want to change a field in the store which is not specified in the "initial" state',
  default: 'an unknown error has occurred in `local-storer` package'
};

function errorHandler(type) {
  throw new Error(errorHandler[type] || errorMessages.default);
}

var _default = createState;
exports.default = _default;