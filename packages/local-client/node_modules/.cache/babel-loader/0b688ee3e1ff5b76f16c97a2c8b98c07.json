{"ast":null,"code":"import * as esbuild from \"esbuild-wasm\";\nimport { unpkgPathPlugin } from \"./plugins/unpkg-path-plugin\";\nimport { fetchPlugin } from \"./plugins/fetch-plugin\";\nlet service;\n\nconst bundle = async rawCode => {\n  if (!service) {\n    service = await esbuild.startService({\n      worker: true,\n      wasmURL: \"https://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm\"\n    });\n  }\n\n  try {} catch (error) {}\n\n  const result = await service.build({\n    entryPoints: [\"index.js\"],\n    bundle: true,\n    write: false,\n    plugins: [unpkgPathPlugin(), fetchPlugin(rawCode)],\n    define: {\n      \"process.env.NODE_ENV\": '\"production\"',\n      global: \"window\"\n    }\n  });\n  return {\n    code: result.outputFiles[0].text,\n    err: \"\"\n  };\n};\n\nexport default bundle;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/src/bundler/index.ts"],"names":["esbuild","unpkgPathPlugin","fetchPlugin","service","bundle","rawCode","startService","worker","wasmURL","error","result","build","entryPoints","write","plugins","define","global","code","outputFiles","text","err"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,IAAIC,OAAJ;;AACA,MAAMC,MAAM,GAAG,MAAOC,OAAP,IAA2B;AACxC,MAAI,CAACF,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,MAAMH,OAAO,CAACM,YAAR,CAAqB;AACnCC,MAAAA,MAAM,EAAE,IAD2B;AAEnCC,MAAAA,OAAO,EAAE;AAF0B,KAArB,CAAhB;AAID;;AAED,MAAI,CACH,CADD,CACE,OAAOC,KAAP,EAAc,CAAE;;AAClB,QAAMC,MAAM,GAAG,MAAMP,OAAO,CAACQ,KAAR,CAAc;AACjCC,IAAAA,WAAW,EAAE,CAAC,UAAD,CADoB;AAEjCR,IAAAA,MAAM,EAAE,IAFyB;AAGjCS,IAAAA,KAAK,EAAE,KAH0B;AAIjCC,IAAAA,OAAO,EAAE,CAACb,eAAe,EAAhB,EAAoBC,WAAW,CAACG,OAAD,CAA/B,CAJwB;AAKjCU,IAAAA,MAAM,EAAE;AACN,8BAAwB,cADlB;AAENC,MAAAA,MAAM,EAAE;AAFF;AALyB,GAAd,CAArB;AAWA,SAAO;AACLC,IAAAA,IAAI,EAAEP,MAAM,CAACQ,WAAP,CAAmB,CAAnB,EAAsBC,IADvB;AAELC,IAAAA,GAAG,EAAE;AAFA,GAAP;AAID,CAzBD;;AA2BA,eAAehB,MAAf","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\nimport { unpkgPathPlugin } from \"./plugins/unpkg-path-plugin\";\nimport { fetchPlugin } from \"./plugins/fetch-plugin\";\n\nlet service: esbuild.Service;\nconst bundle = async (rawCode: string) => {\n  if (!service) {\n    service = await esbuild.startService({\n      worker: true,\n      wasmURL: \"https://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm\",\n    });\n  }\n\n  try {\n  } catch (error) {}\n  const result = await service.build({\n    entryPoints: [\"index.js\"],\n    bundle: true,\n    write: false,\n    plugins: [unpkgPathPlugin(), fetchPlugin(rawCode)],\n    define: {\n      \"process.env.NODE_ENV\": '\"production\"',\n      global: \"window\",\n    },\n  });\n\n  return {\n    code: result.outputFiles[0].text,\n    err: \"\",\n  };\n};\n\nexport default bundle;\n"]},"metadata":{},"sourceType":"module"}