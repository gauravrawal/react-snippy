{"ast":null,"code":"(function (Prism) {\n  Prism.languages.tt2 = Prism.languages.extend('clike', {\n    'comment': /#.*|\\[%#[\\s\\S]*?%\\]/,\n    'keyword': /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n    'punctuation': /[[\\]{},()]/\n  });\n  Prism.languages.insertBefore('tt2', 'number', {\n    'operator': /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n    'variable': {\n      pattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'keyword', {\n    'delimiter': {\n      pattern: /^(?:\\[%|%%)-?|-?%\\]$/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'string', {\n    'single-quoted-string': {\n      pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'variable': {\n          pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n        }\n      }\n    }\n  }); // The different types of TT2 strings \"replace\" the C-like standard string\n\n  delete Prism.languages.tt2.string;\n  Prism.hooks.add('before-tokenize', function (env) {\n    var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n  });\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-tt2.js"],"names":["Prism","languages","tt2","extend","insertBefore","pattern","alias","greedy","inside","string","hooks","add","env","tt2Pattern","buildPlaceholders","tokenizePlaceholders"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AAEjBA,EAAAA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,GAAsBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,OAAvB,EAAgC;AACrD,eAAW,qBAD0C;AAErD,eAAW,yNAF0C;AAGrD,mBAAe;AAHsC,GAAhC,CAAtB;AAMAH,EAAAA,KAAK,CAACC,SAAN,CAAgBG,YAAhB,CAA6B,KAA7B,EAAoC,QAApC,EAA8C;AAC7C,gBAAY,gDADiC;AAE7C,gBAAY;AACXC,MAAAA,OAAO,EAAE;AADE;AAFiC,GAA9C;AAOAL,EAAAA,KAAK,CAACC,SAAN,CAAgBG,YAAhB,CAA6B,KAA7B,EAAoC,SAApC,EAA+C;AAC9C,iBAAa;AACZC,MAAAA,OAAO,EAAE,sBADG;AAEZC,MAAAA,KAAK,EAAE;AAFK;AADiC,GAA/C;AAOAN,EAAAA,KAAK,CAACC,SAAN,CAAgBG,YAAhB,CAA6B,KAA7B,EAAoC,QAApC,EAA8C;AAC7C,4BAAwB;AACvBC,MAAAA,OAAO,EAAE,+BADc;AAEvBE,MAAAA,MAAM,EAAE,IAFe;AAGvBD,MAAAA,KAAK,EAAE;AAHgB,KADqB;AAM7C,4BAAwB;AACvBD,MAAAA,OAAO,EAAE,+BADc;AAEvBE,MAAAA,MAAM,EAAE,IAFe;AAGvBD,MAAAA,KAAK,EAAE,QAHgB;AAIvBE,MAAAA,MAAM,EAAE;AACP,oBAAY;AACXH,UAAAA,OAAO,EAAE;AADE;AADL;AAJe;AANqB,GAA9C,EAtBiB,CAwCjB;;AACA,SAAOL,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoBO,MAA3B;AAEAT,EAAAA,KAAK,CAACU,KAAN,CAAYC,GAAZ,CAAgB,iBAAhB,EAAmC,UAAUC,GAAV,EAAe;AACjD,QAAIC,UAAU,GAAG,iBAAjB;AACAb,IAAAA,KAAK,CAACC,SAAN,CAAgB,mBAAhB,EAAqCa,iBAArC,CAAuDF,GAAvD,EAA4D,KAA5D,EAAmEC,UAAnE;AACA,GAHD;AAKAb,EAAAA,KAAK,CAACU,KAAN,CAAYC,GAAZ,CAAgB,gBAAhB,EAAkC,UAAUC,GAAV,EAAe;AAChDZ,IAAAA,KAAK,CAACC,SAAN,CAAgB,mBAAhB,EAAqCc,oBAArC,CAA0DH,GAA1D,EAA+D,KAA/D;AACA,GAFD;AAIA,CApDA,EAoDCZ,KApDD,CAAD","sourcesContent":["(function (Prism) {\n\n\tPrism.languages.tt2 = Prism.languages.extend('clike', {\n\t\t'comment': /#.*|\\[%#[\\s\\S]*?%\\]/,\n\t\t'keyword': /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n\t\t'punctuation': /[[\\]{},()]/\n\t});\n\n\tPrism.languages.insertBefore('tt2', 'number', {\n\t\t'operator': /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n\t\t'variable': {\n\t\t\tpattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('tt2', 'keyword', {\n\t\t'delimiter': {\n\t\t\tpattern: /^(?:\\[%|%%)-?|-?%\\]$/,\n\t\t\talias: 'punctuation'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('tt2', 'string', {\n\t\t'single-quoted-string': {\n\t\t\tpattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'double-quoted-string': {\n\t\t\tpattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// The different types of TT2 strings \"replace\" the C-like standard string\n\tdelete Prism.languages.tt2.string;\n\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tvar tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n\t});\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}