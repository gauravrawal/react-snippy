{"ast":null,"code":"import { ActionType } from '../action-types';\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      return { ...state,\n        data: { ...state.data,\n          [id]: { ...state.data[id],\n            content\n          }\n        }\n      };\n\n    case ActionType.DELETE_CELL:\n      return state;\n\n    case ActionType.MOVE_CELL:\n      return state;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/src/state/reducers/cellsReducer.ts"],"names":["ActionType","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","MOVE_CELL","INSERT_CELL_BEFORE"],"mappings":"AACA,SAASA,UAAT,QAA2B,iBAA3B;AAaA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,OAAO,EAAE,KADsB;AAE/BC,EAAAA,KAAK,EAAE,IAFwB;AAG/BC,EAAAA,KAAK,EAAE,EAHwB;AAI/BC,EAAAA,IAAI,EAAE;AAJyB,CAAjC;;AAOA,MAAMC,OAAO,GAAG,CACdC,KAAiB,GAAGN,YADN,EAEdO,MAFc,KAGC;AACf,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,UAAU,CAACU,WAAhB;AACE,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAkBJ,MAAM,CAACK,OAA/B;AACA,aAAO,EACL,GAAGN,KADE;AAELF,QAAAA,IAAI,EAAE,EACJ,GAAGE,KAAK,CAACF,IADL;AAEJ,WAACM,EAAD,GAAM,EACJ,GAAGJ,KAAK,CAACF,IAAN,CAAWM,EAAX,CADC;AAEJC,YAAAA;AAFI;AAFF;AAFD,OAAP;;AAUF,SAAKZ,UAAU,CAACc,WAAhB;AACE,aAAOP,KAAP;;AACF,SAAKP,UAAU,CAACe,SAAhB;AACE,aAAOR,KAAP;;AACF,SAAKP,UAAU,CAACgB,kBAAhB;AACE,aAAOT,KAAP;;AACF;AACE,aAAOA,KAAP;AApBJ;AAsBD,CA1BD;;AA4BA,eAAeD,OAAf","sourcesContent":["import produce from 'immer';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Cell } from '../cell';\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst reducer = (\n  state: CellsState = initialState,\n  action: Action\n): CellsState => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const { id, content } = action.payload;\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [id]: {\n            ...state.data[id],\n            content,\n          },\n        },\n      };\n    case ActionType.DELETE_CELL:\n      return state;\n    case ActionType.MOVE_CELL:\n      return state;\n    case ActionType.INSERT_CELL_BEFORE:\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}