{"ast":null,"code":"import * as React from 'react';\nimport { selectWord, getBreaksNeededForEmptyLineBefore, getBreaksNeededForEmptyLineAfter } from '../utils/markdownUtils';\nexport var code = {\n  name: 'code',\n  keyCommand: 'code',\n  buttonProps: {\n    'aria-label': 'Insert code'\n  },\n  icon: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"12\",\n    height: \"12\",\n    role: \"img\",\n    viewBox: \"0 0 640 512\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\"\n  })),\n  execute: function execute(tate, api) {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = selectWord({\n      text: tate.text,\n      selection: tate.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange); // when there's no breaking line\n\n    if (state1.selectedText.indexOf(\"\\n\") === -1) {\n      api.replaceSelection(\"`\".concat(state1.selectedText, \"`\")); // Adjust the selection to not contain the **\n\n      var _selectionStart = state1.selection.start + 1;\n\n      var _selectionEnd = _selectionStart + state1.selectedText.length;\n\n      api.setSelectionRange({\n        start: _selectionStart,\n        end: _selectionEnd\n      });\n      return;\n    }\n\n    var breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n    var breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n    api.replaceSelection(\"\".concat(breaksBefore, \"```\\n\").concat(state1.selectedText, \"\\n```\").concat(breaksAfter));\n    var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    var selectionEnd = selectionStart + state1.selectedText.length;\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/commands/code.tsx"],"names":["code","name","keyCommand","buttonProps","icon","execute","newSelectionRange","selectWord","text","tate","selection","state1","api","selectionStart","selectionEnd","start","end","breaksBeforeCount","getBreaksNeededForEmptyLineBefore","breaksBefore","Array","breaksAfterCount","getBreaksNeededForEmptyLineAfter","breaksAfter"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,UAAA,EAAA,iCAAA,EAAA,gCAAA,QAAA,wBAAA;AAEA,OAAO,IAAMA,IAAc,GAAG;AAC5BC,EAAAA,IAAI,EADwB,MAAA;AAE5BC,EAAAA,UAAU,EAFkB,MAAA;AAG5BC,EAAAA,WAAW,EAAE;AAAE,kBAAc;AAAhB,GAHe;AAI5BC,EAAAA,IAAI,EAAA,aACF,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAV,IAAA;AAAgB,IAAA,MAAM,EAAtB,IAAA;AAA4B,IAAA,IAAI,EAAhC,KAAA;AAAuC,IAAA,OAAO,EAAC;AAA/C,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,IAAI,EAAV,cAAA;AAA0B,IAAA,CAAC,EAAC;AAA5B,GAAA,CADF,CAL0B;AAS5BC,EAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAmC;AAC1C;AACA,QAAMC,iBAAiB,GAAGC,UAAU,CAAC;AAAEC,MAAAA,IAAI,EAAEC,IAAI,CAAZ,IAAA;AAAmBC,MAAAA,SAAS,EAAED,IAAI,CAACC;AAAnC,KAAD,CAApC;AACA,QAAMC,MAAM,GAAGC,GAAG,CAAHA,iBAAAA,CAH2B,iBAG3BA,CAAf,CAH0C,CAK1C;;AACA,QAAID,MAAM,CAANA,YAAAA,CAAAA,OAAAA,CAAAA,IAAAA,MAAsC,CAA1C,CAAA,EAA8C;AAC5CC,MAAAA,GAAG,CAAHA,gBAAAA,CAAAA,IAAAA,MAAAA,CAA0BD,MAAM,CAAhCC,YAAAA,EAD4C,GAC5CA,CAAAA,EAD4C,CAE5C;;AAEA,UAAMC,eAAc,GAAGF,MAAM,CAANA,SAAAA,CAAAA,KAAAA,GAAvB,CAAA;;AACA,UAAMG,aAAY,GAAGD,eAAc,GAAGF,MAAM,CAANA,YAAAA,CAAtC,MAAA;;AAEAC,MAAAA,GAAG,CAAHA,iBAAAA,CAAsB;AACpBG,QAAAA,KAAK,EADe,eAAA;AAEpBC,QAAAA,GAAG,EAAEF;AAFe,OAAtBF;AAIA;AACD;;AAED,QAAMK,iBAAiB,GAAGC,iCAAiC,CAACP,MAAM,CAAP,IAAA,EAAcA,MAAM,CAANA,SAAAA,CAAzE,KAA2D,CAA3D;AACA,QAAMQ,YAAY,GAAGC,KAAK,CAACH,iBAAiB,GAAvBG,CAAK,CAALA,CAAAA,IAAAA,CAArB,IAAqBA,CAArB;AAEA,QAAMC,gBAAgB,GAAGC,gCAAgC,CAACX,MAAM,CAAP,IAAA,EAAcA,MAAM,CAANA,SAAAA,CAAvE,GAAyD,CAAzD;AACA,QAAMY,WAAW,GAAGH,KAAK,CAACC,gBAAgB,GAAtBD,CAAK,CAALA,CAAAA,IAAAA,CAApB,IAAoBA,CAApB;AAEAR,IAAAA,GAAG,CAAHA,gBAAAA,CAAAA,GAAAA,MAAAA,CAAAA,YAAAA,EAAAA,OAAAA,EAAAA,MAAAA,CAA+CD,MAAM,CAArDC,YAAAA,EAAAA,OAAAA,EAAAA,MAAAA,CAAAA,WAAAA,CAAAA;AAEA,QAAMC,cAAc,GAAGF,MAAM,CAANA,SAAAA,CAAAA,KAAAA,GAAAA,iBAAAA,GAAvB,CAAA;AACA,QAAMG,YAAY,GAAGD,cAAc,GAAGF,MAAM,CAANA,YAAAA,CAAtC,MAAA;AAEAC,IAAAA,GAAG,CAAHA,iBAAAA,CAAsB;AACpBG,MAAAA,KAAK,EADe,cAAA;AAEpBC,MAAAA,GAAG,EAAEF;AAFe,KAAtBF;AAID;AA5C2B,CAAvB","sourcesContent":["import * as React from 'react';\nimport { ICommand, TextState, TextApi } from './';\nimport { selectWord, getBreaksNeededForEmptyLineBefore, getBreaksNeededForEmptyLineAfter } from '../utils/markdownUtils';\n\nexport const code: ICommand = {\n  name: 'code',\n  keyCommand: 'code',\n  buttonProps: { 'aria-label': 'Insert code' },\n  icon: (\n    <svg width=\"12\" height=\"12\" role=\"img\" viewBox=\"0 0 640 512\">\n      <path fill=\"currentColor\" d=\"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\" />\n    </svg>\n  ),\n  execute: (tate: TextState, api: TextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: tate.text, selection: tate.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n\n    // when there's no breaking line\n    if (state1.selectedText.indexOf(\"\\n\") === -1) {\n      api.replaceSelection(`\\`${state1.selectedText}\\``);\n      // Adjust the selection to not contain the **\n\n      const selectionStart = state1.selection.start + 1;\n      const selectionEnd = selectionStart + state1.selectedText.length;\n\n      api.setSelectionRange({\n        start: selectionStart,\n        end: selectionEnd\n      });\n      return;\n    }\n\n    const breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    const breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n\n    const breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    const breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n\n    api.replaceSelection(`${breaksBefore}\\`\\`\\`\\n${state1.selectedText}\\n\\`\\`\\`${breaksAfter}`);\n\n    const selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    const selectionEnd = selectionStart + state1.selectedText.length;\n\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}