{"ast":null,"code":"Prism.languages.processing = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,\n  'operator': /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/\n});\nPrism.languages.insertBefore('processing', 'number', {\n  // Special case: XML is a type\n  'constant': /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,\n  'type': {\n    pattern: /\\b(?:boolean|byte|char|color|double|float|int|[A-Z]\\w*)\\b/,\n    alias: 'variable'\n  }\n}); // Spaces are allowed between function name and parenthesis\n\nPrism.languages.processing['function'] = /\\b\\w+(?=\\s*\\()/; // Class-names is not styled by default\n\nPrism.languages.processing['class-name'].alias = 'variable';","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-processing.js"],"names":["Prism","languages","processing","extend","insertBefore","pattern","alias"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,UAAhB,GAA6BF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,OAAvB,EAAgC;AAC5D,aAAW,oKADiD;AAE5D,cAAY;AAFgD,CAAhC,CAA7B;AAIAH,KAAK,CAACC,SAAN,CAAgBG,YAAhB,CAA6B,YAA7B,EAA2C,QAA3C,EAAqD;AACpD;AACA,cAAY,6BAFwC;AAGpD,UAAQ;AACPC,IAAAA,OAAO,EAAE,2DADF;AAEPC,IAAAA,KAAK,EAAE;AAFA;AAH4C,CAArD,E,CASA;;AACAN,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2B,UAA3B,IAAyC,gBAAzC,C,CAEA;;AACAF,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2B,YAA3B,EAAyCI,KAAzC,GAAiD,UAAjD","sourcesContent":["Prism.languages.processing = Prism.languages.extend('clike', {\n\t'keyword': /\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,\n\t'operator': /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/\n});\nPrism.languages.insertBefore('processing', 'number', {\n\t// Special case: XML is a type\n\t'constant': /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,\n\t'type': {\n\t\tpattern: /\\b(?:boolean|byte|char|color|double|float|int|[A-Z]\\w*)\\b/,\n\t\talias: 'variable'\n\t}\n});\n\n// Spaces are allowed between function name and parenthesis\nPrism.languages.processing['function'] = /\\b\\w+(?=\\s*\\()/;\n\n// Class-names is not styled by default\nPrism.languages.processing['class-name'].alias = 'variable';\n"]},"metadata":{},"sourceType":"script"}