{"ast":null,"code":"!function (n) {\n  var i = \"(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)\";\n  Prism.languages.abnf = {\n    comment: /;.*/,\n    string: {\n      pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n      greedy: !0,\n      inside: {\n        punctuation: /^%[is]/\n      }\n    },\n    range: {\n      pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n      alias: \"number\"\n    },\n    terminal: {\n      pattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n      alias: \"number\"\n    },\n    repetition: {\n      pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    },\n    definition: {\n      pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^<>\\r\\n]*>)(?=\\s*=)/m,\n      lookbehind: !0,\n      alias: \"keyword\",\n      inside: {\n        punctuation: /<|>/\n      }\n    },\n    \"core-rule\": {\n      pattern: RegExp(\"(?:(^|[^<\\\\w-])\" + i + \"|<\" + i + \">)(?![\\\\w-])\", \"i\"),\n      lookbehind: !0,\n      alias: [\"rule\", \"constant\"],\n      inside: {\n        punctuation: /<|>/\n      }\n    },\n    rule: {\n      pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^<>\\r\\n]*>/i,\n      lookbehind: !0,\n      inside: {\n        punctuation: /<|>/\n      }\n    },\n    operator: /=\\/?|\\//,\n    punctuation: /[()\\[\\]]/\n  };\n}();","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-abnf.min.js"],"names":["n","i","Prism","languages","abnf","comment","string","pattern","greedy","inside","punctuation","range","alias","terminal","repetition","lookbehind","definition","RegExp","rule","operator"],"mappings":"AAAA,CAAC,UAASA,CAAT,EAAW;AAAC,MAAIC,CAAC,GAAC,oFAAN;AAA2FC,EAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAqB;AAACC,IAAAA,OAAO,EAAC,KAAT;AAAeC,IAAAA,MAAM,EAAC;AAACC,MAAAA,OAAO,EAAC,uBAAT;AAAiCC,MAAAA,MAAM,EAAC,CAAC,CAAzC;AAA2CC,MAAAA,MAAM,EAAC;AAACC,QAAAA,WAAW,EAAC;AAAb;AAAlD,KAAtB;AAAgGC,IAAAA,KAAK,EAAC;AAACJ,MAAAA,OAAO,EAAC,gDAAT;AAA0DK,MAAAA,KAAK,EAAC;AAAhE,KAAtG;AAAgLC,IAAAA,QAAQ,EAAC;AAACN,MAAAA,OAAO,EAAC,kEAAT;AAA4EK,MAAAA,KAAK,EAAC;AAAlF,KAAzL;AAAqRE,IAAAA,UAAU,EAAC;AAACP,MAAAA,OAAO,EAAC,4BAAT;AAAsCQ,MAAAA,UAAU,EAAC,CAAC,CAAlD;AAAoDH,MAAAA,KAAK,EAAC;AAA1D,KAAhS;AAAsWI,IAAAA,UAAU,EAAC;AAACT,MAAAA,OAAO,EAAC,gDAAT;AAA0DQ,MAAAA,UAAU,EAAC,CAAC,CAAtE;AAAwEH,MAAAA,KAAK,EAAC,SAA9E;AAAwFH,MAAAA,MAAM,EAAC;AAACC,QAAAA,WAAW,EAAC;AAAb;AAA/F,KAAjX;AAAqe,iBAAY;AAACH,MAAAA,OAAO,EAACU,MAAM,CAAC,oBAAkBhB,CAAlB,GAAoB,IAApB,GAAyBA,CAAzB,GAA2B,cAA5B,EAA2C,GAA3C,CAAf;AAA+Dc,MAAAA,UAAU,EAAC,CAAC,CAA3E;AAA6EH,MAAAA,KAAK,EAAC,CAAC,MAAD,EAAQ,UAAR,CAAnF;AAAuGH,MAAAA,MAAM,EAAC;AAACC,QAAAA,WAAW,EAAC;AAAb;AAA9G,KAAjf;AAAonBQ,IAAAA,IAAI,EAAC;AAACX,MAAAA,OAAO,EAAC,sCAAT;AAAgDQ,MAAAA,UAAU,EAAC,CAAC,CAA5D;AAA8DN,MAAAA,MAAM,EAAC;AAACC,QAAAA,WAAW,EAAC;AAAb;AAArE,KAAznB;AAAmtBS,IAAAA,QAAQ,EAAC,SAA5tB;AAAsuBT,IAAAA,WAAW,EAAC;AAAlvB,GAArB;AAAmxB,CAA13B,EAAD","sourcesContent":["!function(n){var i=\"(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)\";Prism.languages.abnf={comment:/;.*/,string:{pattern:/(?:%[is])?\"[^\"\\n\\r]*\"/,greedy:!0,inside:{punctuation:/^%[is]/}},range:{pattern:/%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,alias:\"number\"},terminal:{pattern:/%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,alias:\"number\"},repetition:{pattern:/(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,lookbehind:!0,alias:\"operator\"},definition:{pattern:/(^[ \\t]*)(?:[a-z][\\w-]*|<[^<>\\r\\n]*>)(?=\\s*=)/m,lookbehind:!0,alias:\"keyword\",inside:{punctuation:/<|>/}},\"core-rule\":{pattern:RegExp(\"(?:(^|[^<\\\\w-])\"+i+\"|<\"+i+\">)(?![\\\\w-])\",\"i\"),lookbehind:!0,alias:[\"rule\",\"constant\"],inside:{punctuation:/<|>/}},rule:{pattern:/(^|[^<\\w-])[a-z][\\w-]*|<[^<>\\r\\n]*>/i,lookbehind:!0,inside:{punctuation:/<|>/}},operator:/=\\/?|\\//,punctuation:/[()\\[\\]]/}}();"]},"metadata":{},"sourceType":"script"}