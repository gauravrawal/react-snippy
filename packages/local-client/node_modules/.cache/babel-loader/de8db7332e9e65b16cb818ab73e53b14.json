{"ast":null,"code":"\"use strict\";\n\n;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar babel_core_1 = tslib_1.__importDefault(require(\"./babel-core\"));\n\nvar type_annotations_1 = tslib_1.__importDefault(require(\"./type-annotations\"));\n\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\n\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\n\nfunction default_1(fork) {\n  // Since TypeScript is parsed by Babylon, include the core Babylon types\n  // but omit the Flow-related types.\n  fork.use(babel_core_1.default);\n  fork.use(type_annotations_1.default);\n  var types = fork.use(types_1.default);\n  var n = types.namedTypes;\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var defaults = fork.use(shared_1.default).defaults;\n  var StringLiteral = types.Type.from(function (value, deep) {\n    if (n.StringLiteral && n.StringLiteral.check(value, deep)) {\n      return true;\n    }\n\n    if (n.Literal && n.Literal.check(value, deep) && typeof value.value === \"string\") {\n      return true;\n    }\n\n    return false;\n  }, \"StringLiteral\");\n  def(\"TSType\").bases(\"Node\");\n  var TSEntityName = or(def(\"Identifier\"), def(\"TSQualifiedName\"));\n  def(\"TSTypeReference\").bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\").build(\"typeName\", \"typeParameters\").field(\"typeName\", TSEntityName); // An abstract (non-buildable) base type that provide a commonly-needed\n  // optional .typeParameters field.\n\n  def(\"TSHasOptionalTypeParameterInstantiation\").field(\"typeParameters\", or(def(\"TSTypeParameterInstantiation\"), null), defaults[\"null\"]); // An abstract (non-buildable) base type that provide a commonly-needed\n  // optional .typeParameters field.\n\n  def(\"TSHasOptionalTypeParameters\").field(\"typeParameters\", or(def(\"TSTypeParameterDeclaration\"), null, void 0), defaults[\"null\"]); // An abstract (non-buildable) base type that provide a commonly-needed\n  // optional .typeAnnotation field.\n\n  def(\"TSHasOptionalTypeAnnotation\").field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"]);\n  def(\"TSQualifiedName\").bases(\"Node\").build(\"left\", \"right\").field(\"left\", TSEntityName).field(\"right\", TSEntityName);\n  def(\"TSAsExpression\").bases(\"Expression\", \"Pattern\").build(\"expression\", \"typeAnnotation\").field(\"expression\", def(\"Expression\")).field(\"typeAnnotation\", def(\"TSType\")).field(\"extra\", or({\n    parenthesized: Boolean\n  }, null), defaults[\"null\"]);\n  def(\"TSNonNullExpression\").bases(\"Expression\", \"Pattern\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n  [\"TSAnyKeyword\", \"TSBigIntKeyword\", \"TSBooleanKeyword\", \"TSNeverKeyword\", \"TSNullKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSUndefinedKeyword\", \"TSUnknownKeyword\", \"TSVoidKeyword\", \"TSThisType\"].forEach(function (keywordType) {\n    def(keywordType).bases(\"TSType\").build();\n  });\n  def(\"TSArrayType\").bases(\"TSType\").build(\"elementType\").field(\"elementType\", def(\"TSType\"));\n  def(\"TSLiteralType\").bases(\"TSType\").build(\"literal\").field(\"literal\", or(def(\"NumericLiteral\"), def(\"StringLiteral\"), def(\"BooleanLiteral\"), def(\"TemplateLiteral\"), def(\"UnaryExpression\")));\n  [\"TSUnionType\", \"TSIntersectionType\"].forEach(function (typeName) {\n    def(typeName).bases(\"TSType\").build(\"types\").field(\"types\", [def(\"TSType\")]);\n  });\n  def(\"TSConditionalType\").bases(\"TSType\").build(\"checkType\", \"extendsType\", \"trueType\", \"falseType\").field(\"checkType\", def(\"TSType\")).field(\"extendsType\", def(\"TSType\")).field(\"trueType\", def(\"TSType\")).field(\"falseType\", def(\"TSType\"));\n  def(\"TSInferType\").bases(\"TSType\").build(\"typeParameter\").field(\"typeParameter\", def(\"TSTypeParameter\"));\n  def(\"TSParenthesizedType\").bases(\"TSType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TSType\"));\n  var ParametersType = [or(def(\"Identifier\"), def(\"RestElement\"), def(\"ArrayPattern\"), def(\"ObjectPattern\"))];\n  [\"TSFunctionType\", \"TSConstructorType\"].forEach(function (typeName) {\n    def(typeName).bases(\"TSType\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\").build(\"parameters\").field(\"parameters\", ParametersType);\n  });\n  def(\"TSDeclareFunction\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"id\", \"params\", \"returnType\").field(\"declare\", Boolean, defaults[\"false\"]).field(\"async\", Boolean, defaults[\"false\"]).field(\"generator\", Boolean, defaults[\"false\"]).field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"]).field(\"params\", [def(\"Pattern\")]) // tSFunctionTypeAnnotationCommon\n  .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), // Still used?\n  null), defaults[\"null\"]);\n  def(\"TSDeclareMethod\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"key\", \"params\", \"returnType\").field(\"async\", Boolean, defaults[\"false\"]).field(\"generator\", Boolean, defaults[\"false\"]).field(\"params\", [def(\"Pattern\")]) // classMethodOrPropertyCommon\n  .field(\"abstract\", Boolean, defaults[\"false\"]).field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]).field(\"static\", Boolean, defaults[\"false\"]).field(\"computed\", Boolean, defaults[\"false\"]).field(\"optional\", Boolean, defaults[\"false\"]).field(\"key\", or(def(\"Identifier\"), def(\"StringLiteral\"), def(\"NumericLiteral\"), // Only allowed if .computed is true.\n  def(\"Expression\"))) // classMethodOrDeclareMethodCommon\n  .field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"), function getDefault() {\n    return \"method\";\n  }).field(\"access\", // Not \"accessibility\"?\n  or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]).field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]) // tSFunctionTypeAnnotationCommon\n  .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), // Still used?\n  null), defaults[\"null\"]);\n  def(\"TSMappedType\").bases(\"TSType\").build(\"typeParameter\", \"typeAnnotation\").field(\"readonly\", or(Boolean, \"+\", \"-\"), defaults[\"false\"]).field(\"typeParameter\", def(\"TSTypeParameter\")).field(\"optional\", or(Boolean, \"+\", \"-\"), defaults[\"false\"]).field(\"typeAnnotation\", or(def(\"TSType\"), null), defaults[\"null\"]);\n  def(\"TSTupleType\").bases(\"TSType\").build(\"elementTypes\").field(\"elementTypes\", [or(def(\"TSType\"), def(\"TSNamedTupleMember\"))]);\n  def(\"TSNamedTupleMember\").bases(\"TSType\").build(\"label\", \"elementType\", \"optional\").field(\"label\", def(\"Identifier\")).field(\"optional\", Boolean, defaults[\"false\"]).field(\"elementType\", def(\"TSType\"));\n  def(\"TSRestType\").bases(\"TSType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TSType\"));\n  def(\"TSOptionalType\").bases(\"TSType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TSType\"));\n  def(\"TSIndexedAccessType\").bases(\"TSType\").build(\"objectType\", \"indexType\").field(\"objectType\", def(\"TSType\")).field(\"indexType\", def(\"TSType\"));\n  def(\"TSTypeOperator\").bases(\"TSType\").build(\"operator\").field(\"operator\", String).field(\"typeAnnotation\", def(\"TSType\"));\n  def(\"TSTypeAnnotation\").bases(\"Node\").build(\"typeAnnotation\").field(\"typeAnnotation\", or(def(\"TSType\"), def(\"TSTypeAnnotation\")));\n  def(\"TSIndexSignature\").bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\").build(\"parameters\", \"typeAnnotation\").field(\"parameters\", [def(\"Identifier\")]) // Length === 1\n  .field(\"readonly\", Boolean, defaults[\"false\"]);\n  def(\"TSPropertySignature\").bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\").build(\"key\", \"typeAnnotation\", \"optional\").field(\"key\", def(\"Expression\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"readonly\", Boolean, defaults[\"false\"]).field(\"optional\", Boolean, defaults[\"false\"]).field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n  def(\"TSMethodSignature\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\").build(\"key\", \"parameters\", \"typeAnnotation\").field(\"key\", def(\"Expression\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"optional\", Boolean, defaults[\"false\"]).field(\"parameters\", ParametersType);\n  def(\"TSTypePredicate\").bases(\"TSTypeAnnotation\", \"TSType\").build(\"parameterName\", \"typeAnnotation\", \"asserts\").field(\"parameterName\", or(def(\"Identifier\"), def(\"TSThisType\"))).field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"]).field(\"asserts\", Boolean, defaults[\"false\"]);\n  [\"TSCallSignatureDeclaration\", \"TSConstructSignatureDeclaration\"].forEach(function (typeName) {\n    def(typeName).bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\").build(\"parameters\", \"typeAnnotation\").field(\"parameters\", ParametersType);\n  });\n  def(\"TSEnumMember\").bases(\"Node\").build(\"id\", \"initializer\").field(\"id\", or(def(\"Identifier\"), StringLiteral)).field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n  def(\"TSTypeQuery\").bases(\"TSType\").build(\"exprName\").field(\"exprName\", or(TSEntityName, def(\"TSImportType\"))); // Inferred from Babylon's tsParseTypeMember method.\n\n  var TSTypeMember = or(def(\"TSCallSignatureDeclaration\"), def(\"TSConstructSignatureDeclaration\"), def(\"TSIndexSignature\"), def(\"TSMethodSignature\"), def(\"TSPropertySignature\"));\n  def(\"TSTypeLiteral\").bases(\"TSType\").build(\"members\").field(\"members\", [TSTypeMember]);\n  def(\"TSTypeParameter\").bases(\"Identifier\").build(\"name\", \"constraint\", \"default\").field(\"name\", String).field(\"constraint\", or(def(\"TSType\"), void 0), defaults[\"undefined\"]).field(\"default\", or(def(\"TSType\"), void 0), defaults[\"undefined\"]);\n  def(\"TSTypeAssertion\").bases(\"Expression\", \"Pattern\").build(\"typeAnnotation\", \"expression\").field(\"typeAnnotation\", def(\"TSType\")).field(\"expression\", def(\"Expression\")).field(\"extra\", or({\n    parenthesized: Boolean\n  }, null), defaults[\"null\"]);\n  def(\"TSTypeParameterDeclaration\").bases(\"Declaration\").build(\"params\").field(\"params\", [def(\"TSTypeParameter\")]);\n  def(\"TSTypeParameterInstantiation\").bases(\"Node\").build(\"params\").field(\"params\", [def(\"TSType\")]);\n  def(\"TSEnumDeclaration\").bases(\"Declaration\").build(\"id\", \"members\").field(\"id\", def(\"Identifier\")).field(\"const\", Boolean, defaults[\"false\"]).field(\"declare\", Boolean, defaults[\"false\"]).field(\"members\", [def(\"TSEnumMember\")]).field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n  def(\"TSTypeAliasDeclaration\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"id\", \"typeAnnotation\").field(\"id\", def(\"Identifier\")).field(\"declare\", Boolean, defaults[\"false\"]).field(\"typeAnnotation\", def(\"TSType\"));\n  def(\"TSModuleBlock\").bases(\"Node\").build(\"body\").field(\"body\", [def(\"Statement\")]);\n  def(\"TSModuleDeclaration\").bases(\"Declaration\").build(\"id\", \"body\").field(\"id\", or(StringLiteral, TSEntityName)).field(\"declare\", Boolean, defaults[\"false\"]).field(\"global\", Boolean, defaults[\"false\"]).field(\"body\", or(def(\"TSModuleBlock\"), def(\"TSModuleDeclaration\"), null), defaults[\"null\"]);\n  def(\"TSImportType\").bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\").build(\"argument\", \"qualifier\", \"typeParameters\").field(\"argument\", StringLiteral).field(\"qualifier\", or(TSEntityName, void 0), defaults[\"undefined\"]);\n  def(\"TSImportEqualsDeclaration\").bases(\"Declaration\").build(\"id\", \"moduleReference\").field(\"id\", def(\"Identifier\")).field(\"isExport\", Boolean, defaults[\"false\"]).field(\"moduleReference\", or(TSEntityName, def(\"TSExternalModuleReference\")));\n  def(\"TSExternalModuleReference\").bases(\"Declaration\").build(\"expression\").field(\"expression\", StringLiteral);\n  def(\"TSExportAssignment\").bases(\"Statement\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n  def(\"TSNamespaceExportDeclaration\").bases(\"Declaration\").build(\"id\").field(\"id\", def(\"Identifier\"));\n  def(\"TSInterfaceBody\").bases(\"Node\").build(\"body\").field(\"body\", [TSTypeMember]);\n  def(\"TSExpressionWithTypeArguments\").bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\").build(\"expression\", \"typeParameters\").field(\"expression\", TSEntityName);\n  def(\"TSInterfaceDeclaration\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"id\", \"body\").field(\"id\", TSEntityName).field(\"declare\", Boolean, defaults[\"false\"]).field(\"extends\", or([def(\"TSExpressionWithTypeArguments\")], null), defaults[\"null\"]).field(\"body\", def(\"TSInterfaceBody\"));\n  def(\"TSParameterProperty\").bases(\"Pattern\").build(\"parameter\").field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]).field(\"readonly\", Boolean, defaults[\"false\"]).field(\"parameter\", or(def(\"Identifier\"), def(\"AssignmentPattern\")));\n  def(\"ClassProperty\").field(\"access\", // Not \"accessibility\"?\n  or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]); // Defined already in es6 and babel-core.\n\n  def(\"ClassBody\").field(\"body\", [or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"), def(\"ClassPrivateProperty\"), def(\"ClassMethod\"), def(\"ClassPrivateMethod\"), // Just need to add these types:\n  def(\"TSDeclareMethod\"), TSTypeMember)]);\n}\n\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/jscodeshift/node_modules/ast-types/def/typescript.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","babel_core_1","__importDefault","type_annotations_1","types_1","shared_1","default_1","fork","use","default","types","n","namedTypes","def","Type","or","defaults","StringLiteral","from","deep","check","Literal","bases","TSEntityName","build","field","parenthesized","Boolean","forEach","keywordType","typeName","ParametersType","getDefault","String","TSTypeMember","module"],"mappings":"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","sourcesContent":["\"use strict\";;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar babel_core_1 = tslib_1.__importDefault(require(\"./babel-core\"));\nvar type_annotations_1 = tslib_1.__importDefault(require(\"./type-annotations\"));\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\nfunction default_1(fork) {\n    // Since TypeScript is parsed by Babylon, include the core Babylon types\n    // but omit the Flow-related types.\n    fork.use(babel_core_1.default);\n    fork.use(type_annotations_1.default);\n    var types = fork.use(types_1.default);\n    var n = types.namedTypes;\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    var StringLiteral = types.Type.from(function (value, deep) {\n        if (n.StringLiteral &&\n            n.StringLiteral.check(value, deep)) {\n            return true;\n        }\n        if (n.Literal &&\n            n.Literal.check(value, deep) &&\n            typeof value.value === \"string\") {\n            return true;\n        }\n        return false;\n    }, \"StringLiteral\");\n    def(\"TSType\")\n        .bases(\"Node\");\n    var TSEntityName = or(def(\"Identifier\"), def(\"TSQualifiedName\"));\n    def(\"TSTypeReference\")\n        .bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\")\n        .build(\"typeName\", \"typeParameters\")\n        .field(\"typeName\", TSEntityName);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeParameters field.\n    def(\"TSHasOptionalTypeParameterInstantiation\")\n        .field(\"typeParameters\", or(def(\"TSTypeParameterInstantiation\"), null), defaults[\"null\"]);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeParameters field.\n    def(\"TSHasOptionalTypeParameters\")\n        .field(\"typeParameters\", or(def(\"TSTypeParameterDeclaration\"), null, void 0), defaults[\"null\"]);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeAnnotation field.\n    def(\"TSHasOptionalTypeAnnotation\")\n        .field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"]);\n    def(\"TSQualifiedName\")\n        .bases(\"Node\")\n        .build(\"left\", \"right\")\n        .field(\"left\", TSEntityName)\n        .field(\"right\", TSEntityName);\n    def(\"TSAsExpression\")\n        .bases(\"Expression\", \"Pattern\")\n        .build(\"expression\", \"typeAnnotation\")\n        .field(\"expression\", def(\"Expression\"))\n        .field(\"typeAnnotation\", def(\"TSType\"))\n        .field(\"extra\", or({ parenthesized: Boolean }, null), defaults[\"null\"]);\n    def(\"TSNonNullExpression\")\n        .bases(\"Expression\", \"Pattern\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    [\n        \"TSAnyKeyword\",\n        \"TSBigIntKeyword\",\n        \"TSBooleanKeyword\",\n        \"TSNeverKeyword\",\n        \"TSNullKeyword\",\n        \"TSNumberKeyword\",\n        \"TSObjectKeyword\",\n        \"TSStringKeyword\",\n        \"TSSymbolKeyword\",\n        \"TSUndefinedKeyword\",\n        \"TSUnknownKeyword\",\n        \"TSVoidKeyword\",\n        \"TSThisType\",\n    ].forEach(function (keywordType) {\n        def(keywordType)\n            .bases(\"TSType\")\n            .build();\n    });\n    def(\"TSArrayType\")\n        .bases(\"TSType\")\n        .build(\"elementType\")\n        .field(\"elementType\", def(\"TSType\"));\n    def(\"TSLiteralType\")\n        .bases(\"TSType\")\n        .build(\"literal\")\n        .field(\"literal\", or(def(\"NumericLiteral\"), def(\"StringLiteral\"), def(\"BooleanLiteral\"), def(\"TemplateLiteral\"), def(\"UnaryExpression\")));\n    [\"TSUnionType\",\n        \"TSIntersectionType\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .bases(\"TSType\")\n            .build(\"types\")\n            .field(\"types\", [def(\"TSType\")]);\n    });\n    def(\"TSConditionalType\")\n        .bases(\"TSType\")\n        .build(\"checkType\", \"extendsType\", \"trueType\", \"falseType\")\n        .field(\"checkType\", def(\"TSType\"))\n        .field(\"extendsType\", def(\"TSType\"))\n        .field(\"trueType\", def(\"TSType\"))\n        .field(\"falseType\", def(\"TSType\"));\n    def(\"TSInferType\")\n        .bases(\"TSType\")\n        .build(\"typeParameter\")\n        .field(\"typeParameter\", def(\"TSTypeParameter\"));\n    def(\"TSParenthesizedType\")\n        .bases(\"TSType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    var ParametersType = [or(def(\"Identifier\"), def(\"RestElement\"), def(\"ArrayPattern\"), def(\"ObjectPattern\"))];\n    [\"TSFunctionType\",\n        \"TSConstructorType\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .bases(\"TSType\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\")\n            .build(\"parameters\")\n            .field(\"parameters\", ParametersType);\n    });\n    def(\"TSDeclareFunction\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"id\", \"params\", \"returnType\")\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"async\", Boolean, defaults[\"false\"])\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"params\", [def(\"Pattern\")])\n        // tSFunctionTypeAnnotationCommon\n        .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), // Still used?\n    null), defaults[\"null\"]);\n    def(\"TSDeclareMethod\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"key\", \"params\", \"returnType\")\n        .field(\"async\", Boolean, defaults[\"false\"])\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"params\", [def(\"Pattern\")])\n        // classMethodOrPropertyCommon\n        .field(\"abstract\", Boolean, defaults[\"false\"])\n        .field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"])\n        .field(\"static\", Boolean, defaults[\"false\"])\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"key\", or(def(\"Identifier\"), def(\"StringLiteral\"), def(\"NumericLiteral\"), \n    // Only allowed if .computed is true.\n    def(\"Expression\")))\n        // classMethodOrDeclareMethodCommon\n        .field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"), function getDefault() { return \"method\"; })\n        .field(\"access\", // Not \"accessibility\"?\n    or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"])\n        .field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"])\n        // tSFunctionTypeAnnotationCommon\n        .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), // Still used?\n    null), defaults[\"null\"]);\n    def(\"TSMappedType\")\n        .bases(\"TSType\")\n        .build(\"typeParameter\", \"typeAnnotation\")\n        .field(\"readonly\", or(Boolean, \"+\", \"-\"), defaults[\"false\"])\n        .field(\"typeParameter\", def(\"TSTypeParameter\"))\n        .field(\"optional\", or(Boolean, \"+\", \"-\"), defaults[\"false\"])\n        .field(\"typeAnnotation\", or(def(\"TSType\"), null), defaults[\"null\"]);\n    def(\"TSTupleType\")\n        .bases(\"TSType\")\n        .build(\"elementTypes\")\n        .field(\"elementTypes\", [or(def(\"TSType\"), def(\"TSNamedTupleMember\"))]);\n    def(\"TSNamedTupleMember\")\n        .bases(\"TSType\")\n        .build(\"label\", \"elementType\", \"optional\")\n        .field(\"label\", def(\"Identifier\"))\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"elementType\", def(\"TSType\"));\n    def(\"TSRestType\")\n        .bases(\"TSType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSOptionalType\")\n        .bases(\"TSType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSIndexedAccessType\")\n        .bases(\"TSType\")\n        .build(\"objectType\", \"indexType\")\n        .field(\"objectType\", def(\"TSType\"))\n        .field(\"indexType\", def(\"TSType\"));\n    def(\"TSTypeOperator\")\n        .bases(\"TSType\")\n        .build(\"operator\")\n        .field(\"operator\", String)\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSTypeAnnotation\")\n        .bases(\"Node\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", or(def(\"TSType\"), def(\"TSTypeAnnotation\")));\n    def(\"TSIndexSignature\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\")\n        .build(\"parameters\", \"typeAnnotation\")\n        .field(\"parameters\", [def(\"Identifier\")]) // Length === 1\n        .field(\"readonly\", Boolean, defaults[\"false\"]);\n    def(\"TSPropertySignature\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\")\n        .build(\"key\", \"typeAnnotation\", \"optional\")\n        .field(\"key\", def(\"Expression\"))\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"readonly\", Boolean, defaults[\"false\"])\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSMethodSignature\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\")\n        .build(\"key\", \"parameters\", \"typeAnnotation\")\n        .field(\"key\", def(\"Expression\"))\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"parameters\", ParametersType);\n    def(\"TSTypePredicate\")\n        .bases(\"TSTypeAnnotation\", \"TSType\")\n        .build(\"parameterName\", \"typeAnnotation\", \"asserts\")\n        .field(\"parameterName\", or(def(\"Identifier\"), def(\"TSThisType\")))\n        .field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"])\n        .field(\"asserts\", Boolean, defaults[\"false\"]);\n    [\"TSCallSignatureDeclaration\",\n        \"TSConstructSignatureDeclaration\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\")\n            .build(\"parameters\", \"typeAnnotation\")\n            .field(\"parameters\", ParametersType);\n    });\n    def(\"TSEnumMember\")\n        .bases(\"Node\")\n        .build(\"id\", \"initializer\")\n        .field(\"id\", or(def(\"Identifier\"), StringLiteral))\n        .field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSTypeQuery\")\n        .bases(\"TSType\")\n        .build(\"exprName\")\n        .field(\"exprName\", or(TSEntityName, def(\"TSImportType\")));\n    // Inferred from Babylon's tsParseTypeMember method.\n    var TSTypeMember = or(def(\"TSCallSignatureDeclaration\"), def(\"TSConstructSignatureDeclaration\"), def(\"TSIndexSignature\"), def(\"TSMethodSignature\"), def(\"TSPropertySignature\"));\n    def(\"TSTypeLiteral\")\n        .bases(\"TSType\")\n        .build(\"members\")\n        .field(\"members\", [TSTypeMember]);\n    def(\"TSTypeParameter\")\n        .bases(\"Identifier\")\n        .build(\"name\", \"constraint\", \"default\")\n        .field(\"name\", String)\n        .field(\"constraint\", or(def(\"TSType\"), void 0), defaults[\"undefined\"])\n        .field(\"default\", or(def(\"TSType\"), void 0), defaults[\"undefined\"]);\n    def(\"TSTypeAssertion\")\n        .bases(\"Expression\", \"Pattern\")\n        .build(\"typeAnnotation\", \"expression\")\n        .field(\"typeAnnotation\", def(\"TSType\"))\n        .field(\"expression\", def(\"Expression\"))\n        .field(\"extra\", or({ parenthesized: Boolean }, null), defaults[\"null\"]);\n    def(\"TSTypeParameterDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"params\")\n        .field(\"params\", [def(\"TSTypeParameter\")]);\n    def(\"TSTypeParameterInstantiation\")\n        .bases(\"Node\")\n        .build(\"params\")\n        .field(\"params\", [def(\"TSType\")]);\n    def(\"TSEnumDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"members\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"const\", Boolean, defaults[\"false\"])\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"members\", [def(\"TSEnumMember\")])\n        .field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSTypeAliasDeclaration\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"id\", \"typeAnnotation\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSModuleBlock\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n    def(\"TSModuleDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"body\")\n        .field(\"id\", or(StringLiteral, TSEntityName))\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"global\", Boolean, defaults[\"false\"])\n        .field(\"body\", or(def(\"TSModuleBlock\"), def(\"TSModuleDeclaration\"), null), defaults[\"null\"]);\n    def(\"TSImportType\")\n        .bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\")\n        .build(\"argument\", \"qualifier\", \"typeParameters\")\n        .field(\"argument\", StringLiteral)\n        .field(\"qualifier\", or(TSEntityName, void 0), defaults[\"undefined\"]);\n    def(\"TSImportEqualsDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"moduleReference\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"isExport\", Boolean, defaults[\"false\"])\n        .field(\"moduleReference\", or(TSEntityName, def(\"TSExternalModuleReference\")));\n    def(\"TSExternalModuleReference\")\n        .bases(\"Declaration\")\n        .build(\"expression\")\n        .field(\"expression\", StringLiteral);\n    def(\"TSExportAssignment\")\n        .bases(\"Statement\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    def(\"TSNamespaceExportDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\")\n        .field(\"id\", def(\"Identifier\"));\n    def(\"TSInterfaceBody\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [TSTypeMember]);\n    def(\"TSExpressionWithTypeArguments\")\n        .bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\")\n        .build(\"expression\", \"typeParameters\")\n        .field(\"expression\", TSEntityName);\n    def(\"TSInterfaceDeclaration\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"id\", \"body\")\n        .field(\"id\", TSEntityName)\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"extends\", or([def(\"TSExpressionWithTypeArguments\")], null), defaults[\"null\"])\n        .field(\"body\", def(\"TSInterfaceBody\"));\n    def(\"TSParameterProperty\")\n        .bases(\"Pattern\")\n        .build(\"parameter\")\n        .field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"])\n        .field(\"readonly\", Boolean, defaults[\"false\"])\n        .field(\"parameter\", or(def(\"Identifier\"), def(\"AssignmentPattern\")));\n    def(\"ClassProperty\")\n        .field(\"access\", // Not \"accessibility\"?\n    or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]);\n    // Defined already in es6 and babel-core.\n    def(\"ClassBody\")\n        .field(\"body\", [or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"), def(\"ClassPrivateProperty\"), def(\"ClassMethod\"), def(\"ClassPrivateMethod\"), \n        // Just need to add these types:\n        def(\"TSDeclareMethod\"), TSTypeMember)]);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n"]},"metadata":{},"sourceType":"script"}