{"ast":null,"code":"(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'font-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n\n      if (code[0] === '#') {\n        var value;\n\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n\n        if (known) {\n          return known;\n        } // unable to decode\n\n\n        return m;\n      }\n    });\n    return text;\n  }\n\n  Prism.languages.md = Prism.languages.markdown;\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-markdown.js"],"names":["Prism","inner","source","createInline","pattern","replace","RegExp","tableCell","tableRow","tableLine","languages","markdown","extend","insertBefore","lookbehind","greedy","inside","alias","yaml","punctuation","forEach","token","content","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","lang","exec","toLowerCase","push","classes","cls","match","grammar","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","highlight","textContent","tagPattern","markup","tag","KNOWN_ENTITY_NAMES","fromCodePoint","String","fromCharCode","html","text","m","code","value","parseInt","slice","Number","known","md"],"mappings":"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","sourcesContent":["(function (Prism) {\n\n\t// Allow only one line break\n\tvar inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n\n\t/**\n\t * This function is intended for the creation of the bold or italic pattern.\n\t *\n\t * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n\t *\n\t * _Note:_ Keep in mind that this adds a capturing group.\n\t *\n\t * @param {string} pattern\n\t * @returns {RegExp}\n\t */\n\tfunction createInline(pattern) {\n\t\tpattern = pattern.replace(/<inner>/g, function () { return inner; });\n\t\treturn RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n\t}\n\n\n\tvar tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n\tvar tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () { return tableCell; });\n\tvar tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n\n\n\tPrism.languages.markdown = Prism.languages.extend('markup', {});\n\tPrism.languages.insertBefore('markdown', 'prolog', {\n\t\t'front-matter-block': {\n\t\t\tpattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /^---|---$/,\n\t\t\t\t'font-matter': {\n\t\t\t\t\tpattern: /\\S+(?:\\s+\\S+)*/,\n\t\t\t\t\talias: ['yaml', 'language-yaml'],\n\t\t\t\t\tinside: Prism.languages.yaml\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'blockquote': {\n\t\t\t// > ...\n\t\t\tpattern: /^>(?:[\\t ]*>)*/m,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'table': {\n\t\t\tpattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n\t\t\tinside: {\n\t\t\t\t'table-data-rows': {\n\t\t\t\t\tpattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'table-data': {\n\t\t\t\t\t\t\tpattern: RegExp(tableCell),\n\t\t\t\t\t\t\tinside: Prism.languages.markdown\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': /\\|/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'table-line': {\n\t\t\t\t\tpattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /\\||:?-{3,}:?/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'table-header-row': {\n\t\t\t\t\tpattern: RegExp('^' + tableRow + '$'),\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'table-header': {\n\t\t\t\t\t\t\tpattern: RegExp(tableCell),\n\t\t\t\t\t\t\talias: 'important',\n\t\t\t\t\t\t\tinside: Prism.languages.markdown\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': /\\|/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'code': [\n\t\t\t{\n\t\t\t\t// Prefixed by 4 spaces or 1 tab and preceded by an empty line\n\t\t\t\tpattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'keyword'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// ```optional language\n\t\t\t\t// code block\n\t\t\t\t// ```\n\t\t\t\tpattern: /^```[\\s\\S]*?^```$/m,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'code-block': {\n\t\t\t\t\t\tpattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t},\n\t\t\t\t\t'code-language': {\n\t\t\t\t\t\tpattern: /^(```).+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t},\n\t\t\t\t\t'punctuation': /```/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'title': [\n\t\t\t{\n\t\t\t\t// title 1\n\t\t\t\t// =======\n\n\t\t\t\t// title 2\n\t\t\t\t// -------\n\t\t\t\tpattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n\t\t\t\talias: 'important',\n\t\t\t\tinside: {\n\t\t\t\t\tpunctuation: /==+$|--+$/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t// # title 1\n\t\t\t\t// ###### title 6\n\t\t\t\tpattern: /(^\\s*)#.+/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'important',\n\t\t\t\tinside: {\n\t\t\t\t\tpunctuation: /^#+|#+$/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'hr': {\n\t\t\t// ***\n\t\t\t// ---\n\t\t\t// * * *\n\t\t\t// -----------\n\t\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'list': {\n\t\t\t// * item\n\t\t\t// + item\n\t\t\t// - item\n\t\t\t// 1. item\n\t\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'url-reference': {\n\t\t\t// [id]: http://example.com \"Optional title\"\n\t\t\t// [id]: http://example.com 'Optional title'\n\t\t\t// [id]: http://example.com (Optional title)\n\t\t\t// [id]: <http://example.com> \"Optional title\"\n\t\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n\t\t\tinside: {\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n\t\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/\n\t\t\t},\n\t\t\talias: 'url'\n\t\t},\n\t\t'bold': {\n\t\t\t// **strong**\n\t\t\t// __strong__\n\n\t\t\t// allow one nested instance of italic text using the same delimiter\n\t\t\tpattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^..)[\\s\\S]+(?=..$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /\\*\\*|__/\n\t\t\t}\n\t\t},\n\t\t'italic': {\n\t\t\t// *em*\n\t\t\t// _em_\n\n\t\t\t// allow one nested instance of bold text using the same delimiter\n\t\t\tpattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^.)[\\s\\S]+(?=.$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /[*_]/\n\t\t\t}\n\t\t},\n\t\t'strike': {\n\t\t\t// ~~strike through~~\n\t\t\t// ~strike~\n\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\tpattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /~~?/\n\t\t\t}\n\t\t},\n\t\t'code-snippet': {\n\t\t\t// `code`\n\t\t\t// ``code``\n\t\t\tpattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: ['code', 'keyword']\n\t\t},\n\t\t'url': {\n\t\t\t// [example](http://example.com \"Optional title\")\n\t\t\t// [example][id]\n\t\t\t// [example] [id]\n\t\t\tpattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'operator': /^!/,\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^\\[)[^\\]]+(?=\\])/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'url': {\n\t\t\t\t\tpattern: /(^\\]\\()[^\\s)]+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n\t\t['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n\t\t\tif (token !== inside) {\n\t\t\t\tPrism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n\t\t\t}\n\t\t});\n\t});\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tif (env.language !== 'markdown' && env.language !== 'md') {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction walkTokens(tokens) {\n\t\t\tif (!tokens || typeof tokens === 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i = 0, l = tokens.length; i < l; i++) {\n\t\t\t\tvar token = tokens[i];\n\n\t\t\t\tif (token.type !== 'code') {\n\t\t\t\t\twalkTokens(token.content);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n\t\t\t\t * is optional. But the grammar is defined so that there is only one case we have to handle:\n\t\t\t\t *\n\t\t\t\t * token.content = [\n\t\t\t\t *     <span class=\"punctuation\">```</span>,\n\t\t\t\t *     <span class=\"code-language\">xxxx</span>,\n\t\t\t\t *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n\t\t\t\t *     <span class=\"code-block\">...</span>,\n\t\t\t\t *     '\\n', // exactly one new lines again\n\t\t\t\t *     <span class=\"punctuation\">```</span>\n\t\t\t\t * ];\n\t\t\t\t */\n\n\t\t\t\tvar codeLang = token.content[1];\n\t\t\t\tvar codeBlock = token.content[3];\n\n\t\t\t\tif (codeLang && codeBlock &&\n\t\t\t\t\tcodeLang.type === 'code-language' && codeBlock.type === 'code-block' &&\n\t\t\t\t\ttypeof codeLang.content === 'string') {\n\n\t\t\t\t\t// this might be a language that Prism does not support\n\n\t\t\t\t\t// do some replacements to support C++, C#, and F#\n\t\t\t\t\tvar lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp');\n\t\t\t\t\t// only use the first word\n\t\t\t\t\tlang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n\t\t\t\t\tvar alias = 'language-' + lang;\n\n\t\t\t\t\t// add alias\n\t\t\t\t\tif (!codeBlock.alias) {\n\t\t\t\t\t\tcodeBlock.alias = [alias];\n\t\t\t\t\t} else if (typeof codeBlock.alias === 'string') {\n\t\t\t\t\t\tcodeBlock.alias = [codeBlock.alias, alias];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcodeBlock.alias.push(alias);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\twalkTokens(env.tokens);\n\t});\n\n\tPrism.hooks.add('wrap', function (env) {\n\t\tif (env.type !== 'code-block') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar codeLang = '';\n\t\tfor (var i = 0, l = env.classes.length; i < l; i++) {\n\t\t\tvar cls = env.classes[i];\n\t\t\tvar match = /language-(.+)/.exec(cls);\n\t\t\tif (match) {\n\t\t\t\tcodeLang = match[1];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tvar grammar = Prism.languages[codeLang];\n\n\t\tif (!grammar) {\n\t\t\tif (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n\t\t\t\tvar id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n\t\t\t\tenv.attributes['id'] = id;\n\n\t\t\t\tPrism.plugins.autoloader.loadLanguages(codeLang, function () {\n\t\t\t\t\tvar ele = document.getElementById(id);\n\t\t\t\t\tif (ele) {\n\t\t\t\t\t\tele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tenv.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n\t\t}\n\t});\n\n\tvar tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n\n\t/**\n\t * A list of known entity names.\n\t *\n\t * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n\t *\n\t * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n\t */\n\tvar KNOWN_ENTITY_NAMES = {\n\t\t'amp': '&',\n\t\t'lt': '<',\n\t\t'gt': '>',\n\t\t'quot': '\"',\n\t};\n\n\t// IE 11 doesn't support `String.fromCodePoint`\n\tvar fromCodePoint = String.fromCodePoint || String.fromCharCode;\n\n\t/**\n\t * Returns the text content of a given HTML source code string.\n\t *\n\t * @param {string} html\n\t * @returns {string}\n\t */\n\tfunction textContent(html) {\n\t\t// remove all tags\n\t\tvar text = html.replace(tagPattern, '');\n\n\t\t// decode known entities\n\t\ttext = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n\t\t\tcode = code.toLowerCase();\n\n\t\t\tif (code[0] === '#') {\n\t\t\t\tvar value;\n\t\t\t\tif (code[1] === 'x') {\n\t\t\t\t\tvalue = parseInt(code.slice(2), 16);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = Number(code.slice(1));\n\t\t\t\t}\n\n\t\t\t\treturn fromCodePoint(value);\n\t\t\t} else {\n\t\t\t\tvar known = KNOWN_ENTITY_NAMES[code];\n\t\t\t\tif (known) {\n\t\t\t\t\treturn known;\n\t\t\t\t}\n\n\t\t\t\t// unable to decode\n\t\t\t\treturn m;\n\t\t\t}\n\t\t});\n\n\t\treturn text;\n\t}\n\n\tPrism.languages.md = Prism.languages.markdown;\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}