{"ast":null,"code":"exports.exit = {\n  taskListCheckValueChecked: exitCheck,\n  taskListCheckValueUnchecked: exitCheck,\n  paragraph: exitParagraphWithTaskListItem\n};\n\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  this.stack[this.stack.length - 2].checked = token.type === 'taskListCheckValueChecked';\n}\n\nfunction exitParagraphWithTaskListItem(token) {\n  var parent = this.stack[this.stack.length - 2];\n  var node = this.stack[this.stack.length - 1];\n  var siblings = parent.children;\n  var head = node.children[0];\n  var index = -1;\n  var firstParaghraph;\n\n  if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean' && head && head.type === 'text') {\n    while (++index < siblings.length) {\n      if (siblings[index].type === 'paragraph') {\n        firstParaghraph = siblings[index];\n        break;\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1);\n\n      if (head.value.length === 0) {\n        node.children.shift();\n      } else {\n        head.position.start.column++;\n        head.position.start.offset++;\n        node.position.start = Object.assign({}, head.position.start);\n      }\n    }\n  }\n\n  this.exit(token);\n}","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/mdast-util-gfm-task-list-item/from-markdown.js"],"names":["exports","exit","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","exitParagraphWithTaskListItem","token","stack","length","checked","type","parent","node","siblings","children","head","index","firstParaghraph","value","slice","shift","position","start","column","offset","Object","assign"],"mappings":"AAAAA,OAAO,CAACC,IAAR,GAAe;AACbC,EAAAA,yBAAyB,EAAEC,SADd;AAEbC,EAAAA,2BAA2B,EAAED,SAFhB;AAGbE,EAAAA,SAAS,EAAEC;AAHE,CAAf;;AAMA,SAASH,SAAT,CAAmBI,KAAnB,EAA0B;AACxB;AACA,OAAKC,KAAL,CAAW,KAAKA,KAAL,CAAWC,MAAX,GAAoB,CAA/B,EAAkCC,OAAlC,GACEH,KAAK,CAACI,IAAN,KAAe,2BADjB;AAED;;AAED,SAASL,6BAAT,CAAuCC,KAAvC,EAA8C;AAC5C,MAAIK,MAAM,GAAG,KAAKJ,KAAL,CAAW,KAAKA,KAAL,CAAWC,MAAX,GAAoB,CAA/B,CAAb;AACA,MAAII,IAAI,GAAG,KAAKL,KAAL,CAAW,KAAKA,KAAL,CAAWC,MAAX,GAAoB,CAA/B,CAAX;AACA,MAAIK,QAAQ,GAAGF,MAAM,CAACG,QAAtB;AACA,MAAIC,IAAI,GAAGH,IAAI,CAACE,QAAL,CAAc,CAAd,CAAX;AACA,MAAIE,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,eAAJ;;AAEA,MACEN,MAAM,IACNA,MAAM,CAACD,IAAP,KAAgB,UADhB,IAEA,OAAOC,MAAM,CAACF,OAAd,KAA0B,SAF1B,IAGAM,IAHA,IAIAA,IAAI,CAACL,IAAL,KAAc,MALhB,EAME;AACA,WAAO,EAAEM,KAAF,GAAUH,QAAQ,CAACL,MAA1B,EAAkC;AAChC,UAAIK,QAAQ,CAACG,KAAD,CAAR,CAAgBN,IAAhB,KAAyB,WAA7B,EAA0C;AACxCO,QAAAA,eAAe,GAAGJ,QAAQ,CAACG,KAAD,CAA1B;AACA;AACD;AACF;;AAED,QAAIC,eAAe,KAAKL,IAAxB,EAA8B;AAC5B;AACAG,MAAAA,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACG,KAAL,CAAWC,KAAX,CAAiB,CAAjB,CAAb;;AAEA,UAAIJ,IAAI,CAACG,KAAL,CAAWV,MAAX,KAAsB,CAA1B,EAA6B;AAC3BI,QAAAA,IAAI,CAACE,QAAL,CAAcM,KAAd;AACD,OAFD,MAEO;AACLL,QAAAA,IAAI,CAACM,QAAL,CAAcC,KAAd,CAAoBC,MAApB;AACAR,QAAAA,IAAI,CAACM,QAAL,CAAcC,KAAd,CAAoBE,MAApB;AACAZ,QAAAA,IAAI,CAACS,QAAL,CAAcC,KAAd,GAAsBG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,IAAI,CAACM,QAAL,CAAcC,KAAhC,CAAtB;AACD;AACF;AACF;;AAED,OAAKtB,IAAL,CAAUM,KAAV;AACD","sourcesContent":["exports.exit = {\n  taskListCheckValueChecked: exitCheck,\n  taskListCheckValueUnchecked: exitCheck,\n  paragraph: exitParagraphWithTaskListItem\n}\n\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  this.stack[this.stack.length - 2].checked =\n    token.type === 'taskListCheckValueChecked'\n}\n\nfunction exitParagraphWithTaskListItem(token) {\n  var parent = this.stack[this.stack.length - 2]\n  var node = this.stack[this.stack.length - 1]\n  var siblings = parent.children\n  var head = node.children[0]\n  var index = -1\n  var firstParaghraph\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean' &&\n    head &&\n    head.type === 'text'\n  ) {\n    while (++index < siblings.length) {\n      if (siblings[index].type === 'paragraph') {\n        firstParaghraph = siblings[index]\n        break\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1)\n\n      if (head.value.length === 0) {\n        node.children.shift()\n      } else {\n        head.position.start.column++\n        head.position.start.offset++\n        node.position.start = Object.assign({}, head.position.start)\n      }\n    }\n  }\n\n  this.exit(token)\n}\n"]},"metadata":{},"sourceType":"script"}