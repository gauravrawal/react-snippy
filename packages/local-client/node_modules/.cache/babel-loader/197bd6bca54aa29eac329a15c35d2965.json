{"ast":null,"code":"(function (Prism) {\n  // https://github.com/coq/coq\n  var commentSource = /\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source;\n\n  for (var i = 0; i < 2; i++) {\n    commentSource = commentSource.replace(/<self>/g, function () {\n      return commentSource;\n    });\n  }\n\n  commentSource = commentSource.replace(/<self>/g, '[]');\n  Prism.languages.coq = {\n    'comment': RegExp(commentSource),\n    'string': {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    'attribute': [{\n      pattern: RegExp(/#\\[(?:[^\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<comment>)*\\]/.source.replace(/<comment>/g, function () {\n        return commentSource;\n      })),\n      greedy: true,\n      alias: 'attr-name',\n      inside: {\n        'comment': RegExp(commentSource),\n        'string': {\n          pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n          greedy: true\n        },\n        'operator': /=/,\n        'punctuation': /^#\\[|\\]$|[,()]/\n      }\n    }, {\n      pattern: /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n      alias: 'attr-name'\n    }],\n    'keyword': /\\b(?:_|Abort|About|Add|Admit|Admitted|All|apply|Arguments|as|As|Assumptions|at|Axiom|Axioms|Back|BackTo|Backtrace|Bind|BinOp|BinOpSpec|BinRel|Blacklist|by|Canonical|Case|Cd|Check|Class|Classes|Close|Coercion|Coercions|cofix|CoFixpoint|CoInductive|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|else|end|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|exists|exists2|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|fix|Fixpoint|Flags|Focus|for|forall|From|fun|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|Identity|if|IF|Immediate|Implicit|Implicits|Import|in|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|let|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|match|Match|measure|Method|Minimality|ML|Module|Modules|Morphism|move|Next|NoInline|Notation|Number|Obligation|Obligations|OCaml|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|Property|PropOp|Proposition|PropUOp|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|removed|Require|Reserved|Reset|Resolve|Restart|return|Rewrite|Right|Ring|Rings|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|SProp|Step|Strategies|Strategy|String|struct|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|then|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|UnOp|UnOpSpec|Unshelve|using|Variable|Variables|Variant|Verbose|View|Visibility|wf|where|with|Zify)\\b/,\n    'number': /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n    'punct': {\n      pattern: /@\\{|\\{\\||\\[=|:>/,\n      alias: 'punctuation'\n    },\n    'operator': /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n    'punctuation': /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n  };\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-coq.js"],"names":["Prism","commentSource","source","i","replace","languages","coq","RegExp","pattern","greedy","alias","inside"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AAEjB;AAEA,MAAIC,aAAa,GAAG,8CAA8CC,MAAlE;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC3BF,IAAAA,aAAa,GAAGA,aAAa,CAACG,OAAd,CAAsB,SAAtB,EAAiC,YAAY;AAAE,aAAOH,aAAP;AAAuB,KAAtE,CAAhB;AACA;;AACDA,EAAAA,aAAa,GAAGA,aAAa,CAACG,OAAd,CAAsB,SAAtB,EAAiC,IAAjC,CAAhB;AAEAJ,EAAAA,KAAK,CAACK,SAAN,CAAgBC,GAAhB,GAAsB;AACrB,eAAWC,MAAM,CAACN,aAAD,CADI;AAErB,cAAU;AACTO,MAAAA,OAAO,EAAE,qBADA;AAETC,MAAAA,MAAM,EAAE;AAFC,KAFW;AAMrB,iBAAa,CACZ;AACCD,MAAAA,OAAO,EAAED,MAAM,CACd,2DAA2DL,MAA3D,CACEE,OADF,CACU,YADV,EACwB,YAAY;AAAE,eAAOH,aAAP;AAAuB,OAD7D,CADc,CADhB;AAKCQ,MAAAA,MAAM,EAAE,IALT;AAMCC,MAAAA,KAAK,EAAE,WANR;AAOCC,MAAAA,MAAM,EAAE;AACP,mBAAWJ,MAAM,CAACN,aAAD,CADV;AAEP,kBAAU;AACTO,UAAAA,OAAO,EAAE,qBADA;AAETC,UAAAA,MAAM,EAAE;AAFC,SAFH;AAOP,oBAAY,GAPL;AAQP,uBAAe;AARR;AAPT,KADY,EAmBZ;AACCD,MAAAA,OAAO,EAAE,uFADV;AAECE,MAAAA,KAAK,EAAE;AAFR,KAnBY,CANQ;AA+BrB,eAAW,y/DA/BU;AAiCrB,cAAU,4GAjCW;AAmCrB,aAAS;AACRF,MAAAA,OAAO,EAAE,iBADD;AAERE,MAAAA,KAAK,EAAE;AAFC,KAnCY;AAuCrB,gBAAY,6FAvCS;AAwCrB,mBAAe;AAxCM,GAAtB;AA2CA,CArDA,EAqDCV,KArDD,CAAD","sourcesContent":["(function (Prism) {\n\n\t// https://github.com/coq/coq\n\n\tvar commentSource = /\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source;\n\tfor (var i = 0; i < 2; i++) {\n\t\tcommentSource = commentSource.replace(/<self>/g, function () { return commentSource; });\n\t}\n\tcommentSource = commentSource.replace(/<self>/g, '[]');\n\n\tPrism.languages.coq = {\n\t\t'comment': RegExp(commentSource),\n\t\t'string': {\n\t\t\tpattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'attribute': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t/#\\[(?:[^\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<comment>)*\\]/.source\n\t\t\t\t\t\t.replace(/<comment>/g, function () { return commentSource; })\n\t\t\t\t),\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'attr-name',\n\t\t\t\tinside: {\n\t\t\t\t\t'comment': RegExp(commentSource),\n\t\t\t\t\t'string': {\n\t\t\t\t\t\tpattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n\t\t\t\t\t\tgreedy: true\n\t\t\t\t\t},\n\n\t\t\t\t\t'operator': /=/,\n\t\t\t\t\t'punctuation': /^#\\[|\\]$|[,()]/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n\t\t\t\talias: 'attr-name'\n\t\t\t}\n\t\t],\n\n\t\t'keyword': /\\b(?:_|Abort|About|Add|Admit|Admitted|All|apply|Arguments|as|As|Assumptions|at|Axiom|Axioms|Back|BackTo|Backtrace|Bind|BinOp|BinOpSpec|BinRel|Blacklist|by|Canonical|Case|Cd|Check|Class|Classes|Close|Coercion|Coercions|cofix|CoFixpoint|CoInductive|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|else|end|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|exists|exists2|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|fix|Fixpoint|Flags|Focus|for|forall|From|fun|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|Identity|if|IF|Immediate|Implicit|Implicits|Import|in|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|let|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|match|Match|measure|Method|Minimality|ML|Module|Modules|Morphism|move|Next|NoInline|Notation|Number|Obligation|Obligations|OCaml|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|Property|PropOp|Proposition|PropUOp|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|removed|Require|Reserved|Reset|Resolve|Restart|return|Rewrite|Right|Ring|Rings|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|SProp|Step|Strategies|Strategy|String|struct|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|then|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|UnOp|UnOpSpec|Unshelve|using|Variable|Variables|Variant|Verbose|View|Visibility|wf|where|with|Zify)\\b/,\n\n\t\t'number': /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n\n\t\t'punct': {\n\t\t\tpattern: /@\\{|\\{\\||\\[=|:>/,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'operator': /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n\t\t'punctuation': /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n\t};\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}