{"ast":null,"code":"(function (Prism) {\n  var comment_inside = {\n    'function': /\\b(?:TODOS?|FIX(?:MES?)?|NOTES?|BUGS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n  };\n  var string_inside = {\n    'number': /\\\\[^\\s']|%\\w/\n  };\n  var factor = {\n    'comment': [{\n      // ! single-line exclamation point comments with whitespace after/around the !\n      pattern: /(^|\\s)(?:! .*|!$)/,\n      lookbehind: true,\n      inside: comment_inside\n    },\n    /* from basis/multiline: */\n    {\n      // /* comment */, /* comment*/\n      pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      inside: comment_inside\n    }, {\n      // ![[ comment ]] , ![===[ comment]===]\n      pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      inside: comment_inside\n    }],\n    'number': [{\n      // basic base 10 integers 9, -9\n      pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n      pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n      lookbehind: true\n    }, {\n      // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n      pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // positive mixed numbers 23+1/5 +23+1/5\n      pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // negative mixed numbers -23-1/5\n      pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n      // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n      pattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n      lookbehind: true\n    }, {\n      // NAN literal syntax NAN: 80000deadbeef, NAN: a\n      pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      /*\n      \tbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n      \t\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\n      \tThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n      \t<https://docs.factorcode.org/content/article-syntax-floats.html>\n      */\n      pattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n      lookbehind: true\n    }],\n    // R/ regexp?\\/\\\\/\n    'regexp': {\n      pattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'number',\n      inside: {\n        'variable': /\\\\\\S/,\n        'keyword': /[+?*\\[\\]^$(){}.|]/,\n        'operator': {\n          pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n          lookbehind: true\n        }\n      }\n    },\n    'boolean': {\n      pattern: /(^|\\s)[tf](?=\\s|$)/,\n      lookbehind: true\n    },\n    // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n    'custom-string': {\n      pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'number': /\\\\\\S|%\\w|\\//\n      }\n    },\n    'multiline-string': [{\n      // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n      pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'number': string_inside.number,\n        // trailing semicolon on its own line\n        'semicolon-or-setlocal': {\n          pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n          lookbehind: true,\n          alias: 'function'\n        }\n      }\n    }, {\n      // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n      pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: string_inside\n    }, {\n      // [[ string ]], [==[ string]==]\n      pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: string_inside\n    }],\n    'special-using': {\n      pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        // this is essentially a regex for vocab names, which i don't want to specify\n        // but the USING: gets picked up as a vocab name\n        'string': {\n          pattern: /(\\s)[^:\\s]+/,\n          lookbehind: true\n        }\n      }\n    },\n\n    /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\n    \ttrying to do better is more work and regex-computation-time than it's worth though.\n    \t- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n    \t- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n    \t- we'd like if the following variable name conventions were recognised specifically:\n    \t\tspecial row variables = ..a b..\n    \t\ttype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\n    \t\tword throws unconditional error = *\n    \t\tany other word-like variable name = a ? q' etc\n    \t\thttps://docs.factorcode.org/content/article-effects.html\n    \t\tthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\n    \tthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n    */\n    // current solution is not great\n    'stack-effect-delimiter': [{\n      // opening parenthesis\n      pattern: /(^|\\s)(?:call|execute|eval)?\\((?=\\s)/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // middle --\n      pattern: /(\\s)--(?=\\s)/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // closing parenthesis\n      pattern: /(\\s)\\)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    'combinators': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'kernel-builtin': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'sequences-builtin': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'math-builtin': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'constructor-word': {\n      // <array> but not <=>\n      pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'other-builtin-syntax': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'operator'\n    },\n\n    /*\n    \tfull list of supported word naming conventions: (the convention appears outside of the [brackets])\n    \t\tset-[x]\n    \t\tchange-[x]\n    \t\twith-[x]\n    \t\tnew-[x]\n    \t\t>[string]\n    \t\t[base]>\n    \t\t[string]>[number]\n    \t\t+[symbol]+\n    \t\t[boolean-word]?\n    \t\t?[of]\n    \t\t[slot-reader]>>\n    \t\t>>[slot-setter]\n    \t\t[slot-writer]<<\n    \t\t([implementation-detail])\n    \t\t[mutater]!\n    \t\t[variant]*\n    \t\t[prettyprint].\n    \t\t$[help-markup]\n    \t\t<constructors>, SYNTAX:, etc are supported by their own patterns.\n    \t\t`with` and `new` from `kernel` are their own builtins.\n    \t\tsee <https://docs.factorcode.org/content/article-conventions.html>\n    */\n    'conventionally-named-word': {\n      pattern: /(^|\\s)(?!\")(?:(?:set|change|with|new)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'colon-syntax': {\n      pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'function'\n    },\n    'semicolon-or-setlocal': {\n      pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n    'curly-brace-literal-delimiter': [{\n      // opening\n      pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // closing\n      pattern: /(\\s)\\}(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n    'quotation-delimiter': [{\n      // opening\n      pattern: /(^|\\s)\\[(?=\\s)/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // closing\n      pattern: /(\\s)\\](?=\\s|$)/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    'normal-word': {\n      pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n      lookbehind: true\n    },\n\n    /*\n    \tbasic first-class string \"a\"\n    \t\twith escaped double-quote \"a\\\"\"\n    \t\tescaped backslash \"\\\\\"\n    \t\tand general escapes since Factor has so many \"\\N\"\n    \t\tsyntax that works in the reference implementation that isn't fully\n    \tsupported because it's an implementation detail:\n    \t\t\"string 1\"\"string 2\" -> 2 strings (works anyway)\n    \t\t\"string\"5 -> string, 5\n    \t\t\"string\"[ ] -> string, quotation\n    \t\t{ \"a\"} -> array<string>\n    \t\tthe rest of those examples all properly recognise the string, but not\n    \t\tthe other object (number, quotation, etc)\n    \tthis is fine for a regex-only implementation.\n    */\n    'string': {\n      pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n      greedy: true,\n      inside: string_inside\n    }\n  };\n\n  var escape = function (str) {\n    return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1');\n  };\n\n  var arrToWordsRegExp = function (arr) {\n    return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)');\n  };\n\n  var builtins = {\n    'kernel-builtin': ['or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'],\n    'other-builtin-syntax': [// syntax\n    '=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable', // literals\n    '$', '$[', '${'],\n    'sequences-builtin': ['member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'],\n    'math-builtin': ['number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'] // that's all for now\n\n  };\n  Object.keys(builtins).forEach(function (k) {\n    factor[k].pattern = arrToWordsRegExp(builtins[k]);\n  });\n  var combinators = [// kernel\n  '2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@', // sequences\n  'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index', // math\n  'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?', // math.combinators\n  'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative', // combinators\n  'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot', // combinators.short-circuit\n  '2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&', // combinators.smart\n  'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence' // tafn\n  ];\n  factor.combinators.pattern = arrToWordsRegExp(combinators);\n  Prism.languages.factor = factor;\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-factor.js"],"names":["Prism","comment_inside","string_inside","factor","pattern","lookbehind","inside","greedy","alias","number","escape","str","replace","arrToWordsRegExp","arr","RegExp","map","join","builtins","Object","keys","forEach","k","combinators","languages"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AAEjB,MAAIC,cAAc,GAAG;AACpB,gBAAY;AADQ,GAArB;AAGA,MAAIC,aAAa,GAAG;AACnB,cAAU;AADS,GAApB;AAIA,MAAIC,MAAM,GAAG;AACZ,eAAW,CACV;AACC;AACAC,MAAAA,OAAO,EAAE,mBAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICC,MAAAA,MAAM,EAAEL;AAJT,KADU;AAQV;AACA;AACC;AACAG,MAAAA,OAAO,EAAE,kCAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICE,MAAAA,MAAM,EAAE,IAJT;AAKCD,MAAAA,MAAM,EAAEL;AALT,KATU,EAgBV;AACC;AACAG,MAAAA,OAAO,EAAE,6CAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICE,MAAAA,MAAM,EAAE,IAJT;AAKCD,MAAAA,MAAM,EAAEL;AALT,KAhBU,CADC;AA0BZ,cAAU,CACT;AACC;AACAG,MAAAA,OAAO,EAAE,wBAFV;AAGCC,MAAAA,UAAU,EAAE;AAHb,KADS,EAMT;AACC;AACAD,MAAAA,OAAO,EAAE,wDAFV;AAGCC,MAAAA,UAAU,EAAE;AAHb,KANS,EAWT;AACC;AACAD,MAAAA,OAAO,EAAE,gCAFV;AAGCC,MAAAA,UAAU,EAAE;AAHb,KAXS,EAgBT;AACC;AACAD,MAAAA,OAAO,EAAE,gCAFV;AAGCC,MAAAA,UAAU,EAAE;AAHb,KAhBS,EAqBT;AACC;AACAD,MAAAA,OAAO,EAAE,6BAFV;AAGCC,MAAAA,UAAU,EAAE;AAHb,KArBS,EA0BT;AACC;AACA;AACAD,MAAAA,OAAO,EAAE,6DAHV;AAICC,MAAAA,UAAU,EAAE;AAJb,KA1BS,EAgCT;AACC;AACAD,MAAAA,OAAO,EAAE,kCAFV;AAGCC,MAAAA,UAAU,EAAE;AAHb,KAhCS,EAqCT;AACC;AACJ;AACA;AACA;AACA;AACA;AACID,MAAAA,OAAO,EAAE,wEAPV;AAQCC,MAAAA,UAAU,EAAE;AARb,KArCS,CA1BE;AA2EZ;AACA,cAAU;AACTD,MAAAA,OAAO,EAAE,qEADA;AAETC,MAAAA,UAAU,EAAE,IAFH;AAGTG,MAAAA,KAAK,EAAE,QAHE;AAITF,MAAAA,MAAM,EAAE;AACP,oBAAY,MADL;AAEP,mBAAW,mBAFJ;AAGP,oBAAY;AACXF,UAAAA,OAAO,EAAE,4BADE;AAEXC,UAAAA,UAAU,EAAE;AAFD;AAHL;AAJC,KA5EE;AA0FZ,eAAW;AACVD,MAAAA,OAAO,EAAE,oBADC;AAEVC,MAAAA,UAAU,EAAE;AAFF,KA1FC;AA+FZ;AACA,qBAAiB;AAChBD,MAAAA,OAAO,EAAE,uCADO;AAEhBC,MAAAA,UAAU,EAAE,IAFI;AAGhBE,MAAAA,MAAM,EAAE,IAHQ;AAIhBC,MAAAA,KAAK,EAAE,QAJS;AAKhBF,MAAAA,MAAM,EAAE;AACP,kBAAU;AADH;AALQ,KAhGL;AA0GZ,wBAAoB,CACnB;AACC;AACAF,MAAAA,OAAO,EAAE,yDAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICE,MAAAA,MAAM,EAAE,IAJT;AAKCC,MAAAA,KAAK,EAAE,QALR;AAMCF,MAAAA,MAAM,EAAE;AACP,kBAAUJ,aAAa,CAACO,MADjB;AAEP;AACA,iCAAyB;AACxBL,UAAAA,OAAO,EAAE,yBADe;AAExBC,UAAAA,UAAU,EAAE,IAFY;AAGxBG,UAAAA,KAAK,EAAE;AAHiB;AAHlB;AANT,KADmB,EAiBnB;AACC;AACAJ,MAAAA,OAAO,EAAE,4DAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICE,MAAAA,MAAM,EAAE,IAJT;AAKCC,MAAAA,KAAK,EAAE,QALR;AAMCF,MAAAA,MAAM,EAAEJ;AANT,KAjBmB,EAyBnB;AACC;AACAE,MAAAA,OAAO,EAAE,4CAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICE,MAAAA,MAAM,EAAE,IAJT;AAKCC,MAAAA,KAAK,EAAE,QALR;AAMCF,MAAAA,MAAM,EAAEJ;AANT,KAzBmB,CA1GR;AA6IZ,qBAAiB;AAChBE,MAAAA,OAAO,EAAE,wCADO;AAEhBC,MAAAA,UAAU,EAAE,IAFI;AAGhBG,MAAAA,KAAK,EAAE,UAHS;AAIhBF,MAAAA,MAAM,EAAE;AACP;AACA;AACA,kBAAU;AACTF,UAAAA,OAAO,EAAE,aADA;AAETC,UAAAA,UAAU,EAAE;AAFH;AAHH;AAJQ,KA7IL;;AA2JZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;AACA,8BAA0B,CACzB;AACC;AACAD,MAAAA,OAAO,EAAE,sCAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICG,MAAAA,KAAK,EAAE;AAJR,KADyB,EAOzB;AACC;AACAJ,MAAAA,OAAO,EAAE,cAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICG,MAAAA,KAAK,EAAE;AAJR,KAPyB,EAazB;AACC;AACAJ,MAAAA,OAAO,EAAE,gBAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICG,MAAAA,KAAK,EAAE;AAJR,KAbyB,CA5Kd;AAiMZ,mBAAe;AACdJ,MAAAA,OAAO,EAAE,IADK;AAEdC,MAAAA,UAAU,EAAE,IAFE;AAGdG,MAAAA,KAAK,EAAE;AAHO,KAjMH;AAuMZ,sBAAkB;AACjBJ,MAAAA,OAAO,EAAE,IADQ;AAEjBC,MAAAA,UAAU,EAAE,IAFK;AAGjBG,MAAAA,KAAK,EAAE;AAHU,KAvMN;AA6MZ,yBAAqB;AACpBJ,MAAAA,OAAO,EAAE,IADW;AAEpBC,MAAAA,UAAU,EAAE,IAFQ;AAGpBG,MAAAA,KAAK,EAAE;AAHa,KA7MT;AAmNZ,oBAAgB;AACfJ,MAAAA,OAAO,EAAE,IADM;AAEfC,MAAAA,UAAU,EAAE,IAFG;AAGfG,MAAAA,KAAK,EAAE;AAHQ,KAnNJ;AAyNZ,wBAAoB;AACnB;AACAJ,MAAAA,OAAO,EAAE,gCAFU;AAGnBC,MAAAA,UAAU,EAAE,IAHO;AAInBG,MAAAA,KAAK,EAAE;AAJY,KAzNR;AAgOZ,4BAAwB;AACvBJ,MAAAA,OAAO,EAAE,IADc;AAEvBC,MAAAA,UAAU,EAAE,IAFW;AAGvBG,MAAAA,KAAK,EAAE;AAHgB,KAhOZ;;AAsOZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE,iCAA6B;AAC5BJ,MAAAA,OAAO,EAAE,yMADmB;AAE5BC,MAAAA,UAAU,EAAE,IAFgB;AAG5BG,MAAAA,KAAK,EAAE;AAHqB,KAjQjB;AAuQZ,oBAAgB;AACfJ,MAAAA,OAAO,EAAE,4DADM;AAEfC,MAAAA,UAAU,EAAE,IAFG;AAGfE,MAAAA,MAAM,EAAE,IAHO;AAIfC,MAAAA,KAAK,EAAE;AAJQ,KAvQJ;AA8QZ,6BAAyB;AACxBJ,MAAAA,OAAO,EAAE,sBADe;AAExBC,MAAAA,UAAU,EAAE,IAFY;AAGxBG,MAAAA,KAAK,EAAE;AAHiB,KA9Qb;AAoRZ;AACA,qCAAiC,CAChC;AACC;AACAJ,MAAAA,OAAO,EAAE,uBAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICG,MAAAA,KAAK,EAAE;AAJR,KADgC,EAOhC;AACC;AACAJ,MAAAA,OAAO,EAAE,gBAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICG,MAAAA,KAAK,EAAE;AAJR,KAPgC,CArRrB;AAqSZ;AACA,2BAAuB,CACtB;AACC;AACAJ,MAAAA,OAAO,EAAE,gBAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICG,MAAAA,KAAK,EAAE;AAJR,KADsB,EAOtB;AACC;AACAJ,MAAAA,OAAO,EAAE,gBAFV;AAGCC,MAAAA,UAAU,EAAE,IAHb;AAICG,MAAAA,KAAK,EAAE;AAJR,KAPsB,CAtSX;AAqTZ,mBAAe;AACdJ,MAAAA,OAAO,EAAE,yBADK;AAEdC,MAAAA,UAAU,EAAE;AAFE,KArTH;;AA0TZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE,cAAU;AACTD,MAAAA,OAAO,EAAE,oBADA;AAETG,MAAAA,MAAM,EAAE,IAFC;AAGTD,MAAAA,MAAM,EAAEJ;AAHC;AA3UE,GAAb;;AAkVA,MAAIQ,MAAM,GAAG,UAAUC,GAAV,EAAe;AAC3B,WAAO,CAACA,GAAG,GAAG,EAAP,EAAWC,OAAX,CAAmB,2BAAnB,EAAgD,MAAhD,CAAP;AACA,GAFD;;AAIA,MAAIC,gBAAgB,GAAG,UAAUC,GAAV,EAAe;AACrC,WAAO,IAAIC,MAAJ,CACN,eAAeD,GAAG,CAACE,GAAJ,CAAQN,MAAR,EAAgBO,IAAhB,CAAqB,GAArB,CAAf,GAA2C,YADrC,CAAP;AAGA,GAJD;;AAMA,MAAIC,QAAQ,GAAG;AACd,sBAAkB,CACjB,IADiB,EACX,OADW,EACF,OADE,EACO,MADP,EACe,SADf,EAC0B,KAD1B,EACiC,UADjC,EAC6C,iBAD7C,EACgE,KADhE,EACuE,MADvE,EAC+E,WAD/E,EAC4F,YAD5F,EAC0G,MAD1G,EACkH,UADlH,EAC8H,MAD9H,EACsI,MADtI,EAC8I,OAD9I,EACuJ,UADvJ,EACmK,MADnK,EAC2K,OAD3K,EACoL,MADpL,EAC4L,KAD5L,EACmM,GADnM,EACwM,GADxM,EAC6M,OAD7M,EACsN,OADtN,EAC+N,OAD/N,EACwO,MADxO,EACgP,iBADhP,EACmQ,KADnQ,EAC0Q,QAD1Q,EACoR,KADpR,EAC2R,OAD3R,EACoS,MADpS,EAC4S,OAD5S,EACqT,QADrT,EAC+T,MAD/T,EACuU,SADvU,EACkV,SADlV,EAC6V,MAD7V,EACqW,SADrW,EACgX,KADhX,EACuX,eADvX,EACwY,UADxY,EACoZ,OADpZ,EAC6Z,OAD7Z,EACsa,OADta,EAC+a,MAD/a,EACub,MADvb,EAC+b,MAD/b,EACuc,MADvc,EAC+c,KAD/c,EACsd,MADtd,EAC8d,MAD9d,EACse,OADte,EAC+e,SAD/e,EAC0f,WAD1f,EACugB,MADvgB,EAC+gB,OAD/gB,EACwhB,MADxhB,EACgiB,QADhiB,EAC0iB,eAD1iB,EAC2jB,QAD3jB,EACqkB,OADrkB,EAC8kB,WAD9kB,EAC2lB,UAD3lB,EACumB,mBADvmB,EAC4nB,iBAD5nB,EAC+oB,MAD/oB,EACupB,WADvpB,EACoqB,KADpqB,EAC2qB,OAD3qB,EACorB,KADprB,EAC2rB,OAD3rB,EACosB,KADpsB,EAC2sB,gBAD3sB,EAC6tB,SAD7tB,CADJ;AAId,4BAAwB,CACvB;AACA,aAFuB,EAEZ,WAFY,EAEC,WAFD,EAEc,IAFd,EAEoB,QAFpB,EAE8B,KAF9B,EAEqC,GAFrC,EAE0C,UAF1C,EAEsD,IAFtD,EAE4D,QAF5D,EAEsE,OAFtE,EAE+E,QAF/E,EAEyF,WAFzF,EAEsG,YAFtG,EAEoH,UAFpH,EAEgI,QAFhI,EAE0I,SAF1I,EAEqJ,eAFrJ,EAEsK,mBAFtK,EAE2L,WAF3L,EAEwM,SAFxM,EAEmN,kBAFnN,EAEuO,IAFvO,EAE6O,UAF7O,EAGvB;AACA,OAJuB,EAIlB,IAJkB,EAIZ,IAJY,CAJV;AAUd,yBAAqB,CACpB,YADoB,EACN,UADM,EACM,QADN,EACgB,kBADhB,EACoC,QADpC,EAC8C,YAD9C,EAC4D,YAD5D,EAC0E,WAD1E,EACuF,kBADvF,EAC2G,iBAD3G,EAC8H,UAD9H,EAC0I,YAD1I,EACwJ,MADxJ,EACgK,UADhK,EAC4K,SAD5K,EACuL,YADvL,EACqM,WADrM,EACkN,UADlN,EAC8N,MAD9N,EACsO,MADtO,EAC8O,KAD9O,EACqP,UADrP,EACiQ,SADjQ,EAC4Q,QAD5Q,EACsR,SADtR,EACiS,YADjS,EAC+S,YAD/S,EAC6T,QAD7T,EACuU,OADvU,EACgV,SADhV,EAC2V,mBAD3V,EACgX,YADhX,EAC8X,aAD9X,EAC6Y,MAD7Y,EACqZ,QADrZ,EAC+Z,eAD/Z,EACgb,mBADhb,EACqc,+BADrc,EACse,gCADte,EACwgB,WADxgB,EACqhB,SADrhB,EACgiB,UADhiB,EAC4iB,QAD5iB,EACsjB,YADtjB,EACokB,YADpkB,EACklB,SADllB,EAC6lB,QAD7lB,EACumB,MADvmB,EAC+mB,cAD/mB,EAC+nB,cAD/nB,EAC+oB,OAD/oB,EACwpB,MADxpB,EACgqB,QADhqB,EAC0qB,WAD1qB,EACurB,SADvrB,EACksB,OADlsB,EAC2sB,UAD3sB,EACutB,aADvtB,EACsuB,UADtuB,EACkvB,OADlvB,EAC2vB,WAD3vB,EACwwB,YADxwB,EACsxB,YADtxB,EACoyB,oBADpyB,EAC0zB,QAD1zB,EACo0B,QADp0B,EAC80B,UAD90B,EAC01B,cAD11B,EAC02B,SAD12B,EACq3B,YADr3B,EACm4B,MADn4B,EAC24B,SAD34B,EACs5B,OADt5B,EAC+5B,QAD/5B,EACy6B,QADz6B,EACm7B,MADn7B,EAC27B,YAD37B,EACy8B,UADz8B,EACq9B,WADr9B,EACk+B,KADl+B,EACy+B,YADz+B,EACu/B,SADv/B,EACkgC,YADlgC,EACghC,QADhhC,EAC0hC,aAD1hC,EACyiC,WADziC,EACsjC,MADtjC,EAC8jC,WAD9jC,EAC2kC,QAD3kC,EACqlC,WADrlC,EACkmC,gBADlmC,EAConC,SADpnC,EAC+nC,cAD/nC,EAC+oC,SAD/oC,EAC0pC,eAD1pC,EAC2qC,cAD3qC,EAC2rC,WAD3rC,EACwsC,kBADxsC,EAC4tC,SAD5tC,EACuuC,QADvuC,EACivC,UADjvC,EAC6vC,MAD7vC,EACqwC,YADrwC,EACmxC,mBADnxC,EACwyC,WADxyC,EACqzC,SADrzC,EACg0C,SADh0C,EAC20C,WAD30C,EACw1C,UADx1C,EACo2C,UADp2C,EACg3C,YADh3C,EAC83C,MAD93C,EACs4C,aADt4C,EACq5C,gBADr5C,EACu6C,OADv6C,EACg7C,SADh7C,EAC27C,WAD37C,EACw8C,eADx8C,EACy9C,aADz9C,EACw+C,mBADx+C,EAC6/C,KAD7/C,EACogD,SADpgD,EAC+gD,MAD/gD,EACuhD,QADvhD,EACiiD,MADjiD,EACyiD,qBADziD,EACgkD,YADhkD,EAC8kD,YAD9kD,EAC4lD,kBAD5lD,EACgnD,SADhnD,EAC2nD,aAD3nD,EAC0oD,QAD1oD,EACopD,YADppD,EACkqD,UADlqD,EAC8qD,iBAD9qD,EACisD,MADjsD,EACysD,MADzsD,EACitD,OADjtD,EAC0tD,OAD1tD,EACmuD,OADnuD,EAC4uD,WAD5uD,EACyvD,QADzvD,EACmwD,cADnwD,EACmxD,cADnxD,EACmyD,UADnyD,EAC+yD,UAD/yD,EAC2zD,KAD3zD,EACk0D,YADl0D,EACg1D,WADh1D,EAC61D,UAD71D,EACy2D,OADz2D,EACk3D,mBADl3D,EACu4D,cADv4D,EACu5D,MADv5D,EAC+5D,aAD/5D,EAC86D,OAD96D,EACu7D,SADv7D,EACk8D,SADl8D,EAC68D,MAD78D,EACq9D,aADr9D,EACo+D,QADp+D,EAC8+D,MAD9+D,EACs/D,eADt/D,EACugE,WADvgE,EACohE,aADphE,CAVP;AAad,oBAAgB,CACf,SADe,EACJ,iBADI,EACe,KADf,EACsB,aADtB,EACqC,gBADrC,EACuD,YADvD,EACqE,SADrE,EACgF,cADhF,EACgG,SADhG,EAC2G,UAD3G,EACuH,aADvH,EACsI,KADtI,EAC6I,GAD7I,EACkJ,GADlJ,EACuJ,aADvJ,EACsK,GADtK,EAC2K,KAD3K,EACkL,GADlL,EACuL,IADvL,EAC6L,QAD7L,EACuM,aADvM,EACsN,uBADtN,EAC+O,MAD/O,EACuP,GADvP,EAC4P,MAD5P,EACoQ,GADpQ,EACyQ,UADzQ,EACqR,QADrR,EAC+R,aAD/R,EAC8S,IAD9S,EACoT,OADpT,EAC6T,YAD7T,EAC2U,QAD3U,EACqV,OADrV,EAC8V,QAD9V,EACwW,OADxW,EACiX,OADjX,EAC0X,OAD1X,EACmY,SADnY,EAC8Y,QAD9Y,EACwZ,SADxZ,EACma,UADna,EAC+a,IAD/a,EACqb,gBADrb,EACuc,IADvc,EAC6c,KAD7c,EACod,SADpd,EAC+d,YAD/d,EAC6e,IAD7e,EACmf,IADnf,EACyf,KADzf,EACggB,OADhgB,EACygB,UADzgB,EACqhB,QADrhB,EAC+hB,IAD/hB,EACqiB,SADriB,EACgjB,SADhjB,EAC2jB,KAD3jB,EACkkB,QADlkB,EAC4kB,IAD5kB,EACklB,QADllB,EAC4lB,OAD5lB,EACqmB,MADrmB,EAC6mB,UAD7mB,EACynB,YADznB,EACuoB,SADvoB,EACkpB,UADlpB,EAC8pB,MAD9pB,EACsqB,WADtqB,EACmrB,aADnrB,EACksB,OADlsB,EAC2sB,KAD3sB,EACktB,gBADltB,EACouB,WADpuB,EACivB,wBADjvB,EAC2wB,YAD3wB,EACyxB,OADzxB,EACkyB,YADlyB,EACgzB,OADhzB,EACyzB,SADzzB,EACo0B,KADp0B,EAC20B,QAD30B,EACq1B,uBADr1B,EAC82B,KAD92B,EACq3B,MADr3B,EAC63B,I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","sourcesContent":["(function (Prism) {\n\n\tvar comment_inside = {\n\t\t'function': /\\b(?:TODOS?|FIX(?:MES?)?|NOTES?|BUGS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n\t};\n\tvar string_inside = {\n\t\t'number': /\\\\[^\\s']|%\\w/\n\t};\n\n\tvar factor = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\t// ! single-line exclamation point comments with whitespace after/around the !\n\t\t\t\tpattern: /(^|\\s)(?:! .*|!$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: comment_inside\n\t\t\t},\n\n\t\t\t/* from basis/multiline: */\n\t\t\t{\n\t\t\t\t// /* comment */, /* comment*/\n\t\t\t\tpattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: comment_inside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// ![[ comment ]] , ![===[ comment]===]\n\t\t\t\tpattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: comment_inside\n\t\t\t}\n\t\t],\n\n\t\t'number': [\n\t\t\t{\n\t\t\t\t// basic base 10 integers 9, -9\n\t\t\t\tpattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n\t\t\t\tpattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n\t\t\t\tpattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// positive mixed numbers 23+1/5 +23+1/5\n\t\t\t\tpattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// negative mixed numbers -23-1/5\n\t\t\t\tpattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n\t\t\t\t// and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n\t\t\t\tpattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// NAN literal syntax NAN: 80000deadbeef, NAN: a\n\t\t\t\tpattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\t\tbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n\t\t\t\t\t\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\n\t\t\t\t\tThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n\t\t\t\t\t<https://docs.factorcode.org/content/article-syntax-floats.html>\n\t\t\t\t*/\n\t\t\t\tpattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\n\t\t// R/ regexp?\\/\\\\/\n\t\t'regexp': {\n\t\t\tpattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'number',\n\t\t\tinside: {\n\t\t\t\t'variable': /\\\\\\S/,\n\t\t\t\t'keyword': /[+?*\\[\\]^$(){}.|]/,\n\t\t\t\t'operator': {\n\t\t\t\t\tpattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t'boolean': {\n\t\t\tpattern: /(^|\\s)[tf](?=\\s|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t// SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n\t\t'custom-string': {\n\t\t\tpattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'number': /\\\\\\S|%\\w|\\//\n\t\t\t}\n\t\t},\n\n\t\t'multiline-string': [\n\t\t\t{\n\t\t\t\t// STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n\t\t\t\tpattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'string',\n\t\t\t\tinside: {\n\t\t\t\t\t'number': string_inside.number,\n\t\t\t\t\t// trailing semicolon on its own line\n\t\t\t\t\t'semicolon-or-setlocal': {\n\t\t\t\t\t\tpattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: 'function'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t// HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n\t\t\t\tpattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'string',\n\t\t\t\tinside: string_inside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// [[ string ]], [==[ string]==]\n\t\t\t\tpattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'string',\n\t\t\t\tinside: string_inside\n\t\t\t}\n\t\t],\n\n\t\t'special-using': {\n\t\t\tpattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function',\n\t\t\tinside: {\n\t\t\t\t// this is essentially a regex for vocab names, which i don't want to specify\n\t\t\t\t// but the USING: gets picked up as a vocab name\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: /(\\s)[^:\\s]+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\n\t\t\ttrying to do better is more work and regex-computation-time than it's worth though.\n\t\t\t- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n\t\t\t- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n\t\t\t- we'd like if the following variable name conventions were recognised specifically:\n\t\t\t\tspecial row variables = ..a b..\n\t\t\t\ttype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\n\t\t\t\tword throws unconditional error = *\n\t\t\t\tany other word-like variable name = a ? q' etc\n\n\t\t\thttps://docs.factorcode.org/content/article-effects.html\n\n\t\t\tthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\n\t\t\tthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n\t\t*/\n\n\t\t// current solution is not great\n\t\t'stack-effect-delimiter': [\n\t\t\t{\n\t\t\t\t// opening parenthesis\n\t\t\t\tpattern: /(^|\\s)(?:call|execute|eval)?\\((?=\\s)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'operator'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// middle --\n\t\t\t\tpattern: /(\\s)--(?=\\s)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'operator'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// closing parenthesis\n\t\t\t\tpattern: /(\\s)\\)(?=\\s|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'operator'\n\t\t\t}\n\t\t],\n\n\t\t'combinators': {\n\t\t\tpattern: null,\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\n\t\t'kernel-builtin': {\n\t\t\tpattern: null,\n\t\t\tlookbehind: true,\n\t\t\talias: 'variable'\n\t\t},\n\n\t\t'sequences-builtin': {\n\t\t\tpattern: null,\n\t\t\tlookbehind: true,\n\t\t\talias: 'variable'\n\t\t},\n\n\t\t'math-builtin': {\n\t\t\tpattern: null,\n\t\t\tlookbehind: true,\n\t\t\talias: 'variable'\n\t\t},\n\n\t\t'constructor-word': {\n\t\t\t// <array> but not <=>\n\t\t\tpattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\n\t\t'other-builtin-syntax': {\n\t\t\tpattern: null,\n\t\t\tlookbehind: true,\n\t\t\talias: 'operator'\n\t\t},\n\n\t\t/*\n\t\t\tfull list of supported word naming conventions: (the convention appears outside of the [brackets])\n\t\t\t\tset-[x]\n\t\t\t\tchange-[x]\n\t\t\t\twith-[x]\n\t\t\t\tnew-[x]\n\t\t\t\t>[string]\n\t\t\t\t[base]>\n\t\t\t\t[string]>[number]\n\t\t\t\t+[symbol]+\n\t\t\t\t[boolean-word]?\n\t\t\t\t?[of]\n\t\t\t\t[slot-reader]>>\n\t\t\t\t>>[slot-setter]\n\t\t\t\t[slot-writer]<<\n\t\t\t\t([implementation-detail])\n\t\t\t\t[mutater]!\n\t\t\t\t[variant]*\n\t\t\t\t[prettyprint].\n\t\t\t\t$[help-markup]\n\n\t\t\t<constructors>, SYNTAX:, etc are supported by their own patterns.\n\n\t\t\t`with` and `new` from `kernel` are their own builtins.\n\n\t\t\tsee <https://docs.factorcode.org/content/article-conventions.html>\n\t\t*/\n\t\t'conventionally-named-word': {\n\t\t\tpattern: /(^|\\s)(?!\")(?:(?:set|change|with|new)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\n\t\t'colon-syntax': {\n\t\t\tpattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: 'function'\n\t\t},\n\n\t\t'semicolon-or-setlocal': {\n\t\t\tpattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function'\n\t\t},\n\n\t\t// do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n\t\t'curly-brace-literal-delimiter': [\n\t\t\t{\n\t\t\t\t// opening\n\t\t\t\tpattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'operator'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// closing\n\t\t\t\tpattern: /(\\s)\\}(?=\\s|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'operator'\n\t\t\t},\n\n\t\t],\n\n\t\t// do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n\t\t'quotation-delimiter': [\n\t\t\t{\n\t\t\t\t// opening\n\t\t\t\tpattern: /(^|\\s)\\[(?=\\s)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'operator'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// closing\n\t\t\t\tpattern: /(\\s)\\](?=\\s|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'operator'\n\t\t\t},\n\t\t],\n\n\t\t'normal-word': {\n\t\t\tpattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t/*\n\t\t\tbasic first-class string \"a\"\n\t\t\t\twith escaped double-quote \"a\\\"\"\n\t\t\t\tescaped backslash \"\\\\\"\n\t\t\t\tand general escapes since Factor has so many \"\\N\"\n\n\t\t\tsyntax that works in the reference implementation that isn't fully\n\t\t\tsupported because it's an implementation detail:\n\t\t\t\t\"string 1\"\"string 2\" -> 2 strings (works anyway)\n\t\t\t\t\"string\"5 -> string, 5\n\t\t\t\t\"string\"[ ] -> string, quotation\n\t\t\t\t{ \"a\"} -> array<string>\n\n\t\t\tthe rest of those examples all properly recognise the string, but not\n\t\t\t\tthe other object (number, quotation, etc)\n\t\t\tthis is fine for a regex-only implementation.\n\t\t*/\n\t\t'string': {\n\t\t\tpattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n\t\t\tgreedy: true,\n\t\t\tinside: string_inside\n\t\t}\n\t};\n\n\tvar escape = function (str) {\n\t\treturn (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1');\n\t};\n\n\tvar arrToWordsRegExp = function (arr) {\n\t\treturn new RegExp(\n\t\t\t'(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)'\n\t\t);\n\t};\n\n\tvar builtins = {\n\t\t'kernel-builtin': [\n\t\t\t'or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'\n\t\t],\n\t\t'other-builtin-syntax': [\n\t\t\t// syntax\n\t\t\t'=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable',\n\t\t\t// literals\n\t\t\t'$', '$[', '${'\n\t\t],\n\t\t'sequences-builtin': [\n\t\t\t'member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'\n\t\t],\n\t\t'math-builtin': [\n\t\t\t'number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'\n\t\t]\n\t\t// that's all for now\n\t};\n\n\tObject.keys(builtins).forEach(function (k) {\n\t\tfactor[k].pattern = arrToWordsRegExp(builtins[k]);\n\t});\n\n\tvar combinators = [\n\t\t// kernel\n\t\t'2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@',\n\t\t// sequences\n\t\t'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index',\n\t\t// math\n\t\t'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?',\n\t\t// math.combinators\n\t\t'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative',\n\t\t// combinators\n\t\t'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot',\n\t\t// combinators.short-circuit\n\t\t'2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&',\n\t\t// combinators.smart\n\t\t'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence',\n\t\t// tafn\n\t];\n\n\tfactor.combinators.pattern = arrToWordsRegExp(combinators);\n\n\tPrism.languages.factor = factor;\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}