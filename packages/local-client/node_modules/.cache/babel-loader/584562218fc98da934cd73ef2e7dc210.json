{"ast":null,"code":"Prism.languages.qore = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  // Overridden to allow unescaped multi-line strings\n  'string': {\n    pattern: /(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  },\n  'keyword': /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n  'boolean': /\\b(?:true|false)\\b/i,\n  'function': /\\$?\\b(?!\\d)\\w+(?=\\()/,\n  'number': /\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i,\n  'operator': {\n    pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n    lookbehind: true\n  },\n  'variable': /\\$(?!\\d)\\w+\\b/\n});","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-qore.js"],"names":["Prism","languages","qore","extend","pattern","lookbehind","greedy"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,OAAvB,EAAgC;AACtD,aAAW;AACVC,IAAAA,OAAO,EAAE,4CADC;AAEVC,IAAAA,UAAU,EAAE;AAFF,GAD2C;AAKtD;AACA,YAAU;AACTD,IAAAA,OAAO,EAAE,kCADA;AAETE,IAAAA,MAAM,EAAE;AAFC,GAN4C;AAUtD,aAAW,sdAV2C;AAWtD,aAAW,qBAX2C;AAYtD,cAAY,sBAZ0C;AAatD,YAAU,4GAb4C;AActD,cAAY;AACXF,IAAAA,OAAO,EAAE,6FADE;AAEXC,IAAAA,UAAU,EAAE;AAFD,GAd0C;AAkBtD,cAAY;AAlB0C,CAAhC,CAAvB","sourcesContent":["Prism.languages.qore = Prism.languages.extend('clike', {\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n\t\tlookbehind: true\n\t},\n\t// Overridden to allow unescaped multi-line strings\n\t'string': {\n\t\tpattern: /(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n\t\tgreedy: true\n\t},\n\t'keyword': /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/i,\n\t'function': /\\$?\\b(?!\\d)\\w+(?=\\()/,\n\t'number': /\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i,\n\t'operator': {\n\t\tpattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n\t\tlookbehind: true\n\t},\n\t'variable': /\\$(?!\\d)\\w+\\b/\n});\n"]},"metadata":{},"sourceType":"script"}