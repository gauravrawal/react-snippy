{"ast":null,"code":"(function (Prism) {\n  var keywords = [/\\b(?:async|sync|yield)\\*/, /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/]; // Handles named imports, such as http.Client\n\n  var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the dart naming conventions\n\n  var className = {\n    pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n    lookbehind: true,\n    inside: {\n      'namespace': {\n        pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n        inside: {\n          'punctuation': /\\./\n        }\n      }\n    }\n  };\n  Prism.languages.dart = Prism.languages.extend('clike', {\n    'string': [{\n      pattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,\n      greedy: true\n    }, {\n      pattern: /r?([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    }],\n    'class-name': [className, {\n      // variables and parameters\n      // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n      pattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n      lookbehind: true,\n      inside: className.inside\n    }],\n    'keyword': keywords,\n    'operator': /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n  });\n  Prism.languages.insertBefore('dart', 'function', {\n    'metadata': {\n      pattern: /@\\w+/,\n      alias: 'symbol'\n    }\n  });\n  Prism.languages.insertBefore('dart', 'class-name', {\n    'generics': {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    }\n  });\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-dart.js"],"names":["Prism","keywords","packagePrefix","source","className","pattern","RegExp","lookbehind","inside","languages","dart","extend","greedy","insertBefore","alias"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AACjB,MAAIC,QAAQ,GAAG,CACd,0BADc,EAEd,4WAFc,CAAf,CADiB,CAMjB;;AACA,MAAIC,aAAa,GAAG,uDAAuDC,MAA3E,CAPiB,CASjB;;AACA,MAAIC,SAAS,GAAG;AACfC,IAAAA,OAAO,EAAEC,MAAM,CAACJ,aAAa,GAAG,gCAAgCC,MAAjD,CADA;AAEfI,IAAAA,UAAU,EAAE,IAFG;AAGfC,IAAAA,MAAM,EAAE;AACP,mBAAa;AACZH,QAAAA,OAAO,EAAE,0CADG;AAEZG,QAAAA,MAAM,EAAE;AACP,yBAAe;AADR;AAFI;AADN;AAHO,GAAhB;AAaAR,EAAAA,KAAK,CAACS,SAAN,CAAgBC,IAAhB,GAAuBV,KAAK,CAACS,SAAN,CAAgBE,MAAhB,CAAuB,OAAvB,EAAgC;AACtD,cAAU,CACT;AACCN,MAAAA,OAAO,EAAE,uBADV;AAECO,MAAAA,MAAM,EAAE;AAFT,KADS,EAKT;AACCP,MAAAA,OAAO,EAAE,oCADV;AAECO,MAAAA,MAAM,EAAE;AAFT,KALS,CAD4C;AAWtD,kBAAc,CACbR,SADa,EAEb;AACC;AACA;AACAC,MAAAA,OAAO,EAAEC,MAAM,CAACJ,aAAa,GAAG,+BAA+BC,MAAhD,CAHhB;AAICI,MAAAA,UAAU,EAAE,IAJb;AAKCC,MAAAA,MAAM,EAAEJ,SAAS,CAACI;AALnB,KAFa,CAXwC;AAqBtD,eAAWP,QArB2C;AAsBtD,gBAAY;AAtB0C,GAAhC,CAAvB;AAyBAD,EAAAA,KAAK,CAACS,SAAN,CAAgBI,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAChD,gBAAY;AACXR,MAAAA,OAAO,EAAE,MADE;AAEXS,MAAAA,KAAK,EAAE;AAFI;AADoC,GAAjD;AAOAd,EAAAA,KAAK,CAACS,SAAN,CAAgBI,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AAClD,gBAAY;AACXR,MAAAA,OAAO,EAAE,qEADE;AAEXG,MAAAA,MAAM,EAAE;AACP,sBAAcJ,SADP;AAEP,mBAAWH,QAFJ;AAGP,uBAAe,WAHR;AAIP,oBAAY;AAJL;AAFG;AADsC,GAAnD;AAWA,CAlEA,EAkECD,KAlED,CAAD","sourcesContent":["(function (Prism) {\n\tvar keywords = [\n\t\t/\\b(?:async|sync|yield)\\*/,\n\t\t/\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/\n\t];\n\n\t// Handles named imports, such as http.Client\n\tvar packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n\t// based on the dart naming conventions\n\tvar className = {\n\t\tpattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'namespace': {\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t};\n\n\tPrism.languages.dart = Prism.languages.extend('clike', {\n\t\t'string': [\n\t\t\t{\n\t\t\t\tpattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /r?([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'class-name': [\n\t\t\tclassName,\n\t\t\t{\n\t\t\t\t// variables and parameters\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t'operator': /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n\t});\n\n\tPrism.languages.insertBefore('dart', 'function', {\n\t\t'metadata': {\n\t\t\tpattern: /@\\w+/,\n\t\t\talias: 'symbol'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('dart', 'class-name', {\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t},\n\t});\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}