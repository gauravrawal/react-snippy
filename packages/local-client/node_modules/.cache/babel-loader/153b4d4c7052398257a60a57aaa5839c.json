{"ast":null,"code":"!function (r) {\n  r.languages.xquery = r.languages.extend(\"markup\", {\n    \"xquery-comment\": {\n      pattern: /\\(:[\\s\\S]*?:\\)/,\n      greedy: !0,\n      alias: \"comment\"\n    },\n    string: {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n      greedy: !0\n    },\n    extension: {\n      pattern: /\\(#.+?#\\)/,\n      alias: \"symbol\"\n    },\n    variable: /\\$[-\\w:]+/,\n    axis: {\n      pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    },\n    \"keyword-operator\": {\n      pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n      lookbehind: !0,\n      alias: \"operator\"\n    },\n    keyword: {\n      pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n      lookbehind: !0\n    },\n    function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n    \"xquery-element\": {\n      pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: !0,\n      alias: \"tag\"\n    },\n    \"xquery-attribute\": {\n      pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: !0,\n      alias: \"attr-name\"\n    },\n    builtin: {\n      pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n      lookbehind: !0\n    },\n    number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n    operator: [/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: !0\n    }],\n    punctuation: /[[\\](){},;:/]/\n  }), r.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i, r.languages.xquery.tag.inside[\"attr-value\"].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i, r.languages.xquery.tag.inside[\"attr-value\"].inside.punctuation = /^=\"|\"$/, r.languages.xquery.tag.inside[\"attr-value\"].inside.expression = {\n    pattern: /\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}/,\n    inside: r.languages.xquery,\n    alias: \"language-xquery\"\n  };\n\n  var s = function (e) {\n    return \"string\" == typeof e ? e : \"string\" == typeof e.content ? e.content : e.content.map(s).join(\"\");\n  },\n      l = function (e) {\n    for (var t = [], n = 0; n < e.length; n++) {\n      var a = e[n],\n          o = !1;\n\n      if (\"string\" != typeof a && (\"tag\" === a.type && a.content[0] && \"tag\" === a.content[0].type ? \"</\" === a.content[0].content[0].content ? 0 < t.length && t[t.length - 1].tagName === s(a.content[0].content[1]) && t.pop() : \"/>\" === a.content[a.content.length - 1].content || t.push({\n        tagName: s(a.content[0].content[1]),\n        openedBraces: 0\n      }) : !(0 < t.length && \"punctuation\" === a.type && \"{\" === a.content) || e[n + 1] && \"punctuation\" === e[n + 1].type && \"{\" === e[n + 1].content || e[n - 1] && \"plain-text\" === e[n - 1].type && \"{\" === e[n - 1].content ? 0 < t.length && 0 < t[t.length - 1].openedBraces && \"punctuation\" === a.type && \"}\" === a.content ? t[t.length - 1].openedBraces-- : \"comment\" !== a.type && (o = !0) : t[t.length - 1].openedBraces++), (o || \"string\" == typeof a) && 0 < t.length && 0 === t[t.length - 1].openedBraces) {\n        var i = s(a);\n        n < e.length - 1 && (\"string\" == typeof e[n + 1] || \"plain-text\" === e[n + 1].type) && (i += s(e[n + 1]), e.splice(n + 1, 1)), 0 < n && (\"string\" == typeof e[n - 1] || \"plain-text\" === e[n - 1].type) && (i = s(e[n - 1]) + i, e.splice(n - 1, 1), n--), /^\\s+$/.test(i) ? e[n] = i : e[n] = new r.Token(\"plain-text\", i, null, i);\n      }\n\n      a.content && \"string\" != typeof a.content && l(a.content);\n    }\n  };\n\n  r.hooks.add(\"after-tokenize\", function (e) {\n    \"xquery\" === e.language && l(e.tokens);\n  });\n}(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-xquery.min.js"],"names":["r","languages","xquery","extend","pattern","greedy","alias","string","extension","variable","axis","lookbehind","keyword","function","builtin","number","operator","punctuation","tag","inside","expression","s","e","content","map","join","l","t","n","length","a","o","type","tagName","pop","push","openedBraces","i","splice","test","Token","hooks","add","language","tokens","Prism"],"mappings":"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","sourcesContent":["!function(r){r.languages.xquery=r.languages.extend(\"markup\",{\"xquery-comment\":{pattern:/\\(:[\\s\\S]*?:\\)/,greedy:!0,alias:\"comment\"},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,greedy:!0},extension:{pattern:/\\(#.+?#\\)/,alias:\"symbol\"},variable:/\\$[-\\w:]+/,axis:{pattern:/(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,lookbehind:!0,alias:\"operator\"},\"keyword-operator\":{pattern:/(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,lookbehind:!0,alias:\"operator\"},keyword:{pattern:/(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,lookbehind:!0},function:/[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\"xquery-element\":{pattern:/(element\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:!0,alias:\"tag\"},\"xquery-attribute\":{pattern:/(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:!0,alias:\"attr-name\"},builtin:{pattern:/(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,lookbehind:!0},number:/\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,operator:[/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,{pattern:/(\\s)-(?=\\s)/,lookbehind:!0}],punctuation:/[[\\](){},;:/]/}),r.languages.xquery.tag.pattern=/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,r.languages.xquery.tag.inside[\"attr-value\"].pattern=/=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,r.languages.xquery.tag.inside[\"attr-value\"].inside.punctuation=/^=\"|\"$/,r.languages.xquery.tag.inside[\"attr-value\"].inside.expression={pattern:/\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}/,inside:r.languages.xquery,alias:\"language-xquery\"};var s=function(e){return\"string\"==typeof e?e:\"string\"==typeof e.content?e.content:e.content.map(s).join(\"\")},l=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n],o=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<t.length&&t[t.length-1].tagName===s(a.content[0].content[1])&&t.pop():\"/>\"===a.content[a.content.length-1].content||t.push({tagName:s(a.content[0].content[1]),openedBraces:0}):!(0<t.length&&\"punctuation\"===a.type&&\"{\"===a.content)||e[n+1]&&\"punctuation\"===e[n+1].type&&\"{\"===e[n+1].content||e[n-1]&&\"plain-text\"===e[n-1].type&&\"{\"===e[n-1].content?0<t.length&&0<t[t.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?t[t.length-1].openedBraces--:\"comment\"!==a.type&&(o=!0):t[t.length-1].openedBraces++),(o||\"string\"==typeof a)&&0<t.length&&0===t[t.length-1].openedBraces){var i=s(a);n<e.length-1&&(\"string\"==typeof e[n+1]||\"plain-text\"===e[n+1].type)&&(i+=s(e[n+1]),e.splice(n+1,1)),0<n&&(\"string\"==typeof e[n-1]||\"plain-text\"===e[n-1].type)&&(i=s(e[n-1])+i,e.splice(n-1,1),n--),/^\\s+$/.test(i)?e[n]=i:e[n]=new r.Token(\"plain-text\",i,null,i)}a.content&&\"string\"!=typeof a.content&&l(a.content)}};r.hooks.add(\"after-tokenize\",function(e){\"xquery\"===e.language&&l(e.tokens)})}(Prism);"]},"metadata":{},"sourceType":"script"}