{"ast":null,"code":"(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  // eslint-disable-next-line regexp/no-dupe-characters-character-class\n  /\\b(?:asserts|infer|interface|module|namespace|type)(?!\\s*[^\\s_${}*a-zA-Z\\xA0-\\uFFFF])/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-typescript.js"],"names":["Prism","languages","typescript","extend","pattern","lookbehind","greedy","inside","keyword","push","typeInside","insertBefore","alias","ts"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AAEjBA,EAAAA,KAAK,CAACC,SAAN,CAAgBC,UAAhB,GAA6BF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB,EAAqC;AACjE,kBAAc;AACbC,MAAAA,OAAO,EAAE,8KADI;AAEbC,MAAAA,UAAU,EAAE,IAFC;AAGbC,MAAAA,MAAM,EAAE,IAHK;AAIbC,MAAAA,MAAM,EAAE,IAJK,CAIA;;AAJA,KADmD;AAOjE,eAAW;AAPsD,GAArC,CAA7B,CAFiB,CAYjB;;AACAP,EAAAA,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2BM,OAA3B,CAAmCC,IAAnC,CACC,kEADD,EAEC;AACA;AACA,yFAJD,EAbiB,CAoBjB;;AACA,SAAOT,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2B,WAA3B,CAAP,CArBiB,CAuBjB;;AACA,MAAIQ,UAAU,GAAGV,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB,EAAqC,EAArC,CAAjB;AACA,SAAOO,UAAU,CAAC,YAAD,CAAjB;AAEAV,EAAAA,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2B,YAA3B,EAAyCK,MAAzC,GAAkDG,UAAlD;AAEAV,EAAAA,KAAK,CAACC,SAAN,CAAgBU,YAAhB,CAA6B,YAA7B,EAA2C,UAA3C,EAAuD;AACtD,iBAAa;AACZP,MAAAA,OAAO,EAAE,oBADG;AAEZG,MAAAA,MAAM,EAAE;AACP,cAAM;AACLH,UAAAA,OAAO,EAAE,IADJ;AAELQ,UAAAA,KAAK,EAAE;AAFF,SADC;AAKP,oBAAY;AALL;AAFI,KADyC;AAWtD,wBAAoB;AACnB;AACAR,MAAAA,OAAO,EAAE,wGAFU;AAGnBE,MAAAA,MAAM,EAAE,IAHW;AAInBC,MAAAA,MAAM,EAAE;AACP,oBAAY,2DADL;AAEP,mBAAW;AACVH,UAAAA,OAAO,EAAE,UADC;AACW;AACrBQ,UAAAA,KAAK,EAAE,YAFG;AAGVL,UAAAA,MAAM,EAAEG;AAHE;AAFJ;AAJW;AAXkC,GAAvD;AA0BAV,EAAAA,KAAK,CAACC,SAAN,CAAgBY,EAAhB,GAAqBb,KAAK,CAACC,SAAN,CAAgBC,UAArC;AAEA,CAzDA,EAyDCF,KAzDD,CAAD","sourcesContent":["(function (Prism) {\n\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: null // see below\n\t\t},\n\t\t'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/,\n\t});\n\n\t// The keywords TypeScript adds to JavaScript\n\tPrism.languages.typescript.keyword.push(\n\t\t/\\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\\b/,\n\t\t// keywords that have to be followed by an identifier\n\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t/\\b(?:asserts|infer|interface|module|namespace|type)(?!\\s*[^\\s_${}*a-zA-Z\\xA0-\\uFFFF])/\n\t);\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.typescript['parameter'];\n\n\t// a version of typescript specifically for highlighting types\n\tvar typeInside = Prism.languages.extend('typescript', {});\n\tdelete typeInside['class-name'];\n\n\tPrism.languages.typescript['class-name'].inside = typeInside;\n\n\tPrism.languages.insertBefore('typescript', 'function', {\n\t\t'decorator': {\n\t\t\tpattern: /@[$\\w\\xA0-\\uFFFF]+/,\n\t\t\tinside: {\n\t\t\t\t'at': {\n\t\t\t\t\tpattern: /^@/,\n\t\t\t\t\talias: 'operator'\n\t\t\t\t},\n\t\t\t\t'function': /^[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t'generic-function': {\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\n\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.ts = Prism.languages.typescript;\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}