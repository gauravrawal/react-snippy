{"ast":null,"code":"exports.enter = {\n  table: enterTable,\n  tableData: enterCell,\n  tableHeader: enterCell,\n  tableRow: enterRow\n};\nexports.exit = {\n  codeText: exitCodeText,\n  table: exitTable,\n  tableData: exit,\n  tableHeader: exit,\n  tableRow: exit\n};\n\nfunction enterTable(token) {\n  this.enter({\n    type: 'table',\n    align: token._align,\n    children: []\n  }, token);\n  this.setData('inTable', true);\n}\n\nfunction exitTable(token) {\n  this.exit(token);\n  this.setData('inTable');\n}\n\nfunction enterRow(token) {\n  this.enter({\n    type: 'tableRow',\n    children: []\n  }, token);\n}\n\nfunction exit(token) {\n  this.exit(token);\n}\n\nfunction enterCell(token) {\n  this.enter({\n    type: 'tableCell',\n    children: []\n  }, token);\n} // Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n\n\nfunction exitCodeText(token) {\n  var value = this.resume();\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace);\n  }\n\n  this.stack[this.stack.length - 1].value = value;\n  this.exit(token);\n}\n\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/mdast-util-gfm-table/from-markdown.js"],"names":["exports","enter","table","enterTable","tableData","enterCell","tableHeader","tableRow","enterRow","exit","codeText","exitCodeText","exitTable","token","type","align","_align","children","setData","value","resume","getData","replace","stack","length","$0","$1"],"mappings":"AAAAA,OAAO,CAACC,KAAR,GAAgB;AACdC,EAAAA,KAAK,EAAEC,UADO;AAEdC,EAAAA,SAAS,EAAEC,SAFG;AAGdC,EAAAA,WAAW,EAAED,SAHC;AAIdE,EAAAA,QAAQ,EAAEC;AAJI,CAAhB;AAMAR,OAAO,CAACS,IAAR,GAAe;AACbC,EAAAA,QAAQ,EAAEC,YADG;AAEbT,EAAAA,KAAK,EAAEU,SAFM;AAGbR,EAAAA,SAAS,EAAEK,IAHE;AAIbH,EAAAA,WAAW,EAAEG,IAJA;AAKbF,EAAAA,QAAQ,EAAEE;AALG,CAAf;;AAQA,SAASN,UAAT,CAAoBU,KAApB,EAA2B;AACzB,OAAKZ,KAAL,CAAW;AAACa,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAEF,KAAK,CAACG,MAA7B;AAAqCC,IAAAA,QAAQ,EAAE;AAA/C,GAAX,EAA+DJ,KAA/D;AACA,OAAKK,OAAL,CAAa,SAAb,EAAwB,IAAxB;AACD;;AAED,SAASN,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,OAAKJ,IAAL,CAAUI,KAAV;AACA,OAAKK,OAAL,CAAa,SAAb;AACD;;AAED,SAASV,QAAT,CAAkBK,KAAlB,EAAyB;AACvB,OAAKZ,KAAL,CAAW;AAACa,IAAAA,IAAI,EAAE,UAAP;AAAmBG,IAAAA,QAAQ,EAAE;AAA7B,GAAX,EAA6CJ,KAA7C;AACD;;AAED,SAASJ,IAAT,CAAcI,KAAd,EAAqB;AACnB,OAAKJ,IAAL,CAAUI,KAAV;AACD;;AAED,SAASR,SAAT,CAAmBQ,KAAnB,EAA0B;AACxB,OAAKZ,KAAL,CAAW;AAACa,IAAAA,IAAI,EAAE,WAAP;AAAoBG,IAAAA,QAAQ,EAAE;AAA9B,GAAX,EAA8CJ,KAA9C;AACD,C,CAED;AACA;;;AACA,SAASF,YAAT,CAAsBE,KAAtB,EAA6B;AAC3B,MAAIM,KAAK,GAAG,KAAKC,MAAL,EAAZ;;AAEA,MAAI,KAAKC,OAAL,CAAa,SAAb,CAAJ,EAA6B;AAC3BF,IAAAA,KAAK,GAAGA,KAAK,CAACG,OAAN,CAAc,YAAd,EAA4BA,OAA5B,CAAR;AACD;;AAED,OAAKC,KAAL,CAAW,KAAKA,KAAL,CAAWC,MAAX,GAAoB,CAA/B,EAAkCL,KAAlC,GAA0CA,KAA1C;AACA,OAAKV,IAAL,CAAUI,KAAV;AACD;;AAED,SAASS,OAAT,CAAiBG,EAAjB,EAAqBC,EAArB,EAAyB;AACvB;AACA,SAAOA,EAAE,KAAK,GAAP,GAAaA,EAAb,GAAkBD,EAAzB;AACD","sourcesContent":["exports.enter = {\n  table: enterTable,\n  tableData: enterCell,\n  tableHeader: enterCell,\n  tableRow: enterRow\n}\nexports.exit = {\n  codeText: exitCodeText,\n  table: exitTable,\n  tableData: exit,\n  tableHeader: exit,\n  tableRow: exit\n}\n\nfunction enterTable(token) {\n  this.enter({type: 'table', align: token._align, children: []}, token)\n  this.setData('inTable', true)\n}\n\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\nfunction exit(token) {\n  this.exit(token)\n}\n\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\nfunction exitCodeText(token) {\n  var value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  this.stack[this.stack.length - 1].value = value\n  this.exit(token)\n}\n\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n"]},"metadata":{},"sourceType":"script"}