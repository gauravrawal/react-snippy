{"ast":null,"code":"Prism.languages.elm = {\n  'comment': /--.*|\\{-[\\s\\S]*?-\\}/,\n  'char': {\n    pattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,\n    greedy: true\n  },\n  'string': [{\n    // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n    greedy: true\n  }, {\n    pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n    greedy: true\n  }],\n  'import-statement': {\n    // The imported or hidden names are not included in this import\n    // statement. This is because we want to highlight those exactly like\n    // we do for the names in the program.\n    pattern: /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n    lookbehind: true,\n    inside: {\n      'keyword': /\\b(?:import|as|exposing)\\b/\n    }\n  },\n  'keyword': /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n  // These are builtin variables only. Constructors are highlighted later as a constant.\n  'builtin': /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n  // decimal integers and floating point numbers | hexadecimal integers\n  'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n  // Most of this is needed because of the meaning of a single '.'.\n  // If it stands alone freely, it is the function composition.\n  // It may also be a separator between a module name and an identifier => no\n  // operator. If it comes together with other special characters it is an\n  // operator too.\n  // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n  // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n  'operator': /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n  // In Elm, nearly everything is a variable, do not highlight these.\n  'hvariable': /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n  'constant': /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n  'punctuation': /[{}[\\]|(),.:]/\n};","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-elm.js"],"names":["Prism","languages","elm","pattern","greedy","lookbehind","inside"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,GAAsB;AACrB,aAAW,qBADU;AAErB,UAAQ;AACPC,IAAAA,OAAO,EAAE,uDADF;AAEPC,IAAAA,MAAM,EAAE;AAFD,GAFa;AAMrB,YAAU,CACT;AACC;AACAD,IAAAA,OAAO,EAAE,gBAFV;AAGCC,IAAAA,MAAM,EAAE;AAHT,GADS,EAMT;AACCD,IAAAA,OAAO,EAAE,uBADV;AAECC,IAAAA,MAAM,EAAE;AAFT,GANS,CANW;AAiBrB,sBAAoB;AACnB;AACA;AACA;AACAD,IAAAA,OAAO,EAAE,uGAJU;AAKnBE,IAAAA,UAAU,EAAE,IALO;AAMnBC,IAAAA,MAAM,EAAE;AACP,iBAAW;AADJ;AANW,GAjBC;AA2BrB,aAAW,iFA3BU;AA4BrB;AACA,aAAW,yPA7BU;AA8BrB;AACA,YAAU,kDA/BW;AAgCrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAY,yDAvCS;AAwCrB;AACA,eAAa,6BAzCQ;AA0CrB,cAAY,6BA1CS;AA2CrB,iBAAe;AA3CM,CAAtB","sourcesContent":["Prism.languages.elm = {\n\t'comment': /--.*|\\{-[\\s\\S]*?-\\}/,\n\t'char': {\n\t\tpattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,\n\t\tgreedy: true\n\t},\n\t'string': [\n\t\t{\n\t\t\t// Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'import-statement': {\n\t\t// The imported or hidden names are not included in this import\n\t\t// statement. This is because we want to highlight those exactly like\n\t\t// we do for the names in the program.\n\t\tpattern: /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'keyword': /\\b(?:import|as|exposing)\\b/\n\t\t}\n\t},\n\t'keyword': /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n\t// These are builtin variables only. Constructors are highlighted later as a constant.\n\t'builtin': /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n\t// decimal integers and floating point numbers | hexadecimal integers\n\t'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n\t// Most of this is needed because of the meaning of a single '.'.\n\t// If it stands alone freely, it is the function composition.\n\t// It may also be a separator between a module name and an identifier => no\n\t// operator. If it comes together with other special characters it is an\n\t// operator too.\n\t// Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n\t// Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n\t'operator': /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n\t// In Elm, nearly everything is a variable, do not highlight these.\n\t'hvariable': /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n\t'constant': /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n\t'punctuation': /[{}[\\]|(),.:]/\n};\n"]},"metadata":{},"sourceType":"script"}