{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport TextArea from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator } from './commands';\nimport \"./index.css\";\n\nfunction setGroupPopFalse(data) {\n  Object.keys(data).forEach(function (keyname) {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nvar InternalMDEditor = function InternalMDEditor(props, ref) {\n  var _classnames;\n\n  var _ref = props || {},\n      _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? 'w-md-editor' : _ref$prefixCls,\n      className = _ref.className,\n      propsValue = _ref.value,\n      _ref$commands = _ref.commands,\n      commands = _ref$commands === void 0 ? getCommands() : _ref$commands,\n      _ref$height = _ref.height,\n      heightWarp = _ref$height === void 0 ? 200 : _ref$height,\n      _ref$visiableDragbar = _ref.visiableDragbar,\n      visiableDragbar = _ref$visiableDragbar === void 0 ? true : _ref$visiableDragbar,\n      _ref$preview = _ref.preview,\n      previewType = _ref$preview === void 0 ? 'live' : _ref$preview,\n      isfullscreen = _ref.fullscreen,\n      previewOptions = _ref.previewOptions,\n      textareaProps = _ref.textareaProps,\n      _ref$maxHeight = _ref.maxHeight,\n      maxHeight = _ref$maxHeight === void 0 ? 1200 : _ref$maxHeight,\n      _ref$minHeight = _ref.minHeight,\n      minHeight = _ref$minHeight === void 0 ? 100 : _ref$minHeight,\n      autoFocus = _ref.autoFocus,\n      _ref$tabSize = _ref.tabSize,\n      tabSize = _ref$tabSize === void 0 ? 2 : _ref$tabSize,\n      onChange = _ref.onChange,\n      hideToolbar = _ref.hideToolbar,\n      other = _objectWithoutProperties(_ref, [\"prefixCls\", \"className\", \"value\", \"commands\", \"height\", \"visiableDragbar\", \"preview\", \"fullscreen\", \"previewOptions\", \"textareaProps\", \"maxHeight\", \"minHeight\", \"autoFocus\", \"tabSize\", \"onChange\", \"hideToolbar\"]);\n\n  var _useState = useState(propsValue || ''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(previewType),\n      _useState4 = _slicedToArray(_useState3, 2),\n      preview = _useState4[0],\n      setPreview = _useState4[1];\n\n  var _useState5 = useState(isfullscreen || false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFullscreen = _useState6[0],\n      setIsFullscreen = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      groupPop = _useState8[0],\n      setGroupPop = _useState8[1];\n\n  var leftScroll = useRef(false);\n  var previewRef = /*#__PURE__*/React.createRef();\n\n  var _useState9 = useState(heightWarp),\n      _useState10 = _slicedToArray(_useState9, 2),\n      height = _useState10[0],\n      setHeight = _useState10[1];\n\n  var textarea = /*#__PURE__*/React.createRef();\n  var commandOrchestrator = useRef();\n  var cls = classnames(className, prefixCls, (_classnames = {}, _defineProperty(_classnames, \"\".concat(prefixCls, \"-show-\").concat(preview), preview), _defineProperty(_classnames, \"\".concat(prefixCls, \"-fullscreen\"), isFullscreen), _classnames));\n  useEffect(function () {\n    commandOrchestrator.current = new TextAreaCommandOrchestrator(textarea.current.text.current || null);\n  }, []);\n  useMemo(function () {\n    return preview !== props.preview && props.preview && setPreview(props.preview);\n  }, [props.preview]);\n  useMemo(function () {\n    return value !== props.value && setValue(props.value);\n  }, [props.value]);\n  useMemo(function () {\n    return height !== props.height && setHeight(heightWarp);\n  }, [heightWarp]);\n\n  function handleChange(mdStr) {\n    setValue(mdStr);\n    onChange && onChange(mdStr || '');\n  }\n\n  function handleCommand(command, groupName) {\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value);\n    }\n\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n\n    if (command.keyCommand === 'group') {\n      setGroupPop(_objectSpread(_objectSpread({}, setGroupPopFalse(groupPop)), {}, _defineProperty({}, \"\".concat(groupName), true)));\n    }\n\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop(_objectSpread(_objectSpread({}, groupPop), {}, _defineProperty({}, \"\".concat(groupName), false)));\n    }\n\n    commandOrchestrator.current.executeCommand(command);\n  }\n\n  function handleScroll(e) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n\n    var previewDom = previewRef.current.mdp.current;\n    var textareaDom = textarea.current.warp.current;\n\n    if (textareaDom && previewDom) {\n      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n\n  var chestratorObj = useMemo(function () {\n    return commandOrchestrator.current;\n  }, [commandOrchestrator.current]);\n\n  var mdProps = _objectSpread(_objectSpread({}, previewOptions), {}, {\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value\n  });\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: cls,\n    onClick: function onClick() {\n      return setGroupPop(_objectSpread({}, setGroupPopFalse(groupPop)));\n    },\n    style: {\n      height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height\n    }\n  }, other), !hideToolbar && /*#__PURE__*/React.createElement(Toolbar, {\n    active: _objectSpread({\n      fullscreen: isFullscreen,\n      preview: preview\n    }, groupPop),\n    prefixCls: prefixCls,\n    commands: commands,\n    commandHelp: _objectSpread({\n      getState: commandOrchestrator.current && commandOrchestrator.current.getState,\n      textApi: commandOrchestrator.current && commandOrchestrator.current.textApi\n    }, chestratorObj),\n    onCommand: handleCommand\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-content\"),\n    style: {\n      height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29\n    }\n  }, /(edit|live)/.test(preview) && /*#__PURE__*/React.createElement(TextArea, _extends({\n    ref: textarea,\n    tabSize: tabSize,\n    className: \"\".concat(prefixCls, \"-input\"),\n    prefixCls: prefixCls,\n    value: value,\n    autoFocus: autoFocus\n  }, textareaProps, {\n    onScroll: handleScroll,\n    onMouseOver: function onMouseOver() {\n      return leftScroll.current = true;\n    },\n    onMouseLeave: function onMouseLeave() {\n      return leftScroll.current = false;\n    },\n    onChange: handleChange\n  })), /(live|preview)/.test(preview) && /*#__PURE__*/React.createElement(MarkdownPreview, _extends({}, mdProps, {\n    className: \"\".concat(prefixCls, \"-preview\")\n  })), visiableDragbar && !isFullscreen && /*#__PURE__*/React.createElement(DragBar, {\n    prefixCls: prefixCls,\n    height: height,\n    maxHeight: maxHeight,\n    minHeight: minHeight,\n    onChange: function onChange(newHeight) {\n      setHeight(newHeight);\n    }\n  })));\n};\n\nvar MDEditor = /*#__PURE__*/React.forwardRef(InternalMDEditor);\nMDEditor.Markdown = MarkdownPreview;\nexport default MDEditor;","map":{"version":3,"sources":["../../src/Editor.tsx"],"names":["Object","data","InternalMDEditor","prefixCls","className","propsValue","commands","getCommands","heightWarp","visiableDragbar","previewType","isfullscreen","previewOptions","textareaProps","maxHeight","minHeight","autoFocus","tabSize","onChange","hideToolbar","other","props","value","setValue","useState","preview","setPreview","isFullscreen","setIsFullscreen","groupPop","setGroupPop","leftScroll","useRef","previewRef","React","height","setHeight","textarea","commandOrchestrator","cls","classnames","useEffect","useMemo","mdStr","command","document","setGroupPopFalse","groupName","previewDom","textareaDom","scale","e","chestratorObj","mdProps","ref","onScroll","source","Number","fullscreen","getState","textApi","handleCommand","handleChange","MDEditor"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview, { MarkdownPreviewProps, MarkdownPreviewRef } from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator, ICommand } from './commands';\nimport './index.less';\n\nexport type PreviewType = 'live' | 'edit' | 'preview';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: React.CSSProperties['height'];\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean>) {\n  Object.keys(data).forEach(keyname => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (props: MDEditorProps, \n  ref?:\n    | ((instance: HTMLDivElement) => void)\n    | React.RefObject<HTMLDivElement | null>\n    | null\n  ) => {\n  const { prefixCls = 'w-md-editor', className, value: propsValue, commands = getCommands(), height: heightWarp = 200, visiableDragbar = true, preview: previewType = 'live', fullscreen: isfullscreen, previewOptions, textareaProps, maxHeight = 1200, minHeight = 100, autoFocus, tabSize = 2, onChange, hideToolbar, ...other } = props || {};\n  const [value, setValue] = useState<string>(propsValue || '')\n  const [preview, setPreview] = useState<PreviewType>(previewType);\n  const [isFullscreen, setIsFullscreen] = useState(isfullscreen || false);\n  const [groupPop, setGroupPop] = useState<Record<string, boolean>>({});\n  \n  const leftScroll = useRef(false);\n  const previewRef = React.createRef<MarkdownPreviewRef>()\n\n  const [height, setHeight] = useState(heightWarp);\n  const textarea = React.createRef<TextArea>();\n  const commandOrchestrator = useRef<TextAreaCommandOrchestrator>()\n\n  const cls = classnames(className, prefixCls, {\n    [`${prefixCls}-show-${preview}`]: preview,\n    [`${prefixCls}-fullscreen`]: isFullscreen,\n  });\n  useEffect(() => {\n    commandOrchestrator.current = new TextAreaCommandOrchestrator((textarea.current!.text.current || null) as HTMLTextAreaElement);\n  }, []);\n\n  useMemo(() => preview !== props.preview && props.preview && setPreview(props.preview!), [props.preview]);\n  useMemo(() => value !== props.value && setValue(props.value!), [props.value]);\n  useMemo(() => height !== props.height && setHeight(heightWarp!), [heightWarp]);\n\n  function handleChange(mdStr?: string) {\n    setValue(mdStr!);\n    onChange && onChange(mdStr || '');\n  }\n  function handleCommand(command: ICommand, groupName?: string) {\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value as PreviewType);\n    }\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n    if (command.keyCommand === 'group') {\n      setGroupPop({ ...setGroupPopFalse(groupPop), [`${groupName}`]: true });\n    }\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop({ ...groupPop, [`${groupName}`]: false });\n    }\n    commandOrchestrator.current!.executeCommand(command);\n  }\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n    const previewDom = previewRef.current.mdp.current! as HTMLDivElement;\n    const textareaDom = textarea.current.warp.current! as HTMLDivElement;\n    if (textareaDom && previewDom) {\n      const scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n  const chestratorObj = useMemo(() => commandOrchestrator.current, [commandOrchestrator.current]);\n  const mdProps = {\n    ...previewOptions,\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value,\n  } as unknown as MarkdownPreviewProps;\n  return (\n    <div className={cls} onClick={() => setGroupPop({...setGroupPopFalse(groupPop)})} style={{ height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height }} {...other}>\n      {!hideToolbar && (\n        <Toolbar\n          active={{\n            fullscreen: isFullscreen,\n            preview: preview,\n            ...groupPop\n          }}\n          prefixCls={prefixCls}\n          commands={commands}\n          commandHelp={{\n            getState: commandOrchestrator.current && commandOrchestrator.current!.getState,\n            textApi: commandOrchestrator.current && commandOrchestrator.current!.textApi,\n            ...chestratorObj,\n          }}\n          onCommand={handleCommand}\n        />\n      )}\n      <div\n        className={`${prefixCls}-content`}\n        style={{ height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29 }}\n      >\n        {/(edit|live)/.test(preview as string) && (\n          <TextArea\n            ref={textarea}\n            tabSize={tabSize}\n            className={`${prefixCls}-input`}\n            prefixCls={prefixCls}\n            value={value}\n            autoFocus={autoFocus}\n            {...textareaProps}\n            onScroll={handleScroll}\n            onMouseOver={() => leftScroll.current = true}\n            onMouseLeave={() => leftScroll.current = false}\n            onChange={handleChange}\n          />\n        )}\n        {/(live|preview)/.test(preview as string) && (\n          <MarkdownPreview {...mdProps} className={`${prefixCls}-preview`}/>\n        )}\n        {visiableDragbar && !isFullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={(newHeight) => {\n              setHeight(newHeight);\n            }}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst MDEditor = React.forwardRef<HTMLDivElement, MDEditorProps>(InternalMDEditor);\n\ntype MDEditor = typeof MDEditor & {\n  Markdown: typeof MarkdownPreview;\n};\n\n(MDEditor as MDEditor).Markdown = MarkdownPreview;\n\nexport default MDEditor as MDEditor;\n"]},"metadata":{},"sourceType":"module"}