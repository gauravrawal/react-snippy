{"ast":null,"code":"Prism.languages.antlr4 = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'string': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n    greedy: true\n  },\n  'character-class': {\n    pattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,\n    greedy: true,\n    alias: 'regex',\n    inside: {\n      'range': {\n        pattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'escape': /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,\n      'punctuation': /[\\[\\]]/\n    }\n  },\n  'action': {\n    pattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,\n    greedy: true,\n    inside: {\n      'content': {\n        // this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to\n        pattern: /(\\{)[\\s\\S]+(?=\\})/,\n        lookbehind: true\n      },\n      'punctuation': /[{}]/\n    }\n  },\n  'command': {\n    pattern: /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,\n    lookbehind: true,\n    inside: {\n      'function': /\\b\\w+(?=\\s*(?:[,(]|$))/,\n      'punctuation': /[,()]/\n    }\n  },\n  'annotation': {\n    pattern: /@\\w+(?:::\\w+)*/,\n    alias: 'keyword'\n  },\n  'label': {\n    pattern: /#[ \\t]*\\w+/,\n    alias: 'punctuation'\n  },\n  'keyword': /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,\n  'definition': [{\n    pattern: /\\b[a-z]\\w*(?=\\s*:)/,\n    alias: ['rule', 'class-name']\n  }, {\n    pattern: /\\b[A-Z]\\w*(?=\\s*:)/,\n    alias: ['token', 'constant']\n  }],\n  'constant': /\\b[A-Z][A-Z_]*\\b/,\n  'operator': /\\.\\.|->|[|~]|[*+?]\\??/,\n  'punctuation': /[;:()=]/\n};\nPrism.languages.g4 = Prism.languages.antlr4;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-antlr4.js"],"names":["Prism","languages","antlr4","pattern","greedy","alias","inside","lookbehind","g4"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB;AACxB,aAAW,+BADa;AAExB,YAAU;AACTC,IAAAA,OAAO,EAAE,uBADA;AAETC,IAAAA,MAAM,EAAE;AAFC,GAFc;AAMxB,qBAAmB;AAClBD,IAAAA,OAAO,EAAE,0BADS;AAElBC,IAAAA,MAAM,EAAE,IAFU;AAGlBC,IAAAA,KAAK,EAAE,OAHW;AAIlBC,IAAAA,MAAM,EAAE;AACP,eAAS;AACRH,QAAAA,OAAO,EAAE,wCADD;AAERI,QAAAA,UAAU,EAAE,IAFJ;AAGRF,QAAAA,KAAK,EAAE;AAHC,OADF;AAMP,gBAAU,qEANH;AAOP,qBAAe;AAPR;AAJU,GANK;AAoBxB,YAAU;AACTF,IAAAA,OAAO,EAAE,yDADA;AAETC,IAAAA,MAAM,EAAE,IAFC;AAGTE,IAAAA,MAAM,EAAE;AACP,iBAAW;AACV;AACAH,QAAAA,OAAO,EAAE,mBAFC;AAGVI,QAAAA,UAAU,EAAE;AAHF,OADJ;AAMP,qBAAe;AANR;AAHC,GApBc;AAgCxB,aAAW;AACVJ,IAAAA,OAAO,EAAE,yEADC;AAEVI,IAAAA,UAAU,EAAE,IAFF;AAGVD,IAAAA,MAAM,EAAE;AACP,kBAAY,wBADL;AAEP,qBAAe;AAFR;AAHE,GAhCa;AAwCxB,gBAAc;AACbH,IAAAA,OAAO,EAAE,gBADI;AAEbE,IAAAA,KAAK,EAAE;AAFM,GAxCU;AA4CxB,WAAS;AACRF,IAAAA,OAAO,EAAE,YADD;AAERE,IAAAA,KAAK,EAAE;AAFC,GA5Ce;AAgDxB,aAAW,+GAhDa;AAiDxB,gBAAc,CACb;AACCF,IAAAA,OAAO,EAAE,oBADV;AAECE,IAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,YAAT;AAFR,GADa,EAKb;AACCF,IAAAA,OAAO,EAAE,oBADV;AAECE,IAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,UAAV;AAFR,GALa,CAjDU;AA2DxB,cAAY,kBA3DY;AA4DxB,cAAY,uBA5DY;AA6DxB,iBAAe;AA7DS,CAAzB;AAgEAL,KAAK,CAACC,SAAN,CAAgBO,EAAhB,GAAqBR,KAAK,CAACC,SAAN,CAAgBC,MAArC","sourcesContent":["Prism.languages.antlr4 = {\n\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t'string': {\n\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n\t\tgreedy: true\n\t},\n\t'character-class': {\n\t\tpattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,\n\t\tgreedy: true,\n\t\talias: 'regex',\n\t\tinside: {\n\t\t\t'range': {\n\t\t\t\tpattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'punctuation'\n\t\t\t},\n\t\t\t'escape': /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,\n\t\t\t'punctuation': /[\\[\\]]/\n\t\t}\n\t},\n\t'action': {\n\t\tpattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'content': {\n\t\t\t\t// this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to\n\t\t\t\tpattern: /(\\{)[\\s\\S]+(?=\\})/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t'punctuation': /[{}]/\n\t\t}\n\t},\n\t'command': {\n\t\tpattern: /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'function': /\\b\\w+(?=\\s*(?:[,(]|$))/,\n\t\t\t'punctuation': /[,()]/\n\t\t}\n\t},\n\t'annotation': {\n\t\tpattern: /@\\w+(?:::\\w+)*/,\n\t\talias: 'keyword'\n\t},\n\t'label': {\n\t\tpattern: /#[ \\t]*\\w+/,\n\t\talias: 'punctuation'\n\t},\n\t'keyword': /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,\n\t'definition': [\n\t\t{\n\t\t\tpattern: /\\b[a-z]\\w*(?=\\s*:)/,\n\t\t\talias: ['rule', 'class-name']\n\t\t},\n\t\t{\n\t\t\tpattern: /\\b[A-Z]\\w*(?=\\s*:)/,\n\t\t\talias: ['token', 'constant']\n\t\t},\n\t],\n\t'constant': /\\b[A-Z][A-Z_]*\\b/,\n\t'operator': /\\.\\.|->|[|~]|[*+?]\\??/,\n\t'punctuation': /[;:()=]/\n};\n\nPrism.languages.g4 = Prism.languages.antlr4;\n"]},"metadata":{},"sourceType":"script"}