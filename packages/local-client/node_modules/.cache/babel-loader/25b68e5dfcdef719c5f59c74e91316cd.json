{"ast":null,"code":"(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-coffeescript.js"],"names":["Prism","comment","interpolation","pattern","alias","languages","coffeescript","extend","greedy","inside","insertBefore","javascript","coffee"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AAEjB;AACA,MAAIC,OAAO,GAAG,WAAd;AACA,MAAIC,aAAa,GAAG;AACnBC,IAAAA,OAAO,EAAE,YADU;AAEnBC,IAAAA,KAAK,EAAE;AAFY,GAApB;AAKAJ,EAAAA,KAAK,CAACK,SAAN,CAAgBC,YAAhB,GAA+BN,KAAK,CAACK,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB,EAAqC;AACnE,eAAWN,OADwD;AAEnE,cAAU,CAET;AACA;AACCE,MAAAA,OAAO,EAAE,wBADV;AAECK,MAAAA,MAAM,EAAE;AAFT,KAHS,EAQT;AACC;AACAL,MAAAA,OAAO,EAAE,wBAFV;AAGCK,MAAAA,MAAM,EAAE,IAHT;AAICC,MAAAA,MAAM,EAAE;AACP,yBAAiBP;AADV;AAJT,KARS,CAFyD;AAmBnE,eAAW,kSAnBwD;AAoBnE,oBAAgB;AACfC,MAAAA,OAAO,EAAE,YADM;AAEfC,MAAAA,KAAK,EAAE;AAFQ;AApBmD,GAArC,CAA/B;AA0BAJ,EAAAA,KAAK,CAACK,SAAN,CAAgBK,YAAhB,CAA6B,cAA7B,EAA6C,SAA7C,EAAwD;AACvD,yBAAqB;AACpBP,MAAAA,OAAO,EAAE,gBADW;AAEpBC,MAAAA,KAAK,EAAE;AAFa,KADkC;AAMvD;AACA,mBAAe;AACdD,MAAAA,OAAO,EAAE,oBADK;AAEdC,MAAAA,KAAK,EAAE,OAFO;AAGdK,MAAAA,MAAM,EAAE;AACP,mBAAWR,OADJ;AAEP,yBAAiBC;AAFV;AAHM;AAPwC,GAAxD;AAiBAF,EAAAA,KAAK,CAACK,SAAN,CAAgBK,YAAhB,CAA6B,cAA7B,EAA6C,QAA7C,EAAuD;AACtD,yBAAqB;AACpBP,MAAAA,OAAO,EAAE,wBADW;AAEpBM,MAAAA,MAAM,EAAE;AACP,qBAAa;AACZN,UAAAA,OAAO,EAAE,OADG;AAEZC,UAAAA,KAAK,EAAE;AAFK,SADN;AAKP,kBAAU;AACTD,UAAAA,OAAO,EAAE,SADA;AAETC,UAAAA,KAAK,EAAE,qBAFE;AAGTK,UAAAA,MAAM,EAAET,KAAK,CAACK,SAAN,CAAgBM;AAHf;AALH;AAFY,KADiC;AAgBtD;AACA,wBAAoB,CACnB;AACCR,MAAAA,OAAO,EAAE,gBADV;AAECK,MAAAA,MAAM,EAAE,IAFT;AAGCJ,MAAAA,KAAK,EAAE;AAHR,KADmB,EAMnB;AACCD,MAAAA,OAAO,EAAE,gBADV;AAECK,MAAAA,MAAM,EAAE,IAFT;AAGCJ,MAAAA,KAAK,EAAE,QAHR;AAICK,MAAAA,MAAM,EAAE;AACPP,QAAAA,aAAa,EAAEA;AADR;AAJT,KANmB;AAjBkC,GAAvD;AAmCAF,EAAAA,KAAK,CAACK,SAAN,CAAgBK,YAAhB,CAA6B,cAA7B,EAA6C,SAA7C,EAAwD;AACvD;AACA,gBAAY;AAF2C,GAAxD;AAKA,SAAOV,KAAK,CAACK,SAAN,CAAgBC,YAAhB,CAA6B,iBAA7B,CAAP;AAEAN,EAAAA,KAAK,CAACK,SAAN,CAAgBO,MAAhB,GAAyBZ,KAAK,CAACK,SAAN,CAAgBC,YAAzC;AACA,CA/FA,EA+FCN,KA/FD,CAAD","sourcesContent":["(function (Prism) {\n\n\t// Ignore comments starting with { to privilege string interpolation highlighting\n\tvar comment = /#(?!\\{).+/;\n\tvar interpolation = {\n\t\tpattern: /#\\{[^}]+\\}/,\n\t\talias: 'variable'\n\t};\n\n\tPrism.languages.coffeescript = Prism.languages.extend('javascript', {\n\t\t'comment': comment,\n\t\t'string': [\n\n\t\t\t// Strings are multiline\n\t\t\t{\n\t\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t{\n\t\t\t\t// Strings are multiline\n\t\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n\t\t'class-member': {\n\t\t\tpattern: /@(?!\\d)\\w+/,\n\t\t\talias: 'variable'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('coffeescript', 'comment', {\n\t\t'multiline-comment': {\n\t\t\tpattern: /###[\\s\\S]+?###/,\n\t\t\talias: 'comment'\n\t\t},\n\n\t\t// Block regexp can contain comments and interpolation\n\t\t'block-regex': {\n\t\t\tpattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n\t\t\talias: 'regex',\n\t\t\tinside: {\n\t\t\t\t'comment': comment,\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('coffeescript', 'string', {\n\t\t'inline-javascript': {\n\t\t\tpattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^`|`$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'script': {\n\t\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\t\talias: 'language-javascript',\n\t\t\t\t\tinside: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Block strings\n\t\t'multiline-string': [\n\t\t\t{\n\t\t\t\tpattern: /'''[\\s\\S]*?'''/,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'string',\n\t\t\t\tinside: {\n\t\t\t\t\tinterpolation: interpolation\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\n\t});\n\n\tPrism.languages.insertBefore('coffeescript', 'keyword', {\n\t\t// Object property\n\t\t'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n\t});\n\n\tdelete Prism.languages.coffeescript['template-string'];\n\n\tPrism.languages.coffee = Prism.languages.coffeescript;\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}