{"ast":null,"code":"(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/true|false/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-yaml.js"],"names":["Prism","anchorOrAlias","tag","properties","source","plainKey","replace","string","createValuePattern","value","flags","pattern","RegExp","languages","yaml","lookbehind","alias","greedy","yml"],"mappings":"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","sourcesContent":["(function (Prism) {\n\n\t// https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n\t// https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n\tvar anchorOrAlias = /[*&][^\\s[\\]{},]+/;\n\t// https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\tvar tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/;\n\t// https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\tvar properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|'\n\t\t+ anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)';\n\t// https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n\t// This is a simplified version that doesn't support \"#\" and multiline keys\n\t// All these long scarry character classes are simplified versions of YAML's characters\n\tvar plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source\n\t\t.replace(/<PLAIN>/g, function () { return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source; });\n\tvar string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n\n\t/**\n\t *\n\t * @param {string} value\n\t * @param {string} [flags]\n\t * @returns {RegExp}\n\t */\n\tfunction createValuePattern(value, flags) {\n\t\tflags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\t\tvar pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source\n\t\t\t.replace(/<<prop>>/g, function () { return properties; }).replace(/<<value>>/g, function () { return value; });\n\t\treturn RegExp(pattern, flags);\n\t}\n\n\tPrism.languages.yaml = {\n\t\t'scalar': {\n\t\t\tpattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source\n\t\t\t\t.replace(/<<prop>>/g, function () { return properties; })),\n\t\t\tlookbehind: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'comment': /#.*/,\n\t\t'key': {\n\t\t\tpattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source\n\t\t\t\t.replace(/<<prop>>/g, function () { return properties; })\n\t\t\t\t.replace(/<<key>>/g, function () { return '(?:' + plainKey + '|' + string + ')'; })),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: 'atrule'\n\t\t},\n\t\t'directive': {\n\t\t\tpattern: /(^[ \\t]*)%.+/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'important'\n\t\t},\n\t\t'datetime': {\n\t\t\tpattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n\t\t\tlookbehind: true,\n\t\t\talias: 'number'\n\t\t},\n\t\t'boolean': {\n\t\t\tpattern: createValuePattern(/true|false/.source, 'i'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'important'\n\t\t},\n\t\t'null': {\n\t\t\tpattern: createValuePattern(/null|~/.source, 'i'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'important'\n\t\t},\n\t\t'string': {\n\t\t\tpattern: createValuePattern(string),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'number': {\n\t\t\tpattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'tag': tag,\n\t\t'important': anchorOrAlias,\n\t\t'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n\t};\n\n\tPrism.languages.yml = Prism.languages.yaml;\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}