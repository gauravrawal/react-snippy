{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/gauravrawal/gaurav/udemy/github/react-snippy/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport './code-cell.css';\nimport { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cell.content);\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.content, cell.id, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-cover\",\n        children: /*#__PURE__*/_jsxDEV(\"progress\", {\n          className: \"progress is-small is-primary\",\n          max: \"100\",\n          children: \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-cover\",\n        children: /*#__PURE__*/_jsxDEV(\"progress\", {\n          className: \"progress is-small is-primary\",\n          max: \"100\",\n          children: \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this) // <Preview code={bundle.code} err={bundle.err} />\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"drpAkWiXS2fQt+ooxmYouDs1MXE=\", false, function () {\n  return [useActions, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","content","timer","setTimeout","clearTimeout","height","display","flexDirection","value","loading"],"mappings":";;;;;AAAA,OAAO,iBAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACtD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BL,UAAU,EAA/C;AACA,QAAMM,MAAM,GAAGL,gBAAgB,CAAEM,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAAZ,CAA/B;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,MAAL,EAAa;AACXD,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUN,IAAI,CAACO,OAAf,CAAZ;AACA;AACD;;AAED,UAAMC,KAAK,GAAGC,UAAU,CAAC,YAAY;AACnCP,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUN,IAAI,CAACO,OAAf,CAAZ;AACD,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAM;AACXG,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACD,KAFD,CAVc,CAcd;AACD,GAfQ,EAeN,CAACR,IAAI,CAACO,OAAN,EAAeP,IAAI,CAACM,EAApB,EAAwBJ,YAAxB,CAfM,CAAT;AAiBA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACE;AACE,MAAA,KAAK,EAAE;AACLS,QAAAA,MAAM,EAAE,mBADH;AAELC,QAAAA,OAAO,EAAE,MAFJ;AAGLC,QAAAA,aAAa,EAAE;AAHV,OADT;AAAA,8BAOE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,YAAY,EAAEb,IAAI,CAACO,OADrB;AAEE,UAAA,QAAQ,EAAGO,KAAD,IAAWb,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUQ,KAAV;AAFjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,EAaG,CAACX,MAAD,IAAWA,MAAM,CAACY,OAAlB,gBACC;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACE;AAAU,UAAA,SAAS,EAAC,8BAApB;AAAmD,UAAA,GAAG,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADD,gBAOC;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACE;AAAU,UAAA,SAAS,EAAC,8BAApB;AAAmD,UAAA,GAAG,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPD,CAYC;AAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD,CArDD;;GAAMhB,Q;UACiCF,U,EACtBC,gB;;;KAFXC,Q;AAuDN,eAAeA,QAAf","sourcesContent":["import './code-cell.css';\nimport { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\n\ninterface CodeCellProps {\n  cell: Cell;\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n  const { updateCell, createBundle } = useActions();\n  const bundle = useTypedSelector((state) => state.bundles[cell.id]);\n\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cell.content);\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 750);\n\n    return () => {\n      clearTimeout(timer);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.content, cell.id, createBundle]);\n\n  return (\n    <Resizable direction=\"vertical\">\n      <div\n        style={{\n          height: 'calc(100% - 10px)',\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <Resizable direction=\"horizontal\">\n          <CodeEditor\n            initialValue={cell.content}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n        {!bundle || bundle.loading ? (\n          <div className=\"progress-cover\">\n            <progress className=\"progress is-small is-primary\" max=\"100\">\n              Loading\n            </progress>\n          </div>\n        ) : (\n          <div className=\"progress-cover\">\n            <progress className=\"progress is-small is-primary\" max=\"100\">\n              Loading\n            </progress>\n          </div>\n          // <Preview code={bundle.code} err={bundle.err} />\n        )}\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}