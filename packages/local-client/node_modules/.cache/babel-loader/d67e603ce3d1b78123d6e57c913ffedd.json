{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport \"./Child.css\";\nimport Toolbar from './';\nexport default function Child(props) {\n  var _ref = props || {},\n      prefixCls = _ref.prefixCls,\n      _ref$active = _ref.active,\n      active = _ref$active === void 0 ? {} : _ref$active,\n      groupName = _ref.groupName,\n      commands = _ref.commands,\n      children = _ref.children;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-toolbar-child \").concat(groupName && active[groupName] ? 'active' : ''),\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    }\n  }, Array.isArray(commands) ? /*#__PURE__*/React.createElement(Toolbar, _extends({\n    commands: commands\n  }, props, {\n    groupName: groupName\n  })) : children);\n}","map":{"version":3,"sources":["../../../../src/components/Toolbar/Child.tsx"],"names":["prefixCls","active","groupName","commands","children","props","e","Array"],"mappings":";AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,aAAA;AACA,OAAA,OAAA,MAAA,IAAA;AAMA,eAAe,SAAA,KAAA,CAAA,KAAA,EAAkC;AAAA,MAAA,IAAA,GACmBK,KAAK,IADxB,EAAA;AAAA,MACvCL,SADuC,GAAA,IAAA,CAAA,SAAA;AAAA,MAAA,WAAA,GAAA,IAAA,CAAA,MAAA;AAAA,MAC5BC,MAD4B,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,WAAA;AAAA,MACfC,SADe,GAAA,IAAA,CAAA,SAAA;AAAA,MACJC,QADI,GAAA,IAAA,CAAA,QAAA;AAAA,MACMC,QADN,GAAA,IAAA,CAAA,QAAA;;AAE/C,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,MAAA,CAAgCF,SAAS,IAAID,MAAM,CAAnBC,SAAmB,CAAnBA,GAAAA,QAAAA,GAA9C,EAAc,CAAd;AAAgG,IAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA;AAAA,aAAOI,CAAC,CAAR,eAAOA,EAAP;AAAA;AAAzG,GAAA,EACGC,KAAK,CAALA,OAAAA,CAAAA,QAAAA,IAAAA,aACC,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AAAS,IAAA,QAAQ,EAAEJ;AAAnB,GAAA,EAAA,KAAA,EAAA;AAAwC,IAAA,SAAS,EAAED;AAAnD,GAAA,CAAA,CADDK,GAFL,QACE,CADF;AAOD","sourcesContent":["import React from 'react';\nimport './Child.less';\nimport Toolbar, { IToolbarProps } from './';\n\nexport type ChildProps = IToolbarProps  & {\n  children?: any;\n}\n\nexport default function Child(props: ChildProps) {\n  const { prefixCls, active = {}, groupName, commands, children } = props || {};\n  return (\n    <div className={`${prefixCls}-toolbar-child ${groupName && active[groupName] ? 'active' : ''}`} onClick={(e) => e.stopPropagation()}>\n      {Array.isArray(commands) ? (\n        <Toolbar commands={commands} {...props} groupName={groupName} />\n      ) : children}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}