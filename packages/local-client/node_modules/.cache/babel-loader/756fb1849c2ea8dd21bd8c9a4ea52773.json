{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = void 0; // This module is suitable for passing as options.parser when calling\n// recast.parse to process ECMAScript code with Esprima:\n//\n//   const ast = recast.parse(source, {\n//     parser: require(\"recast/parsers/esprima\")\n//   });\n//\n\nvar util_1 = require(\"../lib/util\");\n\nfunction parse(source, options) {\n  var comments = [];\n\n  var ast = require(\"esprima\").parse(source, {\n    loc: true,\n    locations: true,\n    comment: true,\n    onComment: comments,\n    range: util_1.getOption(options, \"range\", false),\n    tolerant: util_1.getOption(options, \"tolerant\", true),\n    tokens: true,\n    jsx: util_1.getOption(options, \"jsx\", false)\n  });\n\n  if (!Array.isArray(ast.comments)) {\n    ast.comments = comments;\n  }\n\n  return ast;\n}\n\nexports.parse = parse;\n;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/jscodeshift/node_modules/recast/parsers/esprima.js"],"names":["Object","defineProperty","exports","value","parse","util_1","require","source","options","comments","ast","loc","locations","comment","onComment","range","getOption","tolerant","tokens","jsx","Array","isArray"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,SAASF,KAAT,CAAeG,MAAf,EAAuBC,OAAvB,EAAgC;AAC5B,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIC,GAAG,GAAGJ,OAAO,CAAC,SAAD,CAAP,CAAmBF,KAAnB,CAAyBG,MAAzB,EAAiC;AACvCI,IAAAA,GAAG,EAAE,IADkC;AAEvCC,IAAAA,SAAS,EAAE,IAF4B;AAGvCC,IAAAA,OAAO,EAAE,IAH8B;AAIvCC,IAAAA,SAAS,EAAEL,QAJ4B;AAKvCM,IAAAA,KAAK,EAAEV,MAAM,CAACW,SAAP,CAAiBR,OAAjB,EAA0B,OAA1B,EAAmC,KAAnC,CALgC;AAMvCS,IAAAA,QAAQ,EAAEZ,MAAM,CAACW,SAAP,CAAiBR,OAAjB,EAA0B,UAA1B,EAAsC,IAAtC,CAN6B;AAOvCU,IAAAA,MAAM,EAAE,IAP+B;AAQvCC,IAAAA,GAAG,EAAEd,MAAM,CAACW,SAAP,CAAiBR,OAAjB,EAA0B,KAA1B,EAAiC,KAAjC;AARkC,GAAjC,CAAV;;AAUA,MAAI,CAACY,KAAK,CAACC,OAAN,CAAcX,GAAG,CAACD,QAAlB,CAAL,EAAkC;AAC9BC,IAAAA,GAAG,CAACD,QAAJ,GAAeA,QAAf;AACH;;AACD,SAAOC,GAAP;AACH;;AACDR,OAAO,CAACE,KAAR,GAAgBA,KAAhB;AACA","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = void 0;\n// This module is suitable for passing as options.parser when calling\n// recast.parse to process ECMAScript code with Esprima:\n//\n//   const ast = recast.parse(source, {\n//     parser: require(\"recast/parsers/esprima\")\n//   });\n//\nvar util_1 = require(\"../lib/util\");\nfunction parse(source, options) {\n    var comments = [];\n    var ast = require(\"esprima\").parse(source, {\n        loc: true,\n        locations: true,\n        comment: true,\n        onComment: comments,\n        range: util_1.getOption(options, \"range\", false),\n        tolerant: util_1.getOption(options, \"tolerant\", true),\n        tokens: true,\n        jsx: util_1.getOption(options, \"jsx\", false)\n    });\n    if (!Array.isArray(ast.comments)) {\n        ast.comments = comments;\n    }\n    return ast;\n}\nexports.parse = parse;\n;\n"]},"metadata":{},"sourceType":"script"}