{"ast":null,"code":"Prism.languages.concurnas = {\n  comment: [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: !0,\n    greedy: !0\n  }],\n  langext: {\n    pattern: /\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,\n    greedy: !0,\n    alias: \"string\"\n  },\n  function: {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,\n    lookbehind: !0\n  },\n  keyword: /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\n  boolean: /\\b(?:false|true)\\b/,\n  number: /\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,\n  punctuation: /[{}[\\];(),.:]/,\n  operator: /<==|>==|=>|->|<-|<>|\\^|&==|&<>|!|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,\n  annotation: {\n    pattern: /@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,\n    alias: \"builtin\"\n  }\n}, Prism.languages.insertBefore(\"concurnas\", \"langext\", {\n  string: {\n    pattern: /[rs]?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: !0,\n        inside: Prism.languages.concurnas\n      },\n      string: /[\\s\\S]+/\n    }\n  }\n}), Prism.languages.conc = Prism.languages.concurnas;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-concurnas.min.js"],"names":["Prism","languages","concurnas","comment","pattern","lookbehind","greedy","langext","alias","function","keyword","boolean","number","punctuation","operator","annotation","insertBefore","string","inside","interpolation","conc"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,SAAhB,GAA0B;AAACC,EAAAA,OAAO,EAAC,CAAC;AAACC,IAAAA,OAAO,EAAC,iCAAT;AAA2CC,IAAAA,UAAU,EAAC,CAAC;AAAvD,GAAD,EAA2D;AAACD,IAAAA,OAAO,EAAC,kBAAT;AAA4BC,IAAAA,UAAU,EAAC,CAAC,CAAxC;AAA0CC,IAAAA,MAAM,EAAC,CAAC;AAAlD,GAA3D,CAAT;AAA0HC,EAAAA,OAAO,EAAC;AAACH,IAAAA,OAAO,EAAC,0BAAT;AAAoCE,IAAAA,MAAM,EAAC,CAAC,CAA5C;AAA8CE,IAAAA,KAAK,EAAC;AAApD,GAAlI;AAAgMC,EAAAA,QAAQ,EAAC;AAACL,IAAAA,OAAO,EAAC,0CAAT;AAAoDC,IAAAA,UAAU,EAAC,CAAC;AAAhE,GAAzM;AAA4QK,EAAAA,OAAO,EAAC,yjBAApR;AAA80BC,EAAAA,OAAO,EAAC,oBAAt1B;AAA22BC,EAAAA,MAAM,EAAC,2HAAl3B;AAA8+BC,EAAAA,WAAW,EAAC,eAA1/B;AAA0gCC,EAAAA,QAAQ,EAAC,oHAAnhC;AAAwoCC,EAAAA,UAAU,EAAC;AAACX,IAAAA,OAAO,EAAC,+BAAT;AAAyCI,IAAAA,KAAK,EAAC;AAA/C;AAAnpC,CAA1B,EAAwuCR,KAAK,CAACC,SAAN,CAAgBe,YAAhB,CAA6B,WAA7B,EAAyC,SAAzC,EAAmD;AAACC,EAAAA,MAAM,EAAC;AAACb,IAAAA,OAAO,EAAC,sCAAT;AAAgDE,IAAAA,MAAM,EAAC,CAAC,CAAxD;AAA0DY,IAAAA,MAAM,EAAC;AAACC,MAAAA,aAAa,EAAC;AAACf,QAAAA,OAAO,EAAC,gEAAT;AAA0EC,QAAAA,UAAU,EAAC,CAAC,CAAtF;AAAwFa,QAAAA,MAAM,EAAClB,KAAK,CAACC,SAAN,CAAgBC;AAA/G,OAAf;AAAyIe,MAAAA,MAAM,EAAC;AAAhJ;AAAjE;AAAR,CAAnD,CAAxuC,EAAkgDjB,KAAK,CAACC,SAAN,CAAgBmB,IAAhB,GAAqBpB,KAAK,CAACC,SAAN,CAAgBC,SAAviD","sourcesContent":["Prism.languages.concurnas={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],langext:{pattern:/\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,greedy:!0,alias:\"string\"},function:{pattern:/((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,lookbehind:!0},keyword:/\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,boolean:/\\b(?:false|true)\\b/,number:/\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,punctuation:/[{}[\\];(),.:]/,operator:/<==|>==|=>|->|<-|<>|\\^|&==|&<>|!|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,annotation:{pattern:/@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,alias:\"builtin\"}},Prism.languages.insertBefore(\"concurnas\",\"langext\",{string:{pattern:/[rs]?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,lookbehind:!0,inside:Prism.languages.concurnas},string:/[\\s\\S]+/}}}),Prism.languages.conc=Prism.languages.concurnas;"]},"metadata":{},"sourceType":"script"}