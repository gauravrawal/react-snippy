{"ast":null,"code":"import * as esbuild from \"esbuild-wasm\";\nimport { unpkgPathPlugin } from \"./plugins/unpkg-path-plugin\";\nimport { fetchPlugin } from \"./plugins/fetch-plugin\";\nlet service;\n\nconst bundle = async rawCode => {\n  if (!service) {\n    service = await esbuild.startService({\n      worker: true,\n      wasmURL: \"https://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm\"\n    });\n  }\n\n  try {\n    const result = await service.build({\n      entryPoints: [\"index.js\"],\n      bundle: true,\n      write: false,\n      plugins: [unpkgPathPlugin(), fetchPlugin(rawCode)],\n      define: {\n        \"process.env.NODE_ENV\": '\"production\"',\n        global: \"window\"\n      }\n    });\n  } catch (err) {\n    if (err instanceof Error) {\n      return err.message;\n    }\n  }\n};\n\nexport default bundle;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/src/bundler/index.ts"],"names":["esbuild","unpkgPathPlugin","fetchPlugin","service","bundle","rawCode","startService","worker","wasmURL","result","build","entryPoints","write","plugins","define","global","err","Error","message"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,IAAIC,OAAJ;;AACA,MAAMC,MAAM,GAAG,MAAOC,OAAP,IAA2B;AACxC,MAAI,CAACF,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,MAAMH,OAAO,CAACM,YAAR,CAAqB;AACnCC,MAAAA,MAAM,EAAE,IAD2B;AAEnCC,MAAAA,OAAO,EAAE;AAF0B,KAArB,CAAhB;AAID;;AAED,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMN,OAAO,CAACO,KAAR,CAAc;AACjCC,MAAAA,WAAW,EAAE,CAAC,UAAD,CADoB;AAEjCP,MAAAA,MAAM,EAAE,IAFyB;AAGjCQ,MAAAA,KAAK,EAAE,KAH0B;AAIjCC,MAAAA,OAAO,EAAE,CAACZ,eAAe,EAAhB,EAAoBC,WAAW,CAACG,OAAD,CAA/B,CAJwB;AAKjCS,MAAAA,MAAM,EAAE;AACN,gCAAwB,cADlB;AAENC,QAAAA,MAAM,EAAE;AAFF;AALyB,KAAd,CAArB;AAUD,GAXD,CAWE,OAAOC,GAAP,EAAqB;AACrB,QAAIA,GAAG,YAAYC,KAAnB,EAA0B;AACxB,aAAOD,GAAG,CAACE,OAAX;AACD;AACF;AACF,CAxBD;;AA0BA,eAAed,MAAf","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\nimport { unpkgPathPlugin } from \"./plugins/unpkg-path-plugin\";\nimport { fetchPlugin } from \"./plugins/fetch-plugin\";\n\nlet service: esbuild.Service;\nconst bundle = async (rawCode: string) => {\n  if (!service) {\n    service = await esbuild.startService({\n      worker: true,\n      wasmURL: \"https://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm\",\n    });\n  }\n\n  try {\n    const result = await service.build({\n      entryPoints: [\"index.js\"],\n      bundle: true,\n      write: false,\n      plugins: [unpkgPathPlugin(), fetchPlugin(rawCode)],\n      define: {\n        \"process.env.NODE_ENV\": '\"production\"',\n        global: \"window\",\n      },\n    });\n  } catch (err: unknown) {\n    if (err instanceof Error) {\n      return err.message;\n    }\n  }\n};\n\nexport default bundle;\n"]},"metadata":{},"sourceType":"module"}