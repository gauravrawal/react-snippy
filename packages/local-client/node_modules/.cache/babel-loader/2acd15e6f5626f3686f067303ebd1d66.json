{"ast":null,"code":"(function (Prism) {\n  var operators = [// query and projection\n  '$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or', '$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects', '$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet', '$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice', // update\n  '$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset', '$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit', // aggregation pipeline stages\n  '$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear', '$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup', '$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith', '$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind', // aggregation pipeline operators\n  '$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and', '$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2', '$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond', '$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth', '$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first', '$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes', '$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last', '$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max', '$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne', '$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce', '$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round', '$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion', '$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes', '$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan', '$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString', '$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip', // aggregation pipeline query modifiers\n  '$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query', '$returnKey', '$showDiskLoc', '$natural'];\n  var builtinFunctions = ['ObjectId', 'Code', 'BinData', 'DBRef', 'Timestamp', 'NumberLong', 'NumberDecimal', 'MaxKey', 'MinKey', 'RegExp', 'ISODate', 'UUID'];\n  operators = operators.map(function (operator) {\n    return operator.replace('$', '\\\\$');\n  });\n  var operatorsSource = '(?:' + operators.join('|') + ')\\\\b';\n  Prism.languages.mongodb = Prism.languages.extend('javascript', {});\n  Prism.languages.insertBefore('mongodb', 'string', {\n    'property': {\n      pattern: /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n      greedy: true,\n      inside: {\n        'keyword': RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\n      }\n    }\n  });\n  Prism.languages.mongodb.string.inside = {\n    url: {\n      // url pattern\n      pattern: /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n      greedy: true\n    },\n    entity: {\n      // ipv4\n      pattern: /\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/,\n      greedy: true\n    }\n  };\n  Prism.languages.insertBefore('mongodb', 'constant', {\n    'builtin': {\n      pattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n      alias: 'keyword'\n    }\n  });\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-mongodb.js"],"names":["Prism","operators","builtinFunctions","map","operator","replace","operatorsSource","join","languages","mongodb","extend","insertBefore","pattern","greedy","inside","RegExp","string","url","entity","alias"],"mappings":"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","sourcesContent":["(function (Prism) {\n\n\tvar operators = [\n\t\t// query and projection\n\t\t'$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or',\n\t\t'$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects',\n\t\t'$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet',\n\t\t'$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice',\n\n\t\t// update\n\t\t'$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset',\n\t\t'$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit',\n\n\t\t// aggregation pipeline stages\n\t\t'$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear',\n\t\t'$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup',\n\t\t'$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith',\n\t\t'$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind',\n\n\t\t// aggregation pipeline operators\n\t\t'$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and',\n\t\t'$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2',\n\t\t'$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond',\n\t\t'$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth',\n\t\t'$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first',\n\t\t'$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes',\n\t\t'$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last',\n\t\t'$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max',\n\t\t'$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne',\n\t\t'$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce',\n\t\t'$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round',\n\t\t'$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion',\n\t\t'$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes',\n\t\t'$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan',\n\t\t'$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString',\n\t\t'$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip',\n\n\t\t// aggregation pipeline query modifiers\n\t\t'$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query',\n\t\t'$returnKey', '$showDiskLoc', '$natural',\n\t];\n\n\tvar builtinFunctions = [\n\t\t'ObjectId',\n\t\t'Code',\n\t\t'BinData',\n\t\t'DBRef',\n\t\t'Timestamp',\n\t\t'NumberLong',\n\t\t'NumberDecimal',\n\t\t'MaxKey',\n\t\t'MinKey',\n\t\t'RegExp',\n\t\t'ISODate',\n\t\t'UUID',\n\t];\n\n\toperators = operators.map(function (operator) {\n\t\treturn operator.replace('$', '\\\\$');\n\t});\n\n\tvar operatorsSource = '(?:' + operators.join('|') + ')\\\\b';\n\n\tPrism.languages.mongodb = Prism.languages.extend('javascript', {});\n\n\tPrism.languages.insertBefore('mongodb', 'string', {\n\t\t'property': {\n\t\t\tpattern: /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'keyword': RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.mongodb.string.inside = {\n\t\turl: {\n\t\t\t// url pattern\n\t\t\tpattern: /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n\t\t\tgreedy: true\n\t\t},\n\t\tentity: {\n\t\t\t// ipv4\n\t\t\tpattern: /\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/,\n\t\t\tgreedy: true\n\t\t}\n\t};\n\n\tPrism.languages.insertBefore('mongodb', 'constant', {\n\t\t'builtin': {\n\t\t\tpattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n\t\t\talias: 'keyword'\n\t\t}\n\t});\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}