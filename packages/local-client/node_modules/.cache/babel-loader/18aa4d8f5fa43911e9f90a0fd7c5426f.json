{"ast":null,"code":"import produce from 'immer';\nimport { ActionType } from '../action-types';\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce((state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id != action.payload);\n      return state;\n\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n      return state;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      const cell = {\n        content: '',\n        type: action.payload.type,\n        id: randomId()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n\n      if (foundIndex < 0) {\n        state.order.push(cell.id);\n      } else {\n        state.order.splice(foundIndex, 0, cell.id);\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n});\n\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 5);\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_BEFORE","cell","randomId","foundIndex","push","splice","Math","random","toString","substring"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Cell } from '../cell';\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst reducer = produce(\n  (state: CellsState = initialState, action: Action): CellsState => {\n    switch (action.type) {\n      case ActionType.UPDATE_CELL:\n        const { id, content } = action.payload;\n        state.data[id].content = content;\n        return state;\n      case ActionType.DELETE_CELL:\n        delete state.data[action.payload];\n        state.order = state.order.filter((id) => id != action.payload);\n        return state;\n      case ActionType.MOVE_CELL:\n        const { direction } = action.payload;\n        const index = state.order.findIndex((id) => id === action.payload.id);\n        const targetIndex = direction === 'up' ? index - 1 : index + 1;\n        if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n          return state;\n        }\n\n        state.order[index] = state.order[targetIndex];\n        state.order[targetIndex] = action.payload.id;\n        return state;\n      case ActionType.INSERT_CELL_BEFORE:\n        const cell: Cell = {\n          content: '',\n          type: action.payload.type,\n          id: randomId(),\n        };\n\n        state.data[cell.id] = cell;\n\n        const foundIndex = state.order.findIndex(\n          (id) => id === action.payload.id\n        );\n\n        if (foundIndex < 0) {\n          state.order.push(cell.id);\n        } else {\n          state.order.splice(foundIndex, 0, cell.id);\n        }\n\n        return state;\n      default:\n        return state;\n    }\n  }\n);\n\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 5);\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}