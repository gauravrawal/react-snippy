{"ast":null,"code":"!function (e) {\n  var n = \"(?:\\\\b\\\\w+(?:<braces>)?|<braces>)\".replace(/<braces>/g, function () {\n    return \"\\\\((?:[^()]|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\))*\\\\)\";\n  }),\n      t = e.languages.pascaligo = {\n    comment: /\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,\n    string: {\n      pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,\n      greedy: !0\n    },\n    \"class-name\": [{\n      pattern: RegExp(\"(\\\\btype\\\\s+\\\\w+\\\\s+is\\\\s+)<type>\".replace(/<type>/g, function () {\n        return n;\n      }), \"i\"),\n      lookbehind: !0,\n      inside: null\n    }, {\n      pattern: RegExp(\"<type>(?=\\\\s+is\\\\b)\".replace(/<type>/g, function () {\n        return n;\n      }), \"i\"),\n      inside: null\n    }, {\n      pattern: RegExp(\"(:\\\\s*)<type>\".replace(/<type>/g, function () {\n        return n;\n      })),\n      lookbehind: !0,\n      inside: null\n    }],\n    keyword: {\n      pattern: /(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,\n      lookbehind: !0\n    },\n    boolean: {\n      pattern: /(^|[^&])\\b(?:True|False)\\b/i,\n      lookbehind: !0\n    },\n    builtin: {\n      pattern: /(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,\n      lookbehind: !0\n    },\n    function: /\\b\\w+(?=\\s*\\()/i,\n    number: [/%[01]+|&[0-7]+|\\$[a-f\\d]+/i, /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i],\n    operator: /->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/\n  },\n      i = [\"comment\", \"keyword\", \"builtin\", \"operator\", \"punctuation\"].reduce(function (e, n) {\n    return e[n] = t[n], e;\n  }, {});\n  t[\"class-name\"].forEach(function (e) {\n    e.inside = i;\n  });\n}(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-pascaligo.min.js"],"names":["e","n","replace","t","languages","pascaligo","comment","string","pattern","greedy","RegExp","lookbehind","inside","keyword","boolean","builtin","function","number","operator","punctuation","i","reduce","forEach","Prism"],"mappings":"AAAA,CAAC,UAASA,CAAT,EAAW;AAAC,MAAIC,CAAC,GAAC,oCAAoCC,OAApC,CAA4C,WAA5C,EAAwD,YAAU;AAAC,WAAM,gDAAN;AAAuD,GAA1H,CAAN;AAAA,MAAkIC,CAAC,GAACH,CAAC,CAACI,SAAF,CAAYC,SAAZ,GAAsB;AAACC,IAAAA,OAAO,EAAC,yBAAT;AAAmCC,IAAAA,MAAM,EAAC;AAACC,MAAAA,OAAO,EAAC,6CAAT;AAAuDC,MAAAA,MAAM,EAAC,CAAC;AAA/D,KAA1C;AAA4G,kBAAa,CAAC;AAACD,MAAAA,OAAO,EAACE,MAAM,CAAC,oCAAoCR,OAApC,CAA4C,SAA5C,EAAsD,YAAU;AAAC,eAAOD,CAAP;AAAS,OAA1E,CAAD,EAA6E,GAA7E,CAAf;AAAiGU,MAAAA,UAAU,EAAC,CAAC,CAA7G;AAA+GC,MAAAA,MAAM,EAAC;AAAtH,KAAD,EAA6H;AAACJ,MAAAA,OAAO,EAACE,MAAM,CAAC,sBAAsBR,OAAtB,CAA8B,SAA9B,EAAwC,YAAU;AAAC,eAAOD,CAAP;AAAS,OAA5D,CAAD,EAA+D,GAA/D,CAAf;AAAmFW,MAAAA,MAAM,EAAC;AAA1F,KAA7H,EAA6N;AAACJ,MAAAA,OAAO,EAACE,MAAM,CAAC,gBAAgBR,OAAhB,CAAwB,SAAxB,EAAkC,YAAU;AAAC,eAAOD,CAAP;AAAS,OAAtD,CAAD,CAAf;AAAyEU,MAAAA,UAAU,EAAC,CAAC,CAArF;AAAuFC,MAAAA,MAAM,EAAC;AAA9F,KAA7N,CAAzH;AAA2bC,IAAAA,OAAO,EAAC;AAACL,MAAAA,OAAO,EAAC,kIAAT;AAA4IG,MAAAA,UAAU,EAAC,CAAC;AAAxJ,KAAnc;AAA8lBG,IAAAA,OAAO,EAAC;AAACN,MAAAA,OAAO,EAAC,6BAAT;AAAuCG,MAAAA,UAAU,EAAC,CAAC;AAAnD,KAAtmB;AAA4pBI,IAAAA,OAAO,EAAC;AAACP,MAAAA,OAAO,EAAC,2DAAT;AAAqEG,MAAAA,UAAU,EAAC,CAAC;AAAjF,KAApqB;AAAwvBK,IAAAA,QAAQ,EAAC,iBAAjwB;AAAmxBC,IAAAA,MAAM,EAAC,CAAC,4BAAD,EAA8B,0CAA9B,CAA1xB;AAAo2BC,IAAAA,QAAQ,EAAC,0EAA72B;AAAw7BC,IAAAA,WAAW,EAAC;AAAp8B,GAA1J;AAAA,MAA0nCC,CAAC,GAAC,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,UAA/B,EAA0C,aAA1C,EAAyDC,MAAzD,CAAgE,UAASrB,CAAT,EAAWC,CAAX,EAAa;AAAC,WAAOD,CAAC,CAACC,CAAD,CAAD,GAAKE,CAAC,CAACF,CAAD,CAAN,EAAUD,CAAjB;AAAmB,GAAjG,EAAkG,EAAlG,CAA5nC;AAAkuCG,EAAAA,CAAC,CAAC,YAAD,CAAD,CAAgBmB,OAAhB,CAAwB,UAAStB,CAAT,EAAW;AAACA,IAAAA,CAAC,CAACY,MAAF,GAASQ,CAAT;AAAW,GAA/C;AAAiD,CAA/xC,CAAgyCG,KAAhyC,CAAD","sourcesContent":["!function(e){var n=\"(?:\\\\b\\\\w+(?:<braces>)?|<braces>)\".replace(/<braces>/g,function(){return\"\\\\((?:[^()]|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\))*\\\\)\"}),t=e.languages.pascaligo={comment:/\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,string:{pattern:/([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,greedy:!0},\"class-name\":[{pattern:RegExp(\"(\\\\btype\\\\s+\\\\w+\\\\s+is\\\\s+)<type>\".replace(/<type>/g,function(){return n}),\"i\"),lookbehind:!0,inside:null},{pattern:RegExp(\"<type>(?=\\\\s+is\\\\b)\".replace(/<type>/g,function(){return n}),\"i\"),inside:null},{pattern:RegExp(\"(:\\\\s*)<type>\".replace(/<type>/g,function(){return n})),lookbehind:!0,inside:null}],keyword:{pattern:/(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,lookbehind:!0},boolean:{pattern:/(^|[^&])\\b(?:True|False)\\b/i,lookbehind:!0},builtin:{pattern:/(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,lookbehind:!0},function:/\\b\\w+(?=\\s*\\()/i,number:[/%[01]+|&[0-7]+|\\$[a-f\\d]+/i,/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i],operator:/->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,punctuation:/\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/},i=[\"comment\",\"keyword\",\"builtin\",\"operator\",\"punctuation\"].reduce(function(e,n){return e[n]=t[n],e},{});t[\"class-name\"].forEach(function(e){e.inside=i})}(Prism);"]},"metadata":{},"sourceType":"script"}