{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/gauravrawal/gaurav/udemy/github/react-snippy/src/components/cell-list.tsx\",\n    _s = $RefreshSig$();\n\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport CellListItems from './cell-list-item';\nimport AddCell from './add-cell';\n\nconst CellList = () => {\n  _s();\n\n  const cells = useTypedSelector(({\n    cells: {\n      order,\n      data\n    }\n  }) => order.map(id => data[id]));\n  const renderedCells = cells.map(cell => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddCell, {\n      nextCellId: cell.id\n    }, cell.id + 'w', false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CellListItems, {\n      cell: cell\n    }, cell.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderedCells, \" \", /*#__PURE__*/_jsxDEV(AddCell, {\n      nextCellId: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CellList, \"ij3ho+NMbIxaBKnXgl+evU0tiZI=\", false, function () {\n  return [useTypedSelector];\n});\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/src/components/cell-list.tsx"],"names":["useTypedSelector","CellListItems","AddCell","CellList","cells","order","data","map","id","renderedCells","cell"],"mappings":";;;;;;AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,KAAK,GAAGJ,gBAAgB,CAAC,CAAC;AAAEI,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAT,GAAD,KAC7BD,KAAK,CAACE,GAAN,CAAWC,EAAD,IAAQF,IAAI,CAACE,EAAD,CAAtB,CAD4B,CAA9B;AAIA,QAAMC,aAAa,GAAGL,KAAK,CAACG,GAAN,CAAWG,IAAD,iBAC9B;AAAA,4BACE,QAAC,OAAD;AAA6B,MAAA,UAAU,EAAEA,IAAI,CAACF;AAA9C,OAAcE,IAAI,CAACF,EAAL,GAAU,GAAxB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAA6B,MAAA,IAAI,EAAEE;AAAnC,OAAoBA,IAAI,CAACF,EAAzB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADoB,CAAtB;AAOA,sBACE;AAAA,eACGC,aADH,oBACkB,QAAC,OAAD;AAAS,MAAA,UAAU,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,YADlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjBD;;GAAMN,Q;UACUH,gB;;;KADVG,Q;AAmBN,eAAeA,QAAf","sourcesContent":["import { useTypedSelector } from '../hooks/use-typed-selector';\nimport CellListItems from './cell-list-item';\nimport AddCell from './add-cell';\n\nconst CellList: React.FC = () => {\n  const cells = useTypedSelector(({ cells: { order, data } }) =>\n    order.map((id) => data[id])\n  );\n\n  const renderedCells = cells.map((cell) => (\n    <>\n      <AddCell key={cell.id + 'w'} nextCellId={cell.id} />\n      <CellListItems key={cell.id} cell={cell} />\n    </>\n  ));\n\n  return (\n    <div>\n      {renderedCells} <AddCell nextCellId={null} />\n    </div>\n  );\n};\n\nexport default CellList;\n"]},"metadata":{},"sourceType":"module"}