{"ast":null,"code":"// Based on Free Pascal\n\n/* TODO\n\tSupport inline asm ?\n*/\nPrism.languages.pascal = {\n  'comment': [/\\(\\*[\\s\\S]+?\\*\\)/, /\\{[\\s\\S]+?\\}/, /\\/\\/.*/],\n  'string': {\n    pattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n    greedy: true\n  },\n  'keyword': [{\n    // Turbo Pascal\n    pattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n    lookbehind: true\n  }, {\n    // Free Pascal\n    pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n    lookbehind: true\n  }, {\n    // Object Pascal\n    pattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n    lookbehind: true\n  }, {\n    // Modifiers\n    pattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n    lookbehind: true\n  }],\n  'number': [// Hexadecimal, octal and binary\n  /(?:[&%]\\d+|\\$[a-f\\d]+)/i, // Decimal\n  /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],\n  'operator': [/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i, {\n    pattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n    lookbehind: true\n  }],\n  'punctuation': /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n};\nPrism.languages.objectpascal = Prism.languages.pascal;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-pascal.js"],"names":["Prism","languages","pascal","pattern","greedy","lookbehind","objectpascal"],"mappings":"AAAA;;AAEA;AACA;AACA;AAEAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB;AACxB,aAAW,CACV,kBADU,EAEV,cAFU,EAGV,QAHU,CADa;AAMxB,YAAU;AACTC,IAAAA,OAAO,EAAE,uDADA;AAETC,IAAAA,MAAM,EAAE;AAFC,GANc;AAUxB,aAAW,CACV;AACC;AACAD,IAAAA,OAAO,EAAE,gTAFV;AAGCE,IAAAA,UAAU,EAAE;AAHb,GADU,EAMV;AACC;AACAF,IAAAA,OAAO,EAAE,8CAFV;AAGCE,IAAAA,UAAU,EAAE;AAHb,GANU,EAWV;AACC;AACAF,IAAAA,OAAO,EAAE,kKAFV;AAGCE,IAAAA,UAAU,EAAE;AAHb,GAXU,EAgBV;AACC;AACAF,IAAAA,OAAO,EAAE,khBAFV;AAGCE,IAAAA,UAAU,EAAE;AAHb,GAhBU,CAVa;AAgCxB,YAAU,CACT;AACA,2BAFS,EAGT;AACA,kCAJS,CAhCc;AAsCxB,cAAY,CACX,+CADW,EAEX;AACCF,IAAAA,OAAO,EAAE,yEADV;AAECE,IAAAA,UAAU,EAAE;AAFb,GAFW,CAtCY;AA6CxB,iBAAe;AA7CS,CAAzB;AAgDAL,KAAK,CAACC,SAAN,CAAgBK,YAAhB,GAA+BN,KAAK,CAACC,SAAN,CAAgBC,MAA/C","sourcesContent":["// Based on Free Pascal\n\n/* TODO\n\tSupport inline asm ?\n*/\n\nPrism.languages.pascal = {\n\t'comment': [\n\t\t/\\(\\*[\\s\\S]+?\\*\\)/,\n\t\t/\\{[\\s\\S]+?\\}/,\n\t\t/\\/\\/.*/\n\t],\n\t'string': {\n\t\tpattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n\t\tgreedy: true\n\t},\n\t'keyword': [\n\t\t{\n\t\t\t// Turbo Pascal\n\t\t\tpattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\t// Free Pascal\n\t\t\tpattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\t// Object Pascal\n\t\t\tpattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\t// Modifiers\n\t\t\tpattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'number': [\n\t\t// Hexadecimal, octal and binary\n\t\t/(?:[&%]\\d+|\\$[a-f\\d]+)/i,\n\t\t// Decimal\n\t\t/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i\n\t],\n\t'operator': [\n\t\t/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i,\n\t\t{\n\t\t\tpattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'punctuation': /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n};\n\nPrism.languages.objectpascal = Prism.languages.pascal;\n"]},"metadata":{},"sourceType":"script"}