{"ast":null,"code":"var markdownLineEndingOrSpace = require('micromark/dist/character/markdown-line-ending-or-space');\n\nvar spaceFactory = require('micromark/dist/tokenize/factory-space');\n\nvar prefixSize = require('micromark/dist/util/prefix-size');\n\nvar tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n};\nexports.text = {\n  91: tasklistCheck\n};\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  var self = this;\n  return open;\n\n  function open(code) {\n    if ( // Exit if not `[`.\n    code !== 91 || // Exit if there’s stuff before.\n    self.previous !== null || // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  function inside(code) {\n    // Tab or space.\n    if (code === -2 || code === 32) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    } // Upper- and lower `x`.\n\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n\n    return nok(code);\n  }\n\n  function close(code) {\n    // `]`\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok);\n    }\n\n    return nok(code);\n  }\n}\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  var self = this;\n  return spaceFactory(effects, after, 'whitespace');\n\n  function after(code) {\n    return prefixSize(self.events, 'whitespace') && code !== null && !markdownLineEndingOrSpace(code) ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/micromark-extension-gfm-task-list-item/syntax.js"],"names":["markdownLineEndingOrSpace","require","spaceFactory","prefixSize","tasklistCheck","tokenize","tokenizeTasklistCheck","exports","text","effects","ok","nok","self","open","code","previous","_gfmTasklistFirstContentOfListItem","enter","consume","exit","inside","close","check","spaceThenNonSpace","after","events"],"mappings":"AAAA,IAAIA,yBAAyB,GAAGC,OAAO,CAAC,wDAAD,CAAvC;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,uCAAD,CAA1B;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,iCAAD,CAAxB;;AAEA,IAAIG,aAAa,GAAG;AAACC,EAAAA,QAAQ,EAAEC;AAAX,CAApB;AAEAC,OAAO,CAACC,IAAR,GAAe;AAAC,MAAIJ;AAAL,CAAf;;AAEA,SAASE,qBAAT,CAA+BG,OAA/B,EAAwCC,EAAxC,EAA4CC,GAA5C,EAAiD;AAC/C,MAAIC,IAAI,GAAG,IAAX;AAEA,SAAOC,IAAP;;AAEA,WAASA,IAAT,CAAcC,IAAd,EAAoB;AAClB,SACE;AACAA,IAAAA,IAAI,KAAK,EAAT,IACA;AACAF,IAAAA,IAAI,CAACG,QAAL,KAAkB,IAFlB,IAGA;AACA;AACA,KAACH,IAAI,CAACI,kCAPR,EAQE;AACA,aAAOL,GAAG,CAACG,IAAD,CAAV;AACD;;AAEDL,IAAAA,OAAO,CAACQ,KAAR,CAAc,eAAd;AACAR,IAAAA,OAAO,CAACQ,KAAR,CAAc,qBAAd;AACAR,IAAAA,OAAO,CAACS,OAAR,CAAgBJ,IAAhB;AACAL,IAAAA,OAAO,CAACU,IAAR,CAAa,qBAAb;AACA,WAAOC,MAAP;AACD;;AAED,WAASA,MAAT,CAAgBN,IAAhB,EAAsB;AACpB;AACA,QAAIA,IAAI,KAAK,CAAC,CAAV,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC9BL,MAAAA,OAAO,CAACQ,KAAR,CAAc,6BAAd;AACAR,MAAAA,OAAO,CAACS,OAAR,CAAgBJ,IAAhB;AACAL,MAAAA,OAAO,CAACU,IAAR,CAAa,6BAAb;AACA,aAAOE,KAAP;AACD,KAPmB,CASpB;;;AACA,QAAIP,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAA5B,EAAiC;AAC/BL,MAAAA,OAAO,CAACQ,KAAR,CAAc,2BAAd;AACAR,MAAAA,OAAO,CAACS,OAAR,CAAgBJ,IAAhB;AACAL,MAAAA,OAAO,CAACU,IAAR,CAAa,2BAAb;AACA,aAAOE,KAAP;AACD;;AAED,WAAOV,GAAG,CAACG,IAAD,CAAV;AACD;;AAED,WAASO,KAAT,CAAeP,IAAf,EAAqB;AACnB;AACA,QAAIA,IAAI,KAAK,EAAb,EAAiB;AACfL,MAAAA,OAAO,CAACQ,KAAR,CAAc,qBAAd;AACAR,MAAAA,OAAO,CAACS,OAAR,CAAgBJ,IAAhB;AACAL,MAAAA,OAAO,CAACU,IAAR,CAAa,qBAAb;AACAV,MAAAA,OAAO,CAACU,IAAR,CAAa,eAAb;AACA,aAAOV,OAAO,CAACa,KAAR,CAAc;AAACjB,QAAAA,QAAQ,EAAEkB;AAAX,OAAd,EAA6Cb,EAA7C,EAAiDC,GAAjD,CAAP;AACD;;AAED,WAAOA,GAAG,CAACG,IAAD,CAAV;AACD;AACF;;AAED,SAASS,iBAAT,CAA2Bd,OAA3B,EAAoCC,EAApC,EAAwCC,GAAxC,EAA6C;AAC3C,MAAIC,IAAI,GAAG,IAAX;AAEA,SAAOV,YAAY,CAACO,OAAD,EAAUe,KAAV,EAAiB,YAAjB,CAAnB;;AAEA,WAASA,KAAT,CAAeV,IAAf,EAAqB;AACnB,WAAOX,UAAU,CAACS,IAAI,CAACa,MAAN,EAAc,YAAd,CAAV,IACLX,IAAI,KAAK,IADJ,IAEL,CAACd,yBAAyB,CAACc,IAAD,CAFrB,GAGHJ,EAAE,CAACI,IAAD,CAHC,GAIHH,GAAG,CAACG,IAAD,CAJP;AAKD;AACF","sourcesContent":["var markdownLineEndingOrSpace = require('micromark/dist/character/markdown-line-ending-or-space')\nvar spaceFactory = require('micromark/dist/tokenize/factory-space')\nvar prefixSize = require('micromark/dist/util/prefix-size')\n\nvar tasklistCheck = {tokenize: tokenizeTasklistCheck}\n\nexports.text = {91: tasklistCheck}\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  var self = this\n\n  return open\n\n  function open(code) {\n    if (\n      // Exit if not `[`.\n      code !== 91 ||\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  function inside(code) {\n    // Tab or space.\n    if (code === -2 || code === 32) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    // Upper- and lower `x`.\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n\n  function close(code) {\n    // `]`\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check({tokenize: spaceThenNonSpace}, ok, nok)\n    }\n\n    return nok(code)\n  }\n}\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  var self = this\n\n  return spaceFactory(effects, after, 'whitespace')\n\n  function after(code) {\n    return prefixSize(self.events, 'whitespace') &&\n      code !== null &&\n      !markdownLineEndingOrSpace(code)\n      ? ok(code)\n      : nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}