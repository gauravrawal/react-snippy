{"ast":null,"code":"import axios from 'axios';\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\nexport const fetchPlugin = inputCode => {\n  return {\n    name: 'fetch-plugin',\n\n    setup(build) {\n      build.onLoad({\n        filter: /(^index\\.js$)/\n      }, () => {\n        return {\n          loader: 'jsx',\n          contents: inputCode\n        };\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        const cachedResult = await fileCache.getItem(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n      });\n      build.onLoad({\n        filter: /.css$/\n      }, async args => {\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const escaped = data.replace(/\\n/g, '').replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\n        const contents = `\n          const style = document.createElement('style');\n          style.innerText = '${escaped}';\n          document.head.appendChild(style);\n        `;\n        const result = {\n          loader: 'jsx',\n          contents,\n          resolveDir: new URL('./', request.responseURL).pathname\n        };\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const result = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        };\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/src/bundler/plugins/fetch-plugin.ts"],"names":["axios","localForage","fileCache","createInstance","name","fetchPlugin","inputCode","setup","build","onLoad","filter","loader","contents","args","cachedResult","getItem","path","data","request","get","escaped","replace","result","resolveDir","URL","responseURL","pathname","setItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AAC3CC,EAAAA,IAAI,EAAE;AADqC,CAA3B,CAAlB;AAIA,OAAO,MAAMC,WAAW,GAAIC,SAAD,IAAuB;AAChD,SAAO;AACLF,IAAAA,IAAI,EAAE,cADD;;AAELG,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAChCA,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA0C,MAAM;AAC9C,eAAO;AACLC,UAAAA,MAAM,EAAE,KADH;AAELC,UAAAA,QAAQ,EAAEN;AAFL,SAAP;AAID,OALD;AAOAE,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOG,IAAP,IAAqB;AAClD,cAAMC,YAAY,GAAG,MAAMZ,SAAS,CAACa,OAAV,CACzBF,IAAI,CAACG,IADoB,CAA3B;;AAIA,YAAIF,YAAJ,EAAkB;AAChB,iBAAOA,YAAP;AACD;AACF,OARD;AAUAN,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAAkC,MAAOG,IAAP,IAAqB;AACrD,cAAM;AAAEI,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAMlB,KAAK,CAACmB,GAAN,CAAUN,IAAI,CAACG,IAAf,CAAhC;AACA,cAAMI,OAAO,GAAGH,IAAI,CACjBI,OADa,CACL,KADK,EACE,EADF,EAEbA,OAFa,CAEL,IAFK,EAEC,KAFD,EAGbA,OAHa,CAGL,IAHK,EAGC,KAHD,CAAhB;AAIA,cAAMT,QAAQ,GAAI;AAC1B;AACA,+BAA+BQ,OAAQ;AACvC;AACA,SAJQ;AAMA,cAAME,MAA4B,GAAG;AACnCX,UAAAA,MAAM,EAAE,KAD2B;AAEnCC,UAAAA,QAFmC;AAGnCW,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcN,OAAO,CAACO,WAAtB,EAAmCC;AAHZ,SAArC;AAKA,cAAMxB,SAAS,CAACyB,OAAV,CAAkBd,IAAI,CAACG,IAAvB,EAA6BM,MAA7B,CAAN;AAEA,eAAOA,MAAP;AACD,OApBD;AAsBAd,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOG,IAAP,IAAqB;AAClD,cAAM;AAAEI,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAMlB,KAAK,CAACmB,GAAN,CAAUN,IAAI,CAACG,IAAf,CAAhC;AAEA,cAAMM,MAA4B,GAAG;AACnCX,UAAAA,MAAM,EAAE,KAD2B;AAEnCC,UAAAA,QAAQ,EAAEK,IAFyB;AAGnCM,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcN,OAAO,CAACO,WAAtB,EAAmCC;AAHZ,SAArC;AAKA,cAAMxB,SAAS,CAACyB,OAAV,CAAkBd,IAAI,CAACG,IAAvB,EAA6BM,MAA7B,CAAN;AAEA,eAAOA,MAAP;AACD,OAXD;AAYD;;AAtDI,GAAP;AAwDD,CAzDM","sourcesContent":["import * as esbuild from 'esbuild-wasm';\nimport axios from 'axios';\nimport localForage from 'localforage';\n\nconst fileCache = localForage.createInstance({\n  name: 'filecache',\n});\n\nexport const fetchPlugin = (inputCode: string) => {\n  return {\n    name: 'fetch-plugin',\n    setup(build: esbuild.PluginBuild) {\n      build.onLoad({ filter: /(^index\\.js$)/ }, () => {\n        return {\n          loader: 'jsx',\n          contents: inputCode,\n        };\n      });\n\n      build.onLoad({ filter: /.*/ }, async (args: any) => {\n        const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(\n          args.path\n        );\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n      });\n\n      build.onLoad({ filter: /.css$/ }, async (args: any) => {\n        const { data, request } = await axios.get(args.path);\n        const escaped = data\n          .replace(/\\n/g, '')\n          .replace(/\"/g, '\\\\\"')\n          .replace(/'/g, \"\\\\'\");\n        const contents = `\n          const style = document.createElement('style');\n          style.innerText = '${escaped}';\n          document.head.appendChild(style);\n        `;\n\n        const result: esbuild.OnLoadResult = {\n          loader: 'jsx',\n          contents,\n          resolveDir: new URL('./', request.responseURL).pathname,\n        };\n        await fileCache.setItem(args.path, result);\n\n        return result;\n      });\n\n      build.onLoad({ filter: /.*/ }, async (args: any) => {\n        const { data, request } = await axios.get(args.path);\n\n        const result: esbuild.OnLoadResult = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname,\n        };\n        await fileCache.setItem(args.path, result);\n\n        return result;\n      });\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}