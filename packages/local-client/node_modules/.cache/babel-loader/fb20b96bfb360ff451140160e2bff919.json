{"ast":null,"code":"Prism.languages.q = {\n  'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n  'comment': [// From http://code.kx.com/wiki/Reference/Slash:\n  // When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.\n  {\n    pattern: /([\\t )\\]}])\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }, // From http://code.kx.com/wiki/Reference/Slash:\n  // A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.\n  // A / on a line by itself begins a multiline comment which is terminated by the next \\ on a line by itself.\n  // If a / is not matched by a \\, the multiline comment is unterminated and continues to end of file.\n  // The / and \\ must be the first char on the line, but may be followed by any amount of whitespace.\n  {\n    pattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r(?!\\n)))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,\n    lookbehind: true,\n    greedy: true\n  }, // From http://code.kx.com/wiki/Reference/Slash:\n  // A \\ on a line by itself with no preceding matching / will comment to end of file.\n  {\n    pattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,\n    greedy: true\n  }, {\n    pattern: /^#!.+/m,\n    greedy: true\n  }],\n  'symbol': /`(?::\\S+|[\\w.]*)/,\n  'datetime': {\n    pattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,\n    alias: 'number'\n  },\n  // The negative look-ahead prevents bad highlighting\n  // of verbs 0: and 1:\n  'number': /\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?[hjfeb]?)/,\n  'keyword': /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,\n  'adverb': {\n    pattern: /['\\/\\\\]:?|\\beach\\b/,\n    alias: 'function'\n  },\n  'verb': {\n    pattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?~=|$&#@^]):?|\\b_\\b:?/,\n    alias: 'operator'\n  },\n  'punctuation': /[(){}\\[\\];.]/\n};","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-q.js"],"names":["Prism","languages","q","pattern","lookbehind","greedy","alias"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,CAAhB,GAAoB;AACnB,YAAU,uBADS;AAEnB,aAAW,CACV;AACA;AACA;AAECC,IAAAA,OAAO,EAAE,iBAFV;AAGCC,IAAAA,UAAU,EAAE,IAHb;AAICC,IAAAA,MAAM,EAAE;AAJT,GAHU,EASV;AACA;AACA;AACA;AACA;AACA;AACCF,IAAAA,OAAO,EAAE,mGADV;AAECC,IAAAA,UAAU,EAAE,IAFb;AAGCC,IAAAA,MAAM,EAAE;AAHT,GAdU,EAmBV;AACA;AACA;AACCF,IAAAA,OAAO,EAAE,+BADV;AAECE,IAAAA,MAAM,EAAE;AAFT,GArBU,EAyBV;AACCF,IAAAA,OAAO,EAAE,QADV;AAECE,IAAAA,MAAM,EAAE;AAFT,GAzBU,CAFQ;AAgCnB,YAAU,kBAhCS;AAiCnB,cAAY;AACXF,IAAAA,OAAO,EAAE,4IADE;AAEXG,IAAAA,KAAK,EAAE;AAFI,GAjCO;AAqCnB;AACA;AACA,YAAU,yFAvCS;AAwCnB,aAAW,s4BAxCQ;AAyCnB,YAAU;AACTH,IAAAA,OAAO,EAAE,oBADA;AAETG,IAAAA,KAAK,EAAE;AAFE,GAzCS;AA6CnB,UAAQ;AACPH,IAAAA,OAAO,EAAE,6DADF;AAEPG,IAAAA,KAAK,EAAE;AAFA,GA7CW;AAiDnB,iBAAe;AAjDI,CAApB","sourcesContent":["Prism.languages.q = {\n\t'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t'comment': [\n\t\t// From http://code.kx.com/wiki/Reference/Slash:\n\t\t// When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.\n\t\t{\n\n\t\t\tpattern: /([\\t )\\]}])\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t// From http://code.kx.com/wiki/Reference/Slash:\n\t\t// A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.\n\t\t// A / on a line by itself begins a multiline comment which is terminated by the next \\ on a line by itself.\n\t\t// If a / is not matched by a \\, the multiline comment is unterminated and continues to end of file.\n\t\t// The / and \\ must be the first char on the line, but may be followed by any amount of whitespace.\n\t\t{\n\t\t\tpattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r(?!\\n)))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t// From http://code.kx.com/wiki/Reference/Slash:\n\t\t// A \\ on a line by itself with no preceding matching / will comment to end of file.\n\t\t{\n\t\t\tpattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /^#!.+/m,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'symbol': /`(?::\\S+|[\\w.]*)/,\n\t'datetime': {\n\t\tpattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,\n\t\talias: 'number'\n\t},\n\t// The negative look-ahead prevents bad highlighting\n\t// of verbs 0: and 1:\n\t'number': /\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?[hjfeb]?)/,\n\t'keyword': /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,\n\t'adverb': {\n\t\tpattern: /['\\/\\\\]:?|\\beach\\b/,\n\t\talias: 'function'\n\t},\n\t'verb': {\n\t\tpattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?~=|$&#@^]):?|\\b_\\b:?/,\n\t\talias: 'operator'\n\t},\n\t'punctuation': /[(){}\\[\\];.]/\n};\n"]},"metadata":{},"sourceType":"script"}