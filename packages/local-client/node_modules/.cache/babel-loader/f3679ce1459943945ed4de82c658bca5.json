{"ast":null,"code":"(function (Prism) {\n  // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n  // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n  var spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source; // At least one space, comment, or line break\n\n  var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {\n    return spaceAfterBackSlash;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n  var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () {\n    return string;\n  });\n  var stringRule = {\n    pattern: RegExp(string),\n    greedy: true\n  };\n  var commentRule = {\n    pattern: /(^[ \\t]*)#.*/m,\n    lookbehind: true,\n    greedy: true\n  };\n  /**\n   * @param {string} source\n   * @param {string} flags\n   * @returns {RegExp}\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<OPT>/g, function () {\n      return option;\n    }).replace(/<SP>/g, function () {\n      return space;\n    });\n    return RegExp(source, flags);\n  }\n\n  Prism.languages.docker = {\n    'instruction': {\n      pattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'options': {\n          pattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n          lookbehind: true,\n          greedy: true,\n          inside: {\n            'property': {\n              pattern: /(^|\\s)--[\\w-]+/,\n              lookbehind: true\n            },\n            'string': [stringRule, {\n              pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n              lookbehind: true\n            }],\n            'operator': /\\\\$/m,\n            'punctuation': /=/\n          }\n        },\n        'keyword': [{\n          // https://docs.docker.com/engine/reference/builder/#healthcheck\n          pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n          lookbehind: true,\n          greedy: true\n        }, {\n          // https://docs.docker.com/engine/reference/builder/#from\n          pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n          lookbehind: true,\n          greedy: true\n        }, {\n          // https://docs.docker.com/engine/reference/builder/#onbuild\n          pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n          lookbehind: true,\n          greedy: true\n        }, {\n          pattern: /^\\w+/,\n          greedy: true\n        }],\n        'comment': commentRule,\n        'string': stringRule,\n        'variable': /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n        'operator': /\\\\$/m\n      }\n    },\n    'comment': commentRule\n  };\n  Prism.languages.dockerfile = Prism.languages.docker;\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-docker.js"],"names":["Prism","spaceAfterBackSlash","source","space","replace","string","option","stringRule","pattern","RegExp","greedy","commentRule","lookbehind","re","flags","languages","docker","inside","dockerfile"],"mappings":"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","sourcesContent":["(function (Prism) {\n\n\t// Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n\t// that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n\n\tvar spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source;\n\t// At least one space, comment, or line break\n\tvar space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source\n\t\t.replace(/<SP_BS>/g, function () { return spaceAfterBackSlash; });\n\n\tvar string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n\tvar option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () { return string; });\n\n\tvar stringRule = {\n\t\tpattern: RegExp(string),\n\t\tgreedy: true\n\t};\n\tvar commentRule = {\n\t\tpattern: /(^[ \\t]*)#.*/m,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t};\n\n\t/**\n\t * @param {string} source\n\t * @param {string} flags\n\t * @returns {RegExp}\n\t */\n\tfunction re(source, flags) {\n\t\tsource = source\n\t\t\t.replace(/<OPT>/g, function () { return option; })\n\t\t\t.replace(/<SP>/g, function () { return space; });\n\n\t\treturn RegExp(source, flags);\n\t}\n\n\tPrism.languages.docker = {\n\t\t'instruction': {\n\t\t\tpattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'options': {\n\t\t\t\t\tpattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tgreedy: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'property': {\n\t\t\t\t\t\t\tpattern: /(^|\\s)--[\\w-]+/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'string': [\n\t\t\t\t\t\t\tstringRule,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n\t\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'operator': /\\\\$/m,\n\t\t\t\t\t\t'punctuation': /=/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'keyword': [\n\t\t\t\t\t{\n\t\t\t\t\t\t// https://docs.docker.com/engine/reference/builder/#healthcheck\n\t\t\t\t\t\tpattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tgreedy: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// https://docs.docker.com/engine/reference/builder/#from\n\t\t\t\t\t\tpattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tgreedy: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// https://docs.docker.com/engine/reference/builder/#onbuild\n\t\t\t\t\t\tpattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tgreedy: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /^\\w+/,\n\t\t\t\t\t\tgreedy: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'comment': commentRule,\n\t\t\t\t'string': stringRule,\n\t\t\t\t'variable': /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n\t\t\t\t'operator': /\\\\$/m\n\t\t\t}\n\t\t},\n\t\t'comment': commentRule\n\t};\n\n\tPrism.languages.dockerfile = Prism.languages.docker;\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}