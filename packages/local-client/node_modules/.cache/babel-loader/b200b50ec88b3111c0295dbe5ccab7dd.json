{"ast":null,"code":"Prism.languages.haxe = Prism.languages.extend('clike', {\n  // Strings can be multi-line\n  'string': {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n        lookbehind: true,\n        inside: {\n          'interpolation': {\n            pattern: /^\\$\\w*/,\n            alias: 'variable'\n          } // See rest below\n\n        }\n      }\n    }\n  },\n  // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n  'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n  'operator': /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n});\nPrism.languages.insertBefore('haxe', 'class-name', {\n  'regex': {\n    pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n    greedy: true\n  }\n});\nPrism.languages.insertBefore('haxe', 'keyword', {\n  'preprocessor': {\n    pattern: /#\\w+/,\n    alias: 'builtin'\n  },\n  'metadata': {\n    pattern: /@:?\\w+/,\n    alias: 'symbol'\n  },\n  'reification': {\n    pattern: /\\$(?:\\w+|(?=\\{))/,\n    alias: 'variable'\n  }\n});\nPrism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;\ndelete Prism.languages.haxe['class-name'];","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-haxe.js"],"names":["Prism","languages","haxe","extend","pattern","greedy","inside","lookbehind","alias","insertBefore","rest"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,OAAvB,EAAgC;AACtD;AACA,YAAU;AACTC,IAAAA,OAAO,EAAE,mCADA;AAETC,IAAAA,MAAM,EAAE,IAFC;AAGTC,IAAAA,MAAM,EAAE;AACP,uBAAiB;AAChBF,QAAAA,OAAO,EAAE,8BADO;AAEhBG,QAAAA,UAAU,EAAE,IAFI;AAGhBD,QAAAA,MAAM,EAAE;AACP,2BAAiB;AAChBF,YAAAA,OAAO,EAAE,QADO;AAEhBI,YAAAA,KAAK,EAAE;AAFS,WADV,CAKP;;AALO;AAHQ;AADV;AAHC,GAF4C;AAmBtD;AACA,aAAW,uRApB2C;AAqBtD,cAAY;AArB0C,CAAhC,CAAvB;AAuBAR,KAAK,CAACC,SAAN,CAAgBQ,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AAClD,WAAS;AACRL,IAAAA,OAAO,EAAE,mCADD;AAERC,IAAAA,MAAM,EAAE;AAFA;AADyC,CAAnD;AAMAL,KAAK,CAACC,SAAN,CAAgBQ,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;AAC/C,kBAAgB;AACfL,IAAAA,OAAO,EAAE,MADM;AAEfI,IAAAA,KAAK,EAAE;AAFQ,GAD+B;AAK/C,cAAY;AACXJ,IAAAA,OAAO,EAAE,QADE;AAEXI,IAAAA,KAAK,EAAE;AAFI,GALmC;AAS/C,iBAAe;AACdJ,IAAAA,OAAO,EAAE,kBADK;AAEdI,IAAAA,KAAK,EAAE;AAFO;AATgC,CAAhD;AAcAR,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqB,QAArB,EAA+BI,MAA/B,CAAsC,eAAtC,EAAuDA,MAAvD,CAA8DI,IAA9D,GAAqEV,KAAK,CAACC,SAAN,CAAgBC,IAArF;AACA,OAAOF,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqB,YAArB,CAAP","sourcesContent":["Prism.languages.haxe = Prism.languages.extend('clike', {\n\t// Strings can be multi-line\n\t'string': {\n\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': {\n\t\t\t\t\t\tpattern: /^\\$\\w*/,\n\t\t\t\t\t\talias: 'variable'\n\t\t\t\t\t}\n\t\t\t\t\t// See rest below\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t// The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n\t'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n\t'operator': /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n});\nPrism.languages.insertBefore('haxe', 'class-name', {\n\t'regex': {\n\t\tpattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n\t\tgreedy: true\n\t}\n});\nPrism.languages.insertBefore('haxe', 'keyword', {\n\t'preprocessor': {\n\t\tpattern: /#\\w+/,\n\t\talias: 'builtin'\n\t},\n\t'metadata': {\n\t\tpattern: /@:?\\w+/,\n\t\talias: 'symbol'\n\t},\n\t'reification': {\n\t\tpattern: /\\$(?:\\w+|(?=\\{))/,\n\t\talias: 'variable'\n\t}\n});\nPrism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;\ndelete Prism.languages.haxe['class-name'];\n"]},"metadata":{},"sourceType":"script"}