{"ast":null,"code":"(function (Prism) {\n  // TODO:\n  // - Add CSS highlighting inside <style> tags\n  // - Add support for multi-line code blocks\n  // - Add support for interpolation #{} and !{}\n  // - Add support for tag interpolation #[]\n  // - Add explicit support for plain text using |\n  // - Add support for markup embedded in plain text\n  Prism.languages.pug = {\n    // Multiline stuff should appear before the rest\n    // This handles both single-line and multi-line comments\n    'comment': {\n      pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n      lookbehind: true\n    },\n    // All the tag-related part is in lookbehind\n    // so that it can be highlighted by the \"tag\" pattern\n    'multiline-script': {\n      pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    // See at the end of the file for known filters\n    'filter': {\n      pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: true,\n      inside: {\n        'filter-name': {\n          pattern: /^:[\\w-]+/,\n          alias: 'variable'\n        }\n      }\n    },\n    'multiline-plain-text': {\n      pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: true\n    },\n    'markup': {\n      pattern: /(^[\\t ]*)<.+/m,\n      lookbehind: true,\n      inside: Prism.languages.markup\n    },\n    'doctype': {\n      pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n      lookbehind: true\n    },\n    // This handle all conditional and loop keywords\n    'flow-control': {\n      pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n      lookbehind: true,\n      inside: {\n        'each': {\n          pattern: /^each .+? in\\b/,\n          inside: {\n            'keyword': /\\b(?:each|in)\\b/,\n            'punctuation': /,/\n          }\n        },\n        'branch': {\n          pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n          alias: 'keyword'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    'keyword': {\n      pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n      lookbehind: true\n    },\n    'mixin': [// Declaration\n    {\n      pattern: /(^[\\t ]*)mixin .+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^mixin/,\n        'function': /\\w+(?=\\s*\\(|\\s*$)/,\n        'punctuation': /[(),.]/\n      }\n    }, // Usage\n    {\n      pattern: /(^[\\t ]*)\\+.+/m,\n      lookbehind: true,\n      inside: {\n        'name': {\n          pattern: /^\\+\\w+/,\n          alias: 'function'\n        },\n        rest: Prism.languages.javascript\n      }\n    }],\n    'script': {\n      pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'plain-text': {\n      pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n      lookbehind: true\n    },\n    'tag': {\n      pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n      lookbehind: true,\n      inside: {\n        'attributes': [{\n          pattern: /&[^(]+\\([^)]+\\)/,\n          inside: Prism.languages.javascript\n        }, {\n          pattern: /\\([^)]+\\)/,\n          inside: {\n            'attr-value': {\n              pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n              lookbehind: true,\n              inside: Prism.languages.javascript\n            },\n            'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n            'punctuation': /[!=(),]+/\n          }\n        }],\n        'punctuation': /:/,\n        'attr-id': /#[\\w\\-]+/,\n        'attr-class': /\\.[\\w\\-]+/\n      }\n    },\n    'code': [{\n      pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }],\n    'punctuation': /[.\\-!=|]+/\n  };\n  var filter_pattern = /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/.source; // Non exhaustive list of available filters and associated languages\n\n  var filters = [{\n    filter: 'atpl',\n    language: 'twig'\n  }, {\n    filter: 'coffee',\n    language: 'coffeescript'\n  }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {\n    filter: 'sass',\n    language: 'scss'\n  }, 'stylus'];\n  var all_filters = {};\n\n  for (var i = 0, l = filters.length; i < l; i++) {\n    var filter = filters[i];\n    filter = typeof filter === 'string' ? {\n      filter: filter,\n      language: filter\n    } : filter;\n\n    if (Prism.languages[filter.language]) {\n      all_filters['filter-' + filter.filter] = {\n        pattern: RegExp(filter_pattern.replace('<filter_name>', function () {\n          return filter.filter;\n        }), 'm'),\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          rest: Prism.languages[filter.language]\n        }\n      };\n    }\n  }\n\n  Prism.languages.insertBefore('pug', 'filter', all_filters);\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-pug.js"],"names":["Prism","languages","pug","pattern","lookbehind","inside","javascript","alias","markup","rest","filter_pattern","source","filters","filter","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAAA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,GAAsB;AAErB;AAEA;AACA,eAAW;AACVC,MAAAA,OAAO,EAAE,8CADC;AAEVC,MAAAA,UAAU,EAAE;AAFF,KALU;AAUrB;AACA;AACA,wBAAoB;AACnBD,MAAAA,OAAO,EAAE,qFADU;AAEnBC,MAAAA,UAAU,EAAE,IAFO;AAGnBC,MAAAA,MAAM,EAAEL,KAAK,CAACC,SAAN,CAAgBK;AAHL,KAZC;AAkBrB;AACA,cAAU;AACTH,MAAAA,OAAO,EAAE,sEADA;AAETC,MAAAA,UAAU,EAAE,IAFH;AAGTC,MAAAA,MAAM,EAAE;AACP,uBAAe;AACdF,UAAAA,OAAO,EAAE,UADK;AAEdI,UAAAA,KAAK,EAAE;AAFO;AADR;AAHC,KAnBW;AA8BrB,4BAAwB;AACvBJ,MAAAA,OAAO,EAAE,oFADc;AAEvBC,MAAAA,UAAU,EAAE;AAFW,KA9BH;AAkCrB,cAAU;AACTD,MAAAA,OAAO,EAAE,eADA;AAETC,MAAAA,UAAU,EAAE,IAFH;AAGTC,MAAAA,MAAM,EAAEL,KAAK,CAACC,SAAN,CAAgBO;AAHf,KAlCW;AAuCrB,eAAW;AACVL,MAAAA,OAAO,EAAE,iCADC;AAEVC,MAAAA,UAAU,EAAE;AAFF,KAvCU;AA4CrB;AACA,oBAAgB;AACfD,MAAAA,OAAO,EAAE,qEADM;AAEfC,MAAAA,UAAU,EAAE,IAFG;AAGfC,MAAAA,MAAM,EAAE;AACP,gBAAQ;AACPF,UAAAA,OAAO,EAAE,gBADF;AAEPE,UAAAA,MAAM,EAAE;AACP,uBAAW,iBADJ;AAEP,2BAAe;AAFR;AAFD,SADD;AAQP,kBAAU;AACTF,UAAAA,OAAO,EAAE,+CADA;AAETI,UAAAA,KAAK,EAAE;AAFE,SARH;AAYPE,QAAAA,IAAI,EAAET,KAAK,CAACC,SAAN,CAAgBK;AAZf;AAHO,KA7CK;AA+DrB,eAAW;AACVH,MAAAA,OAAO,EAAE,wDADC;AAEVC,MAAAA,UAAU,EAAE;AAFF,KA/DU;AAmErB,aAAS,CACR;AACA;AACCD,MAAAA,OAAO,EAAE,oBADV;AAECC,MAAAA,UAAU,EAAE,IAFb;AAGCC,MAAAA,MAAM,EAAE;AACP,mBAAW,QADJ;AAEP,oBAAY,mBAFL;AAGP,uBAAe;AAHR;AAHT,KAFQ,EAWR;AACA;AACCF,MAAAA,OAAO,EAAE,gBADV;AAECC,MAAAA,UAAU,EAAE,IAFb;AAGCC,MAAAA,MAAM,EAAE;AACP,gBAAQ;AACPF,UAAAA,OAAO,EAAE,QADF;AAEPI,UAAAA,KAAK,EAAE;AAFA,SADD;AAKPE,QAAAA,IAAI,EAAET,KAAK,CAACC,SAAN,CAAgBK;AALf;AAHT,KAZQ,CAnEY;AA2FrB,cAAU;AACTH,MAAAA,OAAO,EAAE,kDADA;AAETC,MAAAA,UAAU,EAAE,IAFH;AAGTC,MAAAA,MAAM,EAAEL,KAAK,CAACC,SAAN,CAAgBK;AAHf,KA3FW;AAiGrB,kBAAc;AACbH,MAAAA,OAAO,EAAE,mEADI;AAEbC,MAAAA,UAAU,EAAE;AAFC,KAjGO;AAqGrB,WAAO;AACND,MAAAA,OAAO,EAAE,8DADH;AAENC,MAAAA,UAAU,EAAE,IAFN;AAGNC,MAAAA,MAAM,EAAE;AACP,sBAAc,CACb;AACCF,UAAAA,OAAO,EAAE,iBADV;AAECE,UAAAA,MAAM,EAAEL,KAAK,CAACC,SAAN,CAAgBK;AAFzB,SADa,EAKb;AACCH,UAAAA,OAAO,EAAE,WADV;AAECE,UAAAA,MAAM,EAAE;AACP,0BAAc;AACbF,cAAAA,OAAO,EAAE,sCADI;AAEbC,cAAAA,UAAU,EAAE,IAFC;AAGbC,cAAAA,MAAM,EAAEL,KAAK,CAACC,SAAN,CAAgBK;AAHX,aADP;AAMP,yBAAa,0BANN;AAOP,2BAAe;AAPR;AAFT,SALa,CADP;AAmBP,uBAAe,GAnBR;AAoBP,mBAAW,UApBJ;AAqBP,sBAAc;AArBP;AAHF,KArGc;AAgIrB,YAAQ,CACP;AACCH,MAAAA,OAAO,EAAE,uBADV;AAECC,MAAAA,UAAU,EAAE,IAFb;AAGCC,MAAAA,MAAM,EAAEL,KAAK,CAACC,SAAN,CAAgBK;AAHzB,KADO,CAhIa;AAuIrB,mBAAe;AAvIM,GAAtB;AA0IA,MAAII,cAAc,GAAG,iFAAiFC,MAAtG,CAnJiB,CAqJjB;;AACA,MAAIC,OAAO,GAAG,CACb;AAAEC,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,QAAQ,EAAE;AAA5B,GADa,EAEb;AAAED,IAAAA,MAAM,EAAE,QAAV;AAAoBC,IAAAA,QAAQ,EAAE;AAA9B,GAFa,EAGb,KAHa,EAIb,YAJa,EAKb,MALa,EAMb,YANa,EAOb,UAPa,EAQb;AAAED,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,QAAQ,EAAE;AAA5B,GARa,EASb,QATa,CAAd;AAWA,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,OAAO,CAACM,MAA5B,EAAoCF,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,EAA5C,EAAgD;AAC/C,QAAIH,MAAM,GAAGD,OAAO,CAACI,CAAD,CAApB;AACAH,IAAAA,MAAM,GAAG,OAAOA,MAAP,KAAkB,QAAlB,GAA6B;AAAEA,MAAAA,MAAM,EAAEA,MAAV;AAAkBC,MAAAA,QAAQ,EAAED;AAA5B,KAA7B,GAAoEA,MAA7E;;AACA,QAAIb,KAAK,CAACC,SAAN,CAAgBY,MAAM,CAACC,QAAvB,CAAJ,EAAsC;AACrCC,MAAAA,WAAW,CAAC,YAAYF,MAAM,CAACA,MAApB,CAAX,GAAyC;AACxCV,QAAAA,OAAO,EAAEgB,MAAM,CAACT,cAAc,CAACU,OAAf,CAAuB,eAAvB,EAAwC,YAAY;AAAE,iBAAOP,MAAM,CAACA,MAAd;AAAuB,SAA7E,CAAD,EAAiF,GAAjF,CADyB;AAExCT,QAAAA,UAAU,EAAE,IAF4B;AAGxCC,QAAAA,MAAM,EAAE;AACP,yBAAe;AACdF,YAAAA,OAAO,EAAE,UADK;AAEdI,YAAAA,KAAK,EAAE;AAFO,WADR;AAKPE,UAAAA,IAAI,EAAET,KAAK,CAACC,SAAN,CAAgBY,MAAM,CAACC,QAAvB;AALC;AAHgC,OAAzC;AAWA;AACD;;AAEDd,EAAAA,KAAK,CAACC,SAAN,CAAgBoB,YAAhB,CAA6B,KAA7B,EAAoC,QAApC,EAA8CN,WAA9C;AAEA,CAtLA,EAsLCf,KAtLD,CAAD","sourcesContent":["(function (Prism) {\n\t// TODO:\n\t// - Add CSS highlighting inside <style> tags\n\t// - Add support for multi-line code blocks\n\t// - Add support for interpolation #{} and !{}\n\t// - Add support for tag interpolation #[]\n\t// - Add explicit support for plain text using |\n\t// - Add support for markup embedded in plain text\n\n\tPrism.languages.pug = {\n\n\t\t// Multiline stuff should appear before the rest\n\n\t\t// This handles both single-line and multi-line comments\n\t\t'comment': {\n\t\t\tpattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t// All the tag-related part is in lookbehind\n\t\t// so that it can be highlighted by the \"tag\" pattern\n\t\t'multiline-script': {\n\t\t\tpattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\n\t\t// See at the end of the file for known filters\n\t\t'filter': {\n\t\t\tpattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'filter-name': {\n\t\t\t\t\tpattern: /^:[\\w-]+/,\n\t\t\t\t\talias: 'variable'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t'multiline-plain-text': {\n\t\t\tpattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'markup': {\n\t\t\tpattern: /(^[\\t ]*)<.+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.markup\n\t\t},\n\t\t'doctype': {\n\t\t\tpattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t// This handle all conditional and loop keywords\n\t\t'flow-control': {\n\t\t\tpattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'each': {\n\t\t\t\t\tpattern: /^each .+? in\\b/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'keyword': /\\b(?:each|in)\\b/,\n\t\t\t\t\t\t'punctuation': /,/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'branch': {\n\t\t\t\t\tpattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.javascript\n\t\t\t}\n\t\t},\n\t\t'keyword': {\n\t\t\tpattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'mixin': [\n\t\t\t// Declaration\n\t\t\t{\n\t\t\t\tpattern: /(^[\\t ]*)mixin .+/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'keyword': /^mixin/,\n\t\t\t\t\t'function': /\\w+(?=\\s*\\(|\\s*$)/,\n\t\t\t\t\t'punctuation': /[(),.]/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// Usage\n\t\t\t{\n\t\t\t\tpattern: /(^[\\t ]*)\\+.+/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'name': {\n\t\t\t\t\t\tpattern: /^\\+\\w+/,\n\t\t\t\t\t\talias: 'function'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'script': {\n\t\t\tpattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\n\t\t'plain-text': {\n\t\t\tpattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'tag': {\n\t\t\tpattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attributes': [\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /&[^(]+\\([^)]+\\)/,\n\t\t\t\t\t\tinside: Prism.languages.javascript\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /\\([^)]+\\)/,\n\t\t\t\t\t\tinside: {\n\t\t\t\t\t\t\t'attr-value': {\n\t\t\t\t\t\t\t\tpattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n\t\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\t\tinside: Prism.languages.javascript\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n\t\t\t\t\t\t\t'punctuation': /[!=(),]+/\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'attr-id': /#[\\w\\-]+/,\n\t\t\t\t'attr-class': /\\.[\\w\\-]+/\n\t\t\t}\n\t\t},\n\t\t'code': [\n\t\t\t{\n\t\t\t\tpattern: /(^[\\t ]*(?:-|!?=)).+/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: Prism.languages.javascript\n\t\t\t}\n\t\t],\n\t\t'punctuation': /[.\\-!=|]+/\n\t};\n\n\tvar filter_pattern = /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/.source;\n\n\t// Non exhaustive list of available filters and associated languages\n\tvar filters = [\n\t\t{ filter: 'atpl', language: 'twig' },\n\t\t{ filter: 'coffee', language: 'coffeescript' },\n\t\t'ejs',\n\t\t'handlebars',\n\t\t'less',\n\t\t'livescript',\n\t\t'markdown',\n\t\t{ filter: 'sass', language: 'scss' },\n\t\t'stylus'\n\t];\n\tvar all_filters = {};\n\tfor (var i = 0, l = filters.length; i < l; i++) {\n\t\tvar filter = filters[i];\n\t\tfilter = typeof filter === 'string' ? { filter: filter, language: filter } : filter;\n\t\tif (Prism.languages[filter.language]) {\n\t\t\tall_filters['filter-' + filter.filter] = {\n\t\t\t\tpattern: RegExp(filter_pattern.replace('<filter_name>', function () { return filter.filter; }), 'm'),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'filter-name': {\n\t\t\t\t\t\tpattern: /^:[\\w-]+/,\n\t\t\t\t\t\talias: 'variable'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages[filter.language]\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\tPrism.languages.insertBefore('pug', 'filter', all_filters);\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}