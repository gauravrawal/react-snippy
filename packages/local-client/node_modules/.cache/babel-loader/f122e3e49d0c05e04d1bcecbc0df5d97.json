{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport React, { Component } from 'react';\nimport classnames from 'classnames';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markdown.js';\nimport hotkeys from './hotkeys';\nimport \"./index.css\";\n\nvar TextArea = /*#__PURE__*/function (_Component) {\n  _inherits(TextArea, _Component);\n\n  var _super = _createSuper(TextArea);\n\n  function TextArea(props) {\n    var _this;\n\n    _classCallCheck(this, TextArea);\n\n    _this = _super.call(this, props);\n    _this.preElm = /*#__PURE__*/React.createRef();\n    _this.warp = /*#__PURE__*/React.createRef();\n    _this.text = /*#__PURE__*/React.createRef();\n    _this.state = {\n      value: props.value || ''\n    };\n    return _this;\n  }\n\n  _createClass(TextArea, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var _this2 = this;\n\n      var onChange = this.props.onChange;\n      this.setState({\n        value: e.target.value\n      }, function () {\n        onChange && onChange(_this2.state.value);\n\n        _this2.highlight();\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.props.autoFocus && this.text.current) {\n                  this.text.current.focus();\n                }\n\n                this.highlight();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return nextProps.value !== this.props.value || nextState.value !== this.state.value;\n    }\n  }, {\n    key: \"highlight\",\n    value: function () {\n      var _highlight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var value, pre, html;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = this.state.value;\n                pre = this.preElm.current;\n                html = Prism.highlight(value, Prism.languages.markdown, 'markdown');\n                pre.innerHTML = \"\".concat(html, \"<br />\");\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function highlight() {\n        return _highlight.apply(this, arguments);\n      }\n\n      return highlight;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          className = _this$props.className,\n          onChange = _this$props.onChange,\n          onScroll = _this$props.onScroll,\n          tabSize = _this$props.tabSize,\n          style = _this$props.style,\n          otherProps = _objectWithoutProperties(_this$props, [\"prefixCls\", \"className\", \"onChange\", \"onScroll\", \"tabSize\", \"style\"]);\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.warp,\n        className: classnames(\"\".concat(prefixCls, \"-aree\"), className),\n        onScroll: onScroll\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classnames(\"\".concat(prefixCls, \"-text\"))\n      }, /*#__PURE__*/React.createElement(\"pre\", {\n        ref: this.preElm,\n        className: classnames(\"\".concat(prefixCls, \"-text-pre\"), 'wmde-markdown-color')\n      }), /*#__PURE__*/React.createElement(\"textarea\", _extends({}, otherProps, {\n        ref: this.text,\n        onKeyDown: hotkeys.bind(this, {\n          tabSize: tabSize\n        }),\n        className: \"\".concat(prefixCls, \"-text-input\"),\n        value: this.state.value,\n        onChange: this.handleChange.bind(this)\n      }))));\n    }\n  }]);\n\n  return TextArea;\n}(Component);\n\nTextArea.defaultProps = {\n  tabSize: 2,\n  autoFocus: true,\n  spellCheck: false\n};\nTextArea.state = void 0;\nexport { TextArea as default };","map":{"version":3,"sources":["../../../../src/components/TextArea/index.tsx"],"names":["TextArea","Component","preElm","React","warp","text","defaultProps","tabSize","autoFocus","spellCheck","state","value","props","e","onChange","nextProps","nextState","pre","current","html","Prism","prefixCls","className","onScroll","style","otherProps","classnames"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markdown.js';\nimport { IProps } from '../../utils';\nimport hotkeys, { IHotkeyOptions } from './hotkeys';\nimport './index.less';\n\nexport interface ITextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onChange' | 'onScroll'>, IProps {\n  onChange?: (value?: string) => void;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  value?: string;\n  tabSize?: number;\n}\n\nexport interface ITextAreaState {\n  value?: string;\n}\n\nexport default class TextArea extends Component<ITextAreaProps, ITextAreaState> {\n  public preElm = React.createRef<HTMLPreElement>();\n  public warp = React.createRef<HTMLDivElement>();\n  public text = React.createRef<HTMLTextAreaElement>();\n  public static defaultProps: ITextAreaProps = {\n    tabSize: 2,\n    autoFocus: true,\n    spellCheck: false,\n  }\n  public static state: ITextAreaState;\n  public constructor(props: ITextAreaProps) {\n    super(props);\n    this.state = {\n      value: props.value || '',\n    };\n  }\n  private handleChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    const { onChange } = this.props;\n    this.setState({ value: e.target.value }, () => {\n      onChange && onChange(this.state.value);\n      this.highlight();\n    });\n  }\n  public async componentDidMount() {\n    if (this.props.autoFocus && this.text.current) {\n      this.text.current.focus();\n    }\n    this.highlight();\n  }\n  public shouldComponentUpdate(nextProps: ITextAreaProps, nextState: ITextAreaState) {\n    return nextProps.value !== this.props.value || nextState.value !== this.state.value;\n  }\n  public async highlight() {\n    const { value } = this.state;\n    const pre = this.preElm.current;\n    const html = Prism.highlight(value as string, Prism.languages.markdown, 'markdown');\n    pre!.innerHTML = `${html}<br />`;\n  }\n  render() {\n    const { prefixCls, className, onChange, onScroll, tabSize, style, ...otherProps } = this.props;\n    return (\n      <div ref={this.warp} className={classnames(`${prefixCls}-aree`, className)} onScroll={onScroll}>\n        <div className={classnames(`${prefixCls}-text`)}>\n          <pre\n            ref={this.preElm}\n            className={classnames(`${prefixCls}-text-pre`, 'wmde-markdown-color')}\n          />\n          <textarea\n            {...otherProps}\n            ref={this.text}\n            onKeyDown={hotkeys.bind(this, { tabSize } as IHotkeyOptions)}\n            className={`${prefixCls}-text-input`}\n            value={this.state.value}\n            onChange={this.handleChange.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}