{"ast":null,"code":"!function (e) {\n  var n = e.languages.parser = e.languages.extend(\"markup\", {\n    keyword: {\n      pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n      lookbehind: !0\n    },\n    variable: {\n      pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\.|:+/\n      }\n    },\n    function: {\n      pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: !0,\n      inside: {\n        keyword: {\n          pattern: /(^@)(?:GET_|SET_)/,\n          lookbehind: !0\n        },\n        punctuation: /\\.|:+/\n      }\n    },\n    escape: {\n      pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n      alias: \"builtin\"\n    },\n    punctuation: /[\\[\\](){};]/\n  });\n  n = e.languages.insertBefore(\"parser\", \"keyword\", {\n    \"parser-comment\": {\n      pattern: /(\\s)#.*/,\n      lookbehind: !0,\n      alias: \"comment\"\n    },\n    expression: {\n      pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n      greedy: !0,\n      lookbehind: !0,\n      inside: {\n        string: {\n          pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n          lookbehind: !0\n        },\n        keyword: n.keyword,\n        variable: n.variable,\n        function: n.function,\n        boolean: /\\b(?:true|false)\\b/,\n        number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n        escape: n.escape,\n        operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n        punctuation: n.punctuation\n      }\n    }\n  }), e.languages.insertBefore(\"inside\", \"punctuation\", {\n    expression: n.expression,\n    keyword: n.keyword,\n    variable: n.variable,\n    function: n.function,\n    escape: n.escape,\n    \"parser-punctuation\": {\n      pattern: n.punctuation,\n      alias: \"punctuation\"\n    }\n  }, n.tag.inside[\"attr-value\"]);\n}(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-parser.min.js"],"names":["e","n","languages","parser","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","expression","greedy","string","boolean","number","operator","tag","Prism"],"mappings":"AAAA,CAAC,UAASA,CAAT,EAAW;AAAC,MAAIC,CAAC,GAACD,CAAC,CAACE,SAAF,CAAYC,MAAZ,GAAmBH,CAAC,CAACE,SAAF,CAAYE,MAAZ,CAAmB,QAAnB,EAA4B;AAACC,IAAAA,OAAO,EAAC;AAACC,MAAAA,OAAO,EAAC,8GAAT;AAAwHC,MAAAA,UAAU,EAAC,CAAC;AAApI,KAAT;AAAgJC,IAAAA,QAAQ,EAAC;AAACF,MAAAA,OAAO,EAAC,2DAAT;AAAqEC,MAAAA,UAAU,EAAC,CAAC,CAAjF;AAAmFE,MAAAA,MAAM,EAAC;AAACC,QAAAA,WAAW,EAAC;AAAb;AAA1F,KAAzJ;AAA0QC,IAAAA,QAAQ,EAAC;AAACL,MAAAA,OAAO,EAAC,gDAAT;AAA0DC,MAAAA,UAAU,EAAC,CAAC,CAAtE;AAAwEE,MAAAA,MAAM,EAAC;AAACJ,QAAAA,OAAO,EAAC;AAACC,UAAAA,OAAO,EAAC,mBAAT;AAA6BC,UAAAA,UAAU,EAAC,CAAC;AAAzC,SAAT;AAAqDG,QAAAA,WAAW,EAAC;AAAjE;AAA/E,KAAnR;AAA6aE,IAAAA,MAAM,EAAC;AAACN,MAAAA,OAAO,EAAC,oCAAT;AAA8CO,MAAAA,KAAK,EAAC;AAApD,KAApb;AAAmfH,IAAAA,WAAW,EAAC;AAA/f,GAA5B,CAAzB;AAAokBT,EAAAA,CAAC,GAACD,CAAC,CAACE,SAAF,CAAYY,YAAZ,CAAyB,QAAzB,EAAkC,SAAlC,EAA4C;AAAC,sBAAiB;AAACR,MAAAA,OAAO,EAAC,SAAT;AAAmBC,MAAAA,UAAU,EAAC,CAAC,CAA/B;AAAiCM,MAAAA,KAAK,EAAC;AAAvC,KAAlB;AAAoEE,IAAAA,UAAU,EAAC;AAACT,MAAAA,OAAO,EAAC,sDAAT;AAAgEU,MAAAA,MAAM,EAAC,CAAC,CAAxE;AAA0ET,MAAAA,UAAU,EAAC,CAAC,CAAtF;AAAwFE,MAAAA,MAAM,EAAC;AAACQ,QAAAA,MAAM,EAAC;AAACX,UAAAA,OAAO,EAAC,0CAAT;AAAoDC,UAAAA,UAAU,EAAC,CAAC;AAAhE,SAAR;AAA2EF,QAAAA,OAAO,EAACJ,CAAC,CAACI,OAArF;AAA6FG,QAAAA,QAAQ,EAACP,CAAC,CAACO,QAAxG;AAAiHG,QAAAA,QAAQ,EAACV,CAAC,CAACU,QAA5H;AAAqIO,QAAAA,OAAO,EAAC,oBAA7I;AAAkKC,QAAAA,MAAM,EAAC,iDAAzK;AAA2NP,QAAAA,MAAM,EAACX,CAAC,CAACW,MAApO;AAA2OQ,QAAAA,QAAQ,EAAC,gGAApP;AAAqVV,QAAAA,WAAW,EAACT,CAAC,CAACS;AAAnW;AAA/F;AAA/E,GAA5C,CAAF,EAA+kBV,CAAC,CAACE,SAAF,CAAYY,YAAZ,CAAyB,QAAzB,EAAkC,aAAlC,EAAgD;AAACC,IAAAA,UAAU,EAACd,CAAC,CAACc,UAAd;AAAyBV,IAAAA,OAAO,EAACJ,CAAC,CAACI,OAAnC;AAA2CG,IAAAA,QAAQ,EAACP,CAAC,CAACO,QAAtD;AAA+DG,IAAAA,QAAQ,EAACV,CAAC,CAACU,QAA1E;AAAmFC,IAAAA,MAAM,EAACX,CAAC,CAACW,MAA5F;AAAmG,0BAAqB;AAACN,MAAAA,OAAO,EAACL,CAAC,CAACS,WAAX;AAAuBG,MAAAA,KAAK,EAAC;AAA7B;AAAxH,GAAhD,EAAqNZ,CAAC,CAACoB,GAAF,CAAMZ,MAAN,CAAa,YAAb,CAArN,CAA/kB;AAAg0B,CAAh5C,CAAi5Ca,KAAj5C,CAAD","sourcesContent":["!function(e){var n=e.languages.parser=e.languages.extend(\"markup\",{keyword:{pattern:/(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,lookbehind:!0},variable:{pattern:/(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{punctuation:/\\.|:+/}},function:{pattern:/(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{keyword:{pattern:/(^@)(?:GET_|SET_)/,lookbehind:!0},punctuation:/\\.|:+/}},escape:{pattern:/\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,alias:\"builtin\"},punctuation:/[\\[\\](){};]/});n=e.languages.insertBefore(\"parser\",\"keyword\",{\"parser-comment\":{pattern:/(\\s)#.*/,lookbehind:!0,alias:\"comment\"},expression:{pattern:/(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,greedy:!0,lookbehind:!0,inside:{string:{pattern:/(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,lookbehind:!0},keyword:n.keyword,variable:n.variable,function:n.function,boolean:/\\b(?:true|false)\\b/,number:/\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,escape:n.escape,operator:/[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,punctuation:n.punctuation}}}),e.languages.insertBefore(\"inside\",\"punctuation\",{expression:n.expression,keyword:n.keyword,variable:n.variable,function:n.function,escape:n.escape,\"parser-punctuation\":{pattern:n.punctuation,alias:\"punctuation\"}},n.tag.inside[\"attr-value\"])}(Prism);"]},"metadata":{},"sourceType":"script"}