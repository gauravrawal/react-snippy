{"ast":null,"code":"// Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n// As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n(function (Prism) {\n  // PromQL Aggregation Operators\n  // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n  var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile']; // PromQL vector matching + the by and without clauses\n  // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n\n  var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without']; // PromQL offset modifier\n  // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n\n  var offsetModifier = ['offset'];\n  var keywords = aggregations.concat(vectorMatching, offsetModifier);\n  Prism.languages.promql = {\n    'comment': {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true\n    },\n    'vector-match': {\n      // Match the comma-separated label lists inside vector matching:\n      pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\n      lookbehind: true,\n      inside: {\n        'label-key': {\n          pattern: /\\b[^,]*\\b/,\n          alias: 'attr-name'\n        },\n        'punctuation': /[(),]/\n      }\n    },\n    'context-labels': {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        'label-key': {\n          pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n          alias: 'attr-name'\n        },\n        'label-value': {\n          pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n          greedy: true,\n          alias: 'attr-value'\n        },\n        'punctuation': /\\{|\\}|=~?|![=~]|,/\n      }\n    },\n    'context-range': [{\n      pattern: /\\[[\\w\\s:]+\\]/,\n      // [1m]\n      inside: {\n        'punctuation': /\\[|\\]|:/,\n        'range-duration': {\n          pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n          alias: 'number'\n        }\n      }\n    }, {\n      pattern: /(\\boffset\\s+)\\w+/,\n      // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n          alias: 'number'\n        }\n      }\n    }],\n    'keyword': new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n    'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    'number': /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n    'operator': /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|unless|or)\\b/i,\n    'punctuation': /[{};()`,.[\\]]/\n  };\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-promql.js"],"names":["Prism","aggregations","vectorMatching","offsetModifier","keywords","concat","languages","promql","pattern","lookbehind","RegExp","join","inside","alias","greedy"],"mappings":"AAAA;AACA;AAEC,WAAUA,KAAV,EAAiB;AACjB;AACA;AACA,MAAIC,YAAY,GAAG,CAClB,KADkB,EAElB,KAFkB,EAGlB,KAHkB,EAIlB,KAJkB,EAKlB,OALkB,EAMlB,QANkB,EAOlB,QAPkB,EAQlB,OARkB,EASlB,cATkB,EAUlB,SAVkB,EAWlB,MAXkB,EAYlB,UAZkB,CAAnB,CAHiB,CAkBjB;AACA;;AACA,MAAIC,cAAc,GAAG,CACpB,IADoB,EAEpB,UAFoB,EAGpB,aAHoB,EAIpB,YAJoB,EAKpB,IALoB,EAMpB,SANoB,CAArB,CApBiB,CA6BjB;AACA;;AACA,MAAIC,cAAc,GAAG,CAAC,QAAD,CAArB;AAEA,MAAIC,QAAQ,GAAGH,YAAY,CAACI,MAAb,CAAoBH,cAApB,EAAoCC,cAApC,CAAf;AAEAH,EAAAA,KAAK,CAACM,SAAN,CAAgBC,MAAhB,GAAyB;AACxB,eAAW;AACVC,MAAAA,OAAO,EAAE,eADC;AAEVC,MAAAA,UAAU,EAAE;AAFF,KADa;AAKxB,oBAAgB;AACf;AACAD,MAAAA,OAAO,EAAE,IAAIE,MAAJ,CAAW,SAASR,cAAc,CAACS,IAAf,CAAoB,GAApB,CAAT,GAAoC,mBAA/C,CAFM;AAGfF,MAAAA,UAAU,EAAE,IAHG;AAIfG,MAAAA,MAAM,EAAE;AACP,qBAAa;AACZJ,UAAAA,OAAO,EAAE,WADG;AAEZK,UAAAA,KAAK,EAAE;AAFK,SADN;AAKP,uBAAe;AALR;AAJO,KALQ;AAiBxB,sBAAkB;AACjBL,MAAAA,OAAO,EAAE,YADQ;AAEjBI,MAAAA,MAAM,EAAE;AACP,qBAAa;AACZJ,UAAAA,OAAO,EAAE,+BADG;AAEZK,UAAAA,KAAK,EAAE;AAFK,SADN;AAKP,uBAAe;AACdL,UAAAA,OAAO,EAAE,oCADK;AAEdM,UAAAA,MAAM,EAAE,IAFM;AAGdD,UAAAA,KAAK,EAAE;AAHO,SALR;AAUP,uBAAe;AAVR;AAFS,KAjBM;AAgCxB,qBAAiB,CAChB;AACCL,MAAAA,OAAO,EAAE,cADV;AAC0B;AACzBI,MAAAA,MAAM,EAAE;AACP,uBAAe,SADR;AAEP,0BAAkB;AACjBJ,UAAAA,OAAO,EAAE,8BADQ;AAEjBK,UAAAA,KAAK,EAAE;AAFU;AAFX;AAFT,KADgB,EAWhB;AACCL,MAAAA,OAAO,EAAE,kBADV;AAC8B;AAC7BC,MAAAA,UAAU,EAAE,IAFb;AAGCG,MAAAA,MAAM,EAAE;AACP,0BAAkB;AACjBJ,UAAAA,OAAO,EAAE,8BADQ;AAEjBK,UAAAA,KAAK,EAAE;AAFU;AADX;AAHT,KAXgB,CAhCO;AAsDxB,eAAW,IAAIH,MAAJ,CAAW,WAAWN,QAAQ,CAACO,IAAT,CAAc,GAAd,CAAX,GAAgC,MAA3C,EAAmD,GAAnD,CAtDa;AAuDxB,gBAAY,uBAvDY;AAwDxB,cAAU,mFAxDc;AAyDxB,gBAAY,kDAzDY;AA0DxB,mBAAe;AA1DS,GAAzB;AA4DA,CA/FA,EA+FCX,KA/FD,CAAD","sourcesContent":["// Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n// As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n\n(function (Prism) {\n\t// PromQL Aggregation Operators\n\t// (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n\tvar aggregations = [\n\t\t'sum',\n\t\t'min',\n\t\t'max',\n\t\t'avg',\n\t\t'group',\n\t\t'stddev',\n\t\t'stdvar',\n\t\t'count',\n\t\t'count_values',\n\t\t'bottomk',\n\t\t'topk',\n\t\t'quantile'\n\t];\n\n\t// PromQL vector matching + the by and without clauses\n\t// (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n\tvar vectorMatching = [\n\t\t'on',\n\t\t'ignoring',\n\t\t'group_right',\n\t\t'group_left',\n\t\t'by',\n\t\t'without',\n\t];\n\n\t// PromQL offset modifier\n\t// (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n\tvar offsetModifier = ['offset'];\n\n\tvar keywords = aggregations.concat(vectorMatching, offsetModifier);\n\n\tPrism.languages.promql = {\n\t\t'comment': {\n\t\t\tpattern: /(^[ \\t]*)#.*/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'vector-match': {\n\t\t\t// Match the comma-separated label lists inside vector matching:\n\t\t\tpattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'label-key': {\n\t\t\t\t\tpattern: /\\b[^,]*\\b/,\n\t\t\t\t\talias: 'attr-name',\n\t\t\t\t},\n\t\t\t\t'punctuation': /[(),]/\n\t\t\t},\n\t\t},\n\t\t'context-labels': {\n\t\t\tpattern: /\\{[^{}]*\\}/,\n\t\t\tinside: {\n\t\t\t\t'label-key': {\n\t\t\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n\t\t\t\t\talias: 'attr-name',\n\t\t\t\t},\n\t\t\t\t'label-value': {\n\t\t\t\t\tpattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n\t\t\t\t\tgreedy: true,\n\t\t\t\t\talias: 'attr-value',\n\t\t\t\t},\n\t\t\t\t'punctuation': /\\{|\\}|=~?|![=~]|,/,\n\t\t\t},\n\t\t},\n\t\t'context-range': [\n\t\t\t{\n\t\t\t\tpattern: /\\[[\\w\\s:]+\\]/, // [1m]\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\[|\\]|:/,\n\t\t\t\t\t'range-duration': {\n\t\t\t\t\t\tpattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n\t\t\t\t\t\talias: 'number',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\boffset\\s+)\\w+/, // offset 1m\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'range-duration': {\n\t\t\t\t\t\tpattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n\t\t\t\t\t\talias: 'number',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t'keyword': new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n\t\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n\t\t'number': /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n\t\t'operator': /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|unless|or)\\b/i,\n\t\t'punctuation': /[{};()`,.[\\]]/,\n\t};\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}