{"ast":null,"code":"Prism.languages.elixir = {\n  doc: {\n    pattern: /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n    inside: {\n      attribute: /^@\\w+/,\n      string: /['\"][\\s\\S]+/\n    }\n  },\n  comment: {\n    pattern: /#.*/m,\n    greedy: !0\n  },\n  regex: {\n    pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n    greedy: !0\n  },\n  string: [{\n    pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n    greedy: !0,\n    inside: {}\n  }, {\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: !0,\n    inside: {}\n  }, {\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0,\n    inside: {}\n  }],\n  atom: {\n    pattern: /(^|[^:]):\\w+/,\n    lookbehind: !0,\n    alias: \"symbol\"\n  },\n  module: {\n    pattern: /\\b[A-Z]\\w*\\b/,\n    alias: \"class-name\"\n  },\n  \"attr-name\": /\\b\\w+\\??:(?!:)/,\n  argument: {\n    pattern: /(^|[^&])&\\d+/,\n    lookbehind: !0,\n    alias: \"variable\"\n  },\n  attribute: {\n    pattern: /@\\w+/,\n    alias: \"variable\"\n  },\n  function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n  number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n  keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n  boolean: /\\b(?:true|false|nil)\\b/,\n  operator: [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n    pattern: /([^<])<(?!<)/,\n    lookbehind: !0\n  }, {\n    pattern: /([^>])>(?!>)/,\n    lookbehind: !0\n  }],\n  punctuation: /<<|>>|[.,%\\[\\]{}()]/\n}, Prism.languages.elixir.string.forEach(function (e) {\n  e.inside = {\n    interpolation: {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: \"punctuation\"\n        },\n        rest: Prism.languages.elixir\n      }\n    }\n  };\n});","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-elixir.min.js"],"names":["Prism","languages","elixir","doc","pattern","inside","attribute","string","comment","greedy","regex","atom","lookbehind","alias","module","argument","function","number","keyword","boolean","operator","punctuation","forEach","e","interpolation","delimiter","rest"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAuB;AAACC,EAAAA,GAAG,EAAC;AAACC,IAAAA,OAAO,EAAC,4FAAT;AAAsGC,IAAAA,MAAM,EAAC;AAACC,MAAAA,SAAS,EAAC,OAAX;AAAmBC,MAAAA,MAAM,EAAC;AAA1B;AAA7G,GAAL;AAA4JC,EAAAA,OAAO,EAAC;AAACJ,IAAAA,OAAO,EAAC,MAAT;AAAgBK,IAAAA,MAAM,EAAC,CAAC;AAAxB,GAApK;AAA+LC,EAAAA,KAAK,EAAC;AAACN,IAAAA,OAAO,EAAC,4LAAT;AAAsMK,IAAAA,MAAM,EAAC,CAAC;AAA9M,GAArM;AAAsZF,EAAAA,MAAM,EAAC,CAAC;AAACH,IAAAA,OAAO,EAAC,gNAAT;AAA0NK,IAAAA,MAAM,EAAC,CAAC,CAAlO;AAAoOJ,IAAAA,MAAM,EAAC;AAA3O,GAAD,EAAgP;AAACD,IAAAA,OAAO,EAAC,qBAAT;AAA+BK,IAAAA,MAAM,EAAC,CAAC,CAAvC;AAAyCJ,IAAAA,MAAM,EAAC;AAAhD,GAAhP,EAAoS;AAACD,IAAAA,OAAO,EAAC,+CAAT;AAAyDK,IAAAA,MAAM,EAAC,CAAC,CAAjE;AAAmEJ,IAAAA,MAAM,EAAC;AAA1E,GAApS,CAA7Z;AAAgxBM,EAAAA,IAAI,EAAC;AAACP,IAAAA,OAAO,EAAC,cAAT;AAAwBQ,IAAAA,UAAU,EAAC,CAAC,CAApC;AAAsCC,IAAAA,KAAK,EAAC;AAA5C,GAArxB;AAA20BC,EAAAA,MAAM,EAAC;AAACV,IAAAA,OAAO,EAAC,cAAT;AAAwBS,IAAAA,KAAK,EAAC;AAA9B,GAAl1B;AAA83B,eAAY,gBAA14B;AAA25BE,EAAAA,QAAQ,EAAC;AAACX,IAAAA,OAAO,EAAC,cAAT;AAAwBQ,IAAAA,UAAU,EAAC,CAAC,CAApC;AAAsCC,IAAAA,KAAK,EAAC;AAA5C,GAAp6B;AAA49BP,EAAAA,SAAS,EAAC;AAACF,IAAAA,OAAO,EAAC,MAAT;AAAgBS,IAAAA,KAAK,EAAC;AAAtB,GAAt+B;AAAwgCG,EAAAA,QAAQ,EAAC,qDAAjhC;AAAukCC,EAAAA,MAAM,EAAC,iEAA9kC;AAAgpCC,EAAAA,OAAO,EAAC,iNAAxpC;AAA02CC,EAAAA,OAAO,EAAC,wBAAl3C;AAA24CC,EAAAA,QAAQ,EAAC,CAAC,0FAAD,EAA4F;AAAChB,IAAAA,OAAO,EAAC,cAAT;AAAwBQ,IAAAA,UAAU,EAAC,CAAC;AAApC,GAA5F,EAAmI;AAACR,IAAAA,OAAO,EAAC,cAAT;AAAwBQ,IAAAA,UAAU,EAAC,CAAC;AAApC,GAAnI,CAAp5C;AAA+jDS,EAAAA,WAAW,EAAC;AAA3kD,CAAvB,EAAynDrB,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBK,MAAvB,CAA8Be,OAA9B,CAAsC,UAASC,CAAT,EAAW;AAACA,EAAAA,CAAC,CAAClB,MAAF,GAAS;AAACmB,IAAAA,aAAa,EAAC;AAACpB,MAAAA,OAAO,EAAC,YAAT;AAAsBC,MAAAA,MAAM,EAAC;AAACoB,QAAAA,SAAS,EAAC;AAACrB,UAAAA,OAAO,EAAC,UAAT;AAAoBS,UAAAA,KAAK,EAAC;AAA1B,SAAX;AAAoDa,QAAAA,IAAI,EAAC1B,KAAK,CAACC,SAAN,CAAgBC;AAAzE;AAA7B;AAAf,GAAT;AAAwI,CAA1L,CAAznD","sourcesContent":["Prism.languages.elixir={doc:{pattern:/@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,inside:{attribute:/^@\\w+/,string:/['\"][\\s\\S]+/}},comment:{pattern:/#.*/m,greedy:!0},regex:{pattern:/~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,greedy:!0},string:[{pattern:/~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,greedy:!0,inside:{}},{pattern:/(\"\"\"|''')[\\s\\S]*?\\1/,greedy:!0,inside:{}},{pattern:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{}}],atom:{pattern:/(^|[^:]):\\w+/,lookbehind:!0,alias:\"symbol\"},module:{pattern:/\\b[A-Z]\\w*\\b/,alias:\"class-name\"},\"attr-name\":/\\b\\w+\\??:(?!:)/,argument:{pattern:/(^|[^&])&\\d+/,lookbehind:!0,alias:\"variable\"},attribute:{pattern:/@\\w+/,alias:\"variable\"},function:/\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,number:/\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,keyword:/\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,boolean:/\\b(?:true|false|nil)\\b/,operator:[/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,{pattern:/([^<])<(?!<)/,lookbehind:!0},{pattern:/([^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,%\\[\\]{}()]/},Prism.languages.elixir.string.forEach(function(e){e.inside={interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:Prism.languages.elixir}}}});"]},"metadata":{},"sourceType":"script"}