{"ast":null,"code":"Prism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n  /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */\n  value: function (attrName, lang) {\n    Prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: Prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-markup.js"],"names":["Prism","languages","markup","pattern","greedy","inside","lookbehind","alias","hooks","add","env","type","attributes","content","replace","Object","defineProperty","tag","value","addInlined","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","attrName","push","html","mathml","svg","xml","extend","ssml","atom","rss"],"mappings":"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","sourcesContent":["Prism.languages.markup = {\n\t'comment': /<!--[\\s\\S]*?-->/,\n\t'prolog': /<\\?[\\s\\S]+?\\?>/,\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n"]},"metadata":{},"sourceType":"script"}