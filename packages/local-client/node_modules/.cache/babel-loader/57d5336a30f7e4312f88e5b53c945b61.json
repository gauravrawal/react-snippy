{"ast":null,"code":"Prism.languages.stan = {\n  comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n  string: {\n    pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n    greedy: !0\n  },\n  directive: {\n    pattern: /^([ \\t]*)#include\\b.*/m,\n    lookbehind: !0,\n    alias: \"property\"\n  },\n  \"function-arg\": {\n    pattern: /(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,\n    lookbehind: !0,\n    alias: \"function\"\n  },\n  constraint: {\n    pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n    lookbehind: !0,\n    inside: {\n      expression: {\n        pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n        lookbehind: !0,\n        inside: null\n      },\n      property: /\\b[a-z]\\w*(?=\\s*=)/i,\n      operator: /=/,\n      punctuation: /^<|>$|,/\n    }\n  },\n  keyword: [/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/, /\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/],\n  function: /\\b[a-z]\\w*(?=\\s*\\()/i,\n  number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,\n  boolean: /\\b(?:false|true)\\b/,\n  operator: /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n  punctuation: /[()\\[\\]{},;]/\n}, Prism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-stan.min.js"],"names":["Prism","languages","stan","comment","string","pattern","greedy","directive","lookbehind","alias","constraint","inside","expression","property","operator","punctuation","keyword","function","number","boolean"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAqB;AAACC,EAAAA,OAAO,EAAC,wCAAT;AAAkDC,EAAAA,MAAM,EAAC;AAACC,IAAAA,OAAO,EAAC,iCAAT;AAA2CC,IAAAA,MAAM,EAAC,CAAC;AAAnD,GAAzD;AAA+GC,EAAAA,SAAS,EAAC;AAACF,IAAAA,OAAO,EAAC,wBAAT;AAAkCG,IAAAA,UAAU,EAAC,CAAC,CAA9C;AAAgDC,IAAAA,KAAK,EAAC;AAAtD,GAAzH;AAA2L,kBAAe;AAACJ,IAAAA,OAAO,EAAC,oHAAT;AAA8HG,IAAAA,UAAU,EAAC,CAAC,CAA1I;AAA4IC,IAAAA,KAAK,EAAC;AAAlJ,GAA1M;AAAwWC,EAAAA,UAAU,EAAC;AAACL,IAAAA,OAAO,EAAC,sDAAT;AAAgEG,IAAAA,UAAU,EAAC,CAAC,CAA5E;AAA8EG,IAAAA,MAAM,EAAC;AAACC,MAAAA,UAAU,EAAC;AAACP,QAAAA,OAAO,EAAC,qDAAT;AAA+DG,QAAAA,UAAU,EAAC,CAAC,CAA3E;AAA6EG,QAAAA,MAAM,EAAC;AAApF,OAAZ;AAAsGE,MAAAA,QAAQ,EAAC,qBAA/G;AAAqIC,MAAAA,QAAQ,EAAC,GAA9I;AAAkJC,MAAAA,WAAW,EAAC;AAA9J;AAArF,GAAnX;AAAknBC,EAAAA,OAAO,EAAC,CAAC,gTAAD,EAAkT,iGAAlT,CAA1nB;AAA+gCC,EAAAA,QAAQ,EAAC,sBAAxhC;AAA+iCC,EAAAA,MAAM,EAAC,8CAAtjC;AAAqmCC,EAAAA,OAAO,EAAC,oBAA7mC;AAAkoCL,EAAAA,QAAQ,EAAC,6CAA3oC;AAAyrCC,EAAAA,WAAW,EAAC;AAArsC,CAArB,EAA0uCf,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBQ,UAArB,CAAgCC,MAAhC,CAAuCC,UAAvC,CAAkDD,MAAlD,GAAyDX,KAAK,CAACC,SAAN,CAAgBC,IAAnzC","sourcesContent":["Prism.languages.stan={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,string:{pattern:/\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,greedy:!0},directive:{pattern:/^([ \\t]*)#include\\b.*/m,lookbehind:!0,alias:\"property\"},\"function-arg\":{pattern:/(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,lookbehind:!0,alias:\"function\"},constraint:{pattern:/(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,lookbehind:!0,inside:{expression:{pattern:/(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,lookbehind:!0,inside:null},property:/\\b[a-z]\\w*(?=\\s*=)/i,operator:/=/,punctuation:/^<|>$|,/}},keyword:[/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/,/\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/],function:/\\b[a-z]\\w*(?=\\s*\\()/i,number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,boolean:/\\b(?:false|true)\\b/,operator:/<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,punctuation:/[()\\[\\]{},;]/},Prism.languages.stan.constraint.inside.expression.inside=Prism.languages.stan;"]},"metadata":{},"sourceType":"script"}