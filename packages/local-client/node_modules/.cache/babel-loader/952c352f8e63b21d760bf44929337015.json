{"ast":null,"code":"export default function getSurroundingWord(text, position) {\n  if (!text) throw Error(\"Argument 'text' should be truthy\");\n\n  var isWordDelimiter = function isWordDelimiter(c) {\n    return c === \" \" || c.charCodeAt(0) === 10;\n  }; // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration\n\n\n  var start = 0; // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation\n\n  var end = text.length; // iterate to the left\n\n  for (var i = position; i - 1 > -1; i--) {\n    if (isWordDelimiter(text[i - 1])) {\n      start = i;\n      break;\n    }\n  } // iterate to the right\n\n\n  for (var _i = position; _i < text.length; _i++) {\n    if (isWordDelimiter(text[_i])) {\n      end = _i;\n      break;\n    }\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}","map":{"version":3,"sources":["../../../src/utils/getSurroundingWord.ts"],"names":["Error","isWordDelimiter","c","start","end","text","i"],"mappings":"AAEA,eAAe,SAAA,kBAAA,CAAA,IAAA,EAAA,QAAA,EAAuE;AACpF,MAAI,CAAJ,IAAA,EAAW,MAAMA,KAAK,CAAX,kCAAW,CAAX;;AAEX,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,CAAA,EAAA;AAAA,WAAeC,CAAC,KAADA,GAAAA,IAAaA,CAAC,CAADA,UAAAA,CAAAA,CAAAA,MAA5B,EAAA;AAH4D,GAGpF,CAHoF,CAKpF;;;AACA,MAAIC,KAAK,GAN2E,CAMpF,CANoF,CAOpF;;AACA,MAAIC,GAAG,GAAGC,IAAI,CARsE,MAQpF,CARoF,CAUpF;;AACA,OAAK,IAAIC,CAAC,GAAV,QAAA,EAAuBA,CAAC,GAADA,CAAAA,GAAQ,CAA/B,CAAA,EAAmCA,CAAnC,EAAA,EAAwC;AACtC,QAAIL,eAAe,CAACI,IAAI,CAACC,CAAC,GAA1B,CAAwB,CAAL,CAAnB,EAAkC;AAChCH,MAAAA,KAAK,GAALA,CAAAA;AACA;AACD;AAfiF,GAAA,CAkBpF;;;AACA,OAAK,IAAIG,EAAC,GAAV,QAAA,EAAuBA,EAAC,GAAGD,IAAI,CAA/B,MAAA,EAAwCC,EAAxC,EAAA,EAA6C;AAC3C,QAAIL,eAAe,CAACI,IAAI,CAAxB,EAAwB,CAAL,CAAnB,EAA8B;AAC5BD,MAAAA,GAAG,GAAHA,EAAAA;AACA;AACD;AACF;;AAED,SAAO;AAAED,IAAAA,KAAK,EAAP,KAAA;AAASC,IAAAA,GAAG,EAAHA;AAAT,GAAP;AACD","sourcesContent":["import { TextRange } from '../commands';\n\nexport default function getSurroundingWord(text: string, position: number): TextRange {\n  if (!text) throw Error(\"Argument 'text' should be truthy\");\n\n  const isWordDelimiter = (c: string) => c === \" \" || c.charCodeAt(0) === 10;\n\n  // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration\n  let start = 0;\n  // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation\n  let end = text.length;\n\n  // iterate to the left\n  for (let i = position; i - 1 > -1; i--) {\n    if (isWordDelimiter(text[i - 1])) {\n      start = i;\n      break;\n    }\n  }\n\n  // iterate to the right\n  for (let i = position; i < text.length; i++) {\n    if (isWordDelimiter(text[i])) {\n      end = i;\n      break;\n    }\n  }\n\n  return { start, end };\n}"]},"metadata":{},"sourceType":"module"}