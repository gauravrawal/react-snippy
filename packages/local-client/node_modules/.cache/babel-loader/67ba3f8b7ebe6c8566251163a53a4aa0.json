{"ast":null,"code":"module.exports = patternCompile;\n\nfunction patternCompile(pattern) {\n  var before;\n  var after;\n\n  if (!pattern._compiled) {\n    before = pattern.before ? '(?:' + pattern.before + ')' : '';\n    after = pattern.after ? '(?:' + pattern.after + ')' : '';\n\n    if (pattern.atBreak) {\n      before = '[\\\\r\\\\n][\\\\t ]*' + before;\n    }\n\n    pattern._compiled = new RegExp((before ? '(' + before + ')' : '') + (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') + pattern.character + (after || ''), 'g');\n  }\n\n  return pattern._compiled;\n}","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js"],"names":["module","exports","patternCompile","pattern","before","after","_compiled","atBreak","RegExp","test","character"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,cAAjB;;AAEA,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,MAAIC,MAAJ;AACA,MAAIC,KAAJ;;AAEA,MAAI,CAACF,OAAO,CAACG,SAAb,EAAwB;AACtBF,IAAAA,MAAM,GAAGD,OAAO,CAACC,MAAR,GAAiB,QAAQD,OAAO,CAACC,MAAhB,GAAyB,GAA1C,GAAgD,EAAzD;AACAC,IAAAA,KAAK,GAAGF,OAAO,CAACE,KAAR,GAAgB,QAAQF,OAAO,CAACE,KAAhB,GAAwB,GAAxC,GAA8C,EAAtD;;AAEA,QAAIF,OAAO,CAACI,OAAZ,EAAqB;AACnBH,MAAAA,MAAM,GAAG,oBAAoBA,MAA7B;AACD;;AAEDD,IAAAA,OAAO,CAACG,SAAR,GAAoB,IAAIE,MAAJ,CAClB,CAACJ,MAAM,GAAG,MAAMA,MAAN,GAAe,GAAlB,GAAwB,EAA/B,KACG,sBAAsBK,IAAtB,CAA2BN,OAAO,CAACO,SAAnC,IAAgD,IAAhD,GAAuD,EAD1D,IAEEP,OAAO,CAACO,SAFV,IAGGL,KAAK,IAAI,EAHZ,CADkB,EAKlB,GALkB,CAApB;AAOD;;AAED,SAAOF,OAAO,CAACG,SAAf;AACD","sourcesContent":["module.exports = patternCompile\n\nfunction patternCompile(pattern) {\n  var before\n  var after\n\n  if (!pattern._compiled) {\n    before = pattern.before ? '(?:' + pattern.before + ')' : ''\n    after = pattern.after ? '(?:' + pattern.after + ')' : ''\n\n    if (pattern.atBreak) {\n      before = '[\\\\r\\\\n][\\\\t ]*' + before\n    }\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (after || ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n"]},"metadata":{},"sourceType":"script"}