{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/gauravrawal/gaurav/udemy/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler';\n\nconst CodeCell = () => {\n  _s();\n\n  const [code, setCode] = useState('');\n  const [input, setInput] = useState('');\n\n  const onClick = async () => {\n    const output = await bundle(input);\n    setCode(output);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n      initialValue: \"\",\n      onChange: value => setInput(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClick,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Preview, {\n      code: code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"gg1OCfBTcBn/WTN6LEnbOG9SPco=\");\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/src/components/code-cell.tsx"],"names":["useState","CodeEditor","Preview","bundle","CodeCell","code","setCode","input","setInput","onClick","output","value"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAwB,OAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMS,OAAO,GAAG,YAAY;AAC1B,UAAMC,MAAM,GAAG,MAAMP,MAAM,CAACI,KAAD,CAA3B;AACAD,IAAAA,OAAO,CAACI,MAAD,CAAP;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,YAAY,EAAC,EADf;AAEE,MAAA,QAAQ,EAAGC,KAAD,IAAWH,QAAQ,CAACG,KAAD;AAF/B;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEF,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF,eAQE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEJ;AAAf;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CArBD;;GAAMD,Q;;KAAAA,Q;AAuBN,eAAeA,QAAf","sourcesContent":["import { useState} from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler';\n\nconst CodeCell = () => {\n  const [code, setCode] = useState('');\n  const [input, setInput] = useState('');\n\n  const onClick = async () => {\n    const output = await bundle(input);\n    setCode(output);\n  };\n\n  return (\n    <div>\n      <CodeEditor\n        initialValue=\"\"\n        onChange={(value) => setInput(value)}\n      />\n      <div>\n        <button onClick={onClick}>Submit</button>\n      </div>\n      <Preview code={code} />\n    </div>\n  );\n};\n\nexport default CodeCell;"]},"metadata":{},"sourceType":"module"}