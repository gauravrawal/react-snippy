{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst babylon = require('@babel/parser'); // These are the options that were the default of the Babel5 parse function\n// see https://github.com/babel/babel/blob/5.x/packages/babel/src/api/node.js#L81\n\n\nconst options = {\n  sourceType: 'module',\n  allowHashBang: true,\n  ecmaVersion: Infinity,\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: ['estree', 'jsx', 'asyncGenerators', 'classProperties', 'doExpressions', 'exportExtensions', 'functionBind', 'functionSent', 'objectRestSpread', 'dynamicImport', 'nullishCoalescingOperator', 'optionalChaining']\n};\n/**\n * Wrapper to set default options. Doesn't accept custom options because in that\n * case babylon should be used instead.\n */\n\nmodule.exports = function () {\n  return {\n    parse(code) {\n      return babylon.parse(code, options);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/jscodeshift/parser/babel5Compat.js"],"names":["babylon","require","options","sourceType","allowHashBang","ecmaVersion","Infinity","allowImportExportEverywhere","allowReturnOutsideFunction","startLine","tokens","plugins","module","exports","parse","code"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAAvB,C,CAEA;AACA;;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE,QADE;AAEdC,EAAAA,aAAa,EAAE,IAFD;AAGdC,EAAAA,WAAW,EAAEC,QAHC;AAIdC,EAAAA,2BAA2B,EAAE,IAJf;AAKdC,EAAAA,0BAA0B,EAAE,IALd;AAMdC,EAAAA,SAAS,EAAE,CANG;AAOdC,EAAAA,MAAM,EAAE,IAPM;AAQdC,EAAAA,OAAO,EAAE,CACP,QADO,EAEP,KAFO,EAGP,iBAHO,EAIP,iBAJO,EAKP,eALO,EAMP,kBANO,EAOP,cAPO,EAQP,cARO,EASP,kBATO,EAUP,eAVO,EAWP,2BAXO,EAYP,kBAZO;AARK,CAAhB;AAwBA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,YAAW;AAC1B,SAAO;AACLC,IAAAA,KAAK,CAACC,IAAD,EAAO;AACV,aAAOf,OAAO,CAACc,KAAR,CAAcC,IAAd,EAAoBb,OAApB,CAAP;AACD;;AAHI,GAAP;AAKD,CAND","sourcesContent":["\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst babylon = require('@babel/parser');\n\n// These are the options that were the default of the Babel5 parse function\n// see https://github.com/babel/babel/blob/5.x/packages/babel/src/api/node.js#L81\nconst options = {\n  sourceType: 'module',\n  allowHashBang: true,\n  ecmaVersion: Infinity,\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    'estree',\n    'jsx',\n    'asyncGenerators',\n    'classProperties',\n    'doExpressions',\n    'exportExtensions',\n    'functionBind',\n    'functionSent',\n    'objectRestSpread',\n    'dynamicImport',\n    'nullishCoalescingOperator',\n    'optionalChaining',\n  ],\n};\n\n/**\n * Wrapper to set default options. Doesn't accept custom options because in that\n * case babylon should be used instead.\n */\nmodule.exports = function() {\n  return {\n    parse(code) {\n      return babylon.parse(code, options);\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}