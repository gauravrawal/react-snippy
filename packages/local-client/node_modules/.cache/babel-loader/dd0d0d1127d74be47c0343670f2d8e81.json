{"ast":null,"code":"(function (Prism) {\n  var interpolation = /\\\\\\((?:[^()]|\\([^()]*\\))*\\)/.source;\n  var string = RegExp(/\"(?:[^\"\\r\\n\\\\]|\\\\[^\\r\\n(]|__)*\"/.source.replace(/__/g, function () {\n    return interpolation;\n  }));\n  var stringInterpolation = {\n    'interpolation': {\n      pattern: RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + interpolation),\n      lookbehind: true,\n      inside: {\n        'content': {\n          pattern: /^(\\\\\\()[\\s\\S]+(?=\\)$)/,\n          lookbehind: true,\n          inside: null // see below\n\n        },\n        'punctuation': /^\\\\\\(|\\)$/\n      }\n    }\n  };\n  var jq = Prism.languages.jq = {\n    'comment': /#.*/,\n    'property': {\n      pattern: RegExp(string.source + /(?=\\s*:(?!:))/.source),\n      greedy: true,\n      inside: stringInterpolation\n    },\n    'string': {\n      pattern: string,\n      greedy: true,\n      inside: stringInterpolation\n    },\n    'function': {\n      pattern: /(\\bdef\\s+)[a-z_]\\w+/i,\n      lookbehind: true\n    },\n    'variable': /\\B\\$\\w+/,\n    'property-literal': {\n      pattern: /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n      alias: 'property'\n    },\n    'keyword': /\\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\\b/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'number': /(?:\\b\\d+\\.|\\B\\.)?\\b\\d+(?:[eE][+-]?\\d+)?\\b/,\n    'operator': [{\n      pattern: /\\|=?/,\n      alias: 'pipe'\n    }, /\\.\\.|[!=<>]?=|\\?\\/\\/|\\/\\/=?|[-+*/%]=?|[<>?]|\\b(?:and|or|not)\\b/],\n    'c-style-function': {\n      pattern: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      alias: 'function'\n    },\n    'punctuation': /::|[()\\[\\]{},:;]|\\.(?=\\s*[\\[\\w$])/,\n    'dot': {\n      pattern: /\\./,\n      alias: 'important'\n    }\n  };\n  stringInterpolation.interpolation.inside.content.inside = jq;\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-jq.js"],"names":["Prism","interpolation","source","string","RegExp","replace","stringInterpolation","pattern","lookbehind","inside","jq","languages","greedy","alias","content"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AAEjB,MAAIC,aAAa,GAAG,8BAA8BC,MAAlD;AACA,MAAIC,MAAM,GAAGC,MAAM,CAAC,kCAAkCF,MAAlC,CAAyCG,OAAzC,CAAiD,KAAjD,EAAwD,YAAY;AAAE,WAAOJ,aAAP;AAAuB,GAA7F,CAAD,CAAnB;AACA,MAAIK,mBAAmB,GAAG;AACzB,qBAAiB;AAChBC,MAAAA,OAAO,EAAEH,MAAM,CAAC,0BAA0BF,MAA1B,GAAmCD,aAApC,CADC;AAEhBO,MAAAA,UAAU,EAAE,IAFI;AAGhBC,MAAAA,MAAM,EAAE;AACP,mBAAW;AACVF,UAAAA,OAAO,EAAE,uBADC;AAEVC,UAAAA,UAAU,EAAE,IAFF;AAGVC,UAAAA,MAAM,EAAE,IAHE,CAGG;;AAHH,SADJ;AAMP,uBAAe;AANR;AAHQ;AADQ,GAA1B;AAeA,MAAIC,EAAE,GAAGV,KAAK,CAACW,SAAN,CAAgBD,EAAhB,GAAqB;AAC7B,eAAW,KADkB;AAE7B,gBAAY;AACXH,MAAAA,OAAO,EAAEH,MAAM,CAACD,MAAM,CAACD,MAAP,GAAgB,gBAAgBA,MAAjC,CADJ;AAEXU,MAAAA,MAAM,EAAE,IAFG;AAGXH,MAAAA,MAAM,EAAEH;AAHG,KAFiB;AAO7B,cAAU;AACTC,MAAAA,OAAO,EAAEJ,MADA;AAETS,MAAAA,MAAM,EAAE,IAFC;AAGTH,MAAAA,MAAM,EAAEH;AAHC,KAPmB;AAa7B,gBAAY;AACXC,MAAAA,OAAO,EAAE,sBADE;AAEXC,MAAAA,UAAU,EAAE;AAFD,KAbiB;AAkB7B,gBAAY,SAlBiB;AAmB7B,wBAAoB;AACnBD,MAAAA,OAAO,EAAE,2BADU;AAEnBM,MAAAA,KAAK,EAAE;AAFY,KAnBS;AAuB7B,eAAW,uHAvBkB;AAwB7B,eAAW,oBAxBkB;AAyB7B,cAAU,2CAzBmB;AA2B7B,gBAAY,CACX;AACCN,MAAAA,OAAO,EAAE,MADV;AAECM,MAAAA,KAAK,EAAE;AAFR,KADW,EAKX,gEALW,CA3BiB;AAkC7B,wBAAoB;AACnBN,MAAAA,OAAO,EAAE,uBADU;AAEnBM,MAAAA,KAAK,EAAE;AAFY,KAlCS;AAsC7B,mBAAe,mCAtCc;AAuC7B,WAAO;AACNN,MAAAA,OAAO,EAAE,IADH;AAENM,MAAAA,KAAK,EAAE;AAFD;AAvCsB,GAA9B;AA6CAP,EAAAA,mBAAmB,CAACL,aAApB,CAAkCQ,MAAlC,CAAyCK,OAAzC,CAAiDL,MAAjD,GAA0DC,EAA1D;AAEA,CAlEA,EAkECV,KAlED,CAAD","sourcesContent":["(function (Prism) {\n\n\tvar interpolation = /\\\\\\((?:[^()]|\\([^()]*\\))*\\)/.source;\n\tvar string = RegExp(/\"(?:[^\"\\r\\n\\\\]|\\\\[^\\r\\n(]|__)*\"/.source.replace(/__/g, function () { return interpolation; }));\n\tvar stringInterpolation = {\n\t\t'interpolation': {\n\t\t\tpattern: RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + interpolation),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /^(\\\\\\()[\\s\\S]+(?=\\)$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: null // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /^\\\\\\(|\\)$/\n\t\t\t}\n\t\t}\n\t};\n\n\tvar jq = Prism.languages.jq = {\n\t\t'comment': /#.*/,\n\t\t'property': {\n\t\t\tpattern: RegExp(string.source + /(?=\\s*:(?!:))/.source),\n\t\t\tgreedy: true,\n\t\t\tinside: stringInterpolation\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true,\n\t\t\tinside: stringInterpolation\n\t\t},\n\n\t\t'function': {\n\t\t\tpattern: /(\\bdef\\s+)[a-z_]\\w+/i,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t'variable': /\\B\\$\\w+/,\n\t\t'property-literal': {\n\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n\t\t\talias: 'property'\n\t\t},\n\t\t'keyword': /\\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\\b/,\n\t\t'boolean': /\\b(?:true|false)\\b/,\n\t\t'number': /(?:\\b\\d+\\.|\\B\\.)?\\b\\d+(?:[eE][+-]?\\d+)?\\b/,\n\n\t\t'operator': [\n\t\t\t{\n\t\t\t\tpattern: /\\|=?/,\n\t\t\t\talias: 'pipe'\n\t\t\t},\n\t\t\t/\\.\\.|[!=<>]?=|\\?\\/\\/|\\/\\/=?|[-+*/%]=?|[<>?]|\\b(?:and|or|not)\\b/\n\t\t],\n\t\t'c-style-function': {\n\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n\t\t\talias: 'function'\n\t\t},\n\t\t'punctuation': /::|[()\\[\\]{},:;]|\\.(?=\\s*[\\[\\w$])/,\n\t\t'dot': {\n\t\t\tpattern: /\\./,\n\t\t\talias: 'important'\n\t\t}\n\t};\n\n\tstringInterpolation.interpolation.inside.content.inside = jq;\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}