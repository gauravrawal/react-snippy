{"ast":null,"code":"/**\n * The MIT License\n * Copyright (c) 2018 Dmitriy Kubyshkin\n * Copied from https://github.com/grassator/insert-text-at-cursor\n */\nvar browserSupportsTextareaTextNodes;\n/**\n * @param {HTMLElement} input\n * @return {boolean}\n */\n\nfunction canManipulateViaTextNodes(input) {\n  if (input.nodeName !== \"TEXTAREA\") {\n    return false;\n  }\n\n  if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\n    var textarea = document.createElement('textarea');\n    textarea.value = '1';\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\n  }\n\n  return browserSupportsTextareaTextNodes;\n}\n/**\n * @param {HTMLTextAreaElement|HTMLInputElement} input\n * @param {string} text\n * @returns {void}\n */\n\n\nexport default (function (input, text) {\n  // Most of the used APIs only work with the field selected\n  input.focus(); // IE 8-10\n\n  if (document.selection) {\n    var ieRange = document.selection.createRange();\n    ieRange.text = text; // Move cursor after the inserted text\n\n    ieRange.collapse(false\n    /* to the end */\n    );\n    ieRange.select();\n    return;\n  } // Webkit + Edge\n\n\n  var isSuccess = document.execCommand('insertText', false, text);\n\n  if (!isSuccess) {\n    var start = input.selectionStart;\n    var end = input.selectionEnd; // Firefox (non-standard method)\n\n    if (typeof input.setRangeText === \"function\") {\n      input.setRangeText(text);\n    } else {\n      // To make a change we just need a Range, not a Selection\n      var range = document.createRange();\n      var textNode = document.createTextNode(text);\n\n      if (canManipulateViaTextNodes(input)) {\n        var node = input.firstChild; // If textarea is empty, just insert the text\n\n        if (!node) {\n          input.appendChild(textNode);\n        } else {\n          // Otherwise we need to find a nodes for start and end\n          var offset = 0;\n          var startNode = null;\n          var endNode = null;\n\n          while (node && (startNode === null || endNode === null)) {\n            var nodeLength = node.nodeValue.length; // if start of the selection falls into current node\n\n            if (start >= offset && start <= offset + nodeLength) {\n              range.setStart(startNode = node, start - offset);\n            } // if end of the selection falls into current node\n\n\n            if (end >= offset && end <= offset + nodeLength) {\n              range.setEnd(endNode = node, end - offset);\n            }\n\n            offset += nodeLength;\n            node = node.nextSibling;\n          } // If there is some text selected, remove it as we should replace it\n\n\n          if (start !== end) {\n            range.deleteContents();\n          }\n        }\n      } // If the node is a textarea and the range doesn't span outside the element\n      //\n      // Get the commonAncestorContainer of the selected range and test its type\n      // If the node is of type `#text` it means that we're still working with text nodes within our textarea element\n      // otherwise, if it's of type `#document` for example it means our selection spans outside the textarea.\n\n\n      if (canManipulateViaTextNodes(input) && range.commonAncestorContainer.nodeName === '#text') {\n        // Finally insert a new node. The browser will automatically split start and end nodes into two if necessary\n        range.insertNode(textNode);\n      } else {\n        // If the node is not a textarea or the range spans outside a textarea the only way is to replace the whole value\n        var value = input.value;\n        input.value = value.slice(0, start) + text + value.slice(end);\n      }\n    } // Correct the cursor position to be at the end of the insertion\n\n\n    input.setSelectionRange(start + text.length, start + text.length); // Notify any possible listeners of the change\n\n    var e = document.createEvent(\"UIEvent\");\n    e.initEvent(\"input\", true, false);\n    input.dispatchEvent(e);\n  }\n});","map":{"version":3,"sources":["../../../src/utils/InsertTextAtPosition.ts"],"names":["input","textarea","document","browserSupportsTextareaTextNodes","ieRange","isSuccess","start","end","range","textNode","canManipulateViaTextNodes","node","offset","startNode","endNode","nodeLength","value","text","e"],"mappings":"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","sourcesContent":["/**\n * The MIT License\n * Copyright (c) 2018 Dmitriy Kubyshkin\n * Copied from https://github.com/grassator/insert-text-at-cursor\n */\n\nlet browserSupportsTextareaTextNodes: any;\n\n/**\n * @param {HTMLElement} input\n * @return {boolean}\n */\nfunction canManipulateViaTextNodes(input: HTMLTextAreaElement | HTMLInputElement) {\n  if (input.nodeName !== \"TEXTAREA\") {\n    return false;\n  }\n  if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\n    const textarea: HTMLTextAreaElement = document.createElement('textarea');\n    textarea.value = '1';\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\n  }\n  return browserSupportsTextareaTextNodes;\n}\n\n/**\n * @param {HTMLTextAreaElement|HTMLInputElement} input\n * @param {string} text\n * @returns {void}\n */\nexport default (input: HTMLTextAreaElement | HTMLInputElement, text: string) => {\n  // Most of the used APIs only work with the field selected\n  input.focus();\n\n  // IE 8-10\n  if ((document as any).selection) {\n    const ieRange = (document as any).selection.createRange();\n    ieRange.text = text;\n\n    // Move cursor after the inserted text\n    ieRange.collapse(false /* to the end */);\n    ieRange.select();\n\n    return;\n  }\n\n  // Webkit + Edge\n  const isSuccess = document.execCommand('insertText', false, text);\n  if (!isSuccess) {\n    const start = input.selectionStart!;\n    const end = input.selectionEnd!;\n    // Firefox (non-standard method)\n    if (typeof input.setRangeText === \"function\") {\n      input.setRangeText(text);\n    } else {\n      // To make a change we just need a Range, not a Selection\n      const range = document.createRange();\n      const textNode = document.createTextNode(text);\n\n      if (canManipulateViaTextNodes(input)) {\n        let node = input.firstChild;\n\n        // If textarea is empty, just insert the text\n        if (!node) {\n          input.appendChild(textNode);\n        } else {\n          // Otherwise we need to find a nodes for start and end\n          let offset = 0;\n          let startNode = null;\n          let endNode = null;\n\n          while (node && (startNode === null || endNode === null)) {\n            const nodeLength = node.nodeValue!.length;\n\n            // if start of the selection falls into current node\n            if (start >= offset && start <= offset + nodeLength) {\n              range.setStart((startNode = node), start - offset);\n            }\n\n            // if end of the selection falls into current node\n            if (end >= offset && end <= offset + nodeLength) {\n              range.setEnd((endNode = node), end - offset);\n            }\n\n            offset += nodeLength;\n            node = node.nextSibling;\n          }\n\n          // If there is some text selected, remove it as we should replace it\n          if (start !== end) {\n            range.deleteContents();\n          }\n        }\n      }\n\n      // If the node is a textarea and the range doesn't span outside the element\n      //\n      // Get the commonAncestorContainer of the selected range and test its type\n      // If the node is of type `#text` it means that we're still working with text nodes within our textarea element\n      // otherwise, if it's of type `#document` for example it means our selection spans outside the textarea.\n      if (canManipulateViaTextNodes(input) && range.commonAncestorContainer.nodeName === '#text') {\n        // Finally insert a new node. The browser will automatically split start and end nodes into two if necessary\n        range.insertNode(textNode);\n      } else {\n        // If the node is not a textarea or the range spans outside a textarea the only way is to replace the whole value\n        const value = input.value;\n        input.value = value.slice(0, start) + text + value.slice(end);\n      }\n    }\n\n    // Correct the cursor position to be at the end of the insertion\n    input.setSelectionRange(start + text.length, start + text.length);\n\n    // Notify any possible listeners of the change\n    const e = document.createEvent(\"UIEvent\");\n    e.initEvent(\"input\", true, false);\n    input.dispatchEvent(e);\n  }\n}"]},"metadata":{},"sourceType":"module"}