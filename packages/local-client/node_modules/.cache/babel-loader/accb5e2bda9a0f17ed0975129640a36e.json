{"ast":null,"code":"(function (Prism) {\n  // https://freemarker.apache.org/docs/dgui_template_exp.html\n  // FTL expression with 4 levels of nesting supported\n  var FTL_EXPR = /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/.source;\n\n  for (var i = 0; i < 2; i++) {\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n      return FTL_EXPR;\n    });\n  }\n\n  FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source);\n  var ftl = {\n    'comment': /<#--[\\s\\S]*?-->/,\n    'string': [{\n      // raw string\n      pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n      greedy: true\n    }, {\n      pattern: RegExp(/(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(/<expr>/g, function () {\n        return FTL_EXPR;\n      })),\n      greedy: true,\n      inside: {\n        'interpolation': {\n          pattern: RegExp(/((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(/<expr>/g, function () {\n            return FTL_EXPR;\n          })),\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            },\n            rest: null\n          }\n        }\n      }\n    }],\n    'keyword': /\\b(?:as)\\b/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'builtin-function': {\n      pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'function': /\\b\\w+(?=\\s*\\()/,\n    'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n    'operator': /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n    'punctuation': /[,;.:()[\\]{}]/\n  };\n  ftl.string[1].inside.interpolation.inside.rest = ftl;\n  Prism.languages.ftl = {\n    'ftl-comment': {\n      // the pattern is shortened to be more efficient\n      pattern: /^<#--[\\s\\S]*/,\n      alias: 'comment'\n    },\n    'ftl-directive': {\n      pattern: /^<[\\s\\S]+>$/,\n      inside: {\n        'directive': {\n          pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'punctuation': /^<\\/?|\\/?>$/,\n        'content': {\n          pattern: /\\s*\\S[\\s\\S]*/,\n          alias: 'ftl',\n          inside: ftl\n        }\n      }\n    },\n    'ftl-interpolation': {\n      pattern: /^\\$\\{[\\s\\S]*\\}$/,\n      inside: {\n        'punctuation': /^\\$\\{|\\}$/,\n        'content': {\n          pattern: /\\s*\\S[\\s\\S]*/,\n          alias: 'ftl',\n          inside: ftl\n        }\n      }\n    }\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var pattern = RegExp(/<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(/<expr>/g, function () {\n      return FTL_EXPR;\n    }), 'gi');\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'ftl', pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl');\n  });\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-ftl.js"],"names":["Prism","FTL_EXPR","source","i","replace","ftl","pattern","greedy","RegExp","inside","lookbehind","alias","rest","string","interpolation","languages","hooks","add","env","buildPlaceholders","tokenizePlaceholders"],"mappings":"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","sourcesContent":["(function (Prism) {\n\n\t// https://freemarker.apache.org/docs/dgui_template_exp.html\n\n\t// FTL expression with 4 levels of nesting supported\n\tvar FTL_EXPR = /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/.source;\n\tfor (var i = 0; i < 2; i++) {\n\t\tFTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () { return FTL_EXPR; });\n\t}\n\tFTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source);\n\n\tvar ftl = {\n\t\t'comment': /<#--[\\s\\S]*?-->/,\n\t\t'string': [\n\t\t\t{\n\t\t\t\t// raw string\n\t\t\t\tpattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(/<expr>/g, function () { return FTL_EXPR; })),\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': {\n\t\t\t\t\t\tpattern: RegExp(/((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(/<expr>/g, function () { return FTL_EXPR; })),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tinside: {\n\t\t\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trest: null\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'keyword': /\\b(?:as)\\b/,\n\t\t'boolean': /\\b(?:true|false)\\b/,\n\t\t'builtin-function': {\n\t\t\tpattern: /((?:^|[^?])\\?\\s*)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function'\n\t\t},\n\t\t'function': /\\b\\w+(?=\\s*\\()/,\n\t\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n\t\t'operator': /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n\t\t'punctuation': /[,;.:()[\\]{}]/\n\t};\n\n\tftl.string[1].inside.interpolation.inside.rest = ftl;\n\n\tPrism.languages.ftl = {\n\t\t'ftl-comment': {\n\t\t\t// the pattern is shortened to be more efficient\n\t\t\tpattern: /^<#--[\\s\\S]*/,\n\t\t\talias: 'comment'\n\t\t},\n\t\t'ftl-directive': {\n\t\t\tpattern: /^<[\\s\\S]+>$/,\n\t\t\tinside: {\n\t\t\t\t'directive': {\n\t\t\t\t\tpattern: /(^<\\/?)[#@][a-z]\\w*/i,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\t'punctuation': /^<\\/?|\\/?>$/,\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /\\s*\\S[\\s\\S]*/,\n\t\t\t\t\talias: 'ftl',\n\t\t\t\t\tinside: ftl\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'ftl-interpolation': {\n\t\t\tpattern: /^\\$\\{[\\s\\S]*\\}$/,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /^\\$\\{|\\}$/,\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /\\s*\\S[\\s\\S]*/,\n\t\t\t\t\talias: 'ftl',\n\t\t\t\t\tinside: ftl\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tvar pattern = RegExp(/<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(/<expr>/g, function () { return FTL_EXPR; }), 'gi');\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'ftl', pattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl');\n\t});\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}