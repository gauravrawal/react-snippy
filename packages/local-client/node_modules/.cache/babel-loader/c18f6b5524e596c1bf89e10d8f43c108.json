{"ast":null,"code":"(function (Prism) {\n  // Functions to construct regular expressions\n  // simple form\n  // e.g. (interactive ... or (interactive)\n  function simple_form(name) {\n    return RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');\n  } // booleans and numbers\n\n\n  function primitive(pattern) {\n    return RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');\n  } // Patterns in regular expressions\n  // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n  // & and : are excluded as they are usually used for special purposes\n\n\n  var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+'; // symbol starting with & used in function arguments\n\n  var marker = '&' + symbol; // Open parenthesis for look-behind\n\n  var par = '(\\\\()';\n  var endpar = '(?=\\\\))'; // End the pattern with look-ahead space\n\n  var space = '(?=\\\\s)';\n  var language = {\n    // Three or four semicolons are considered a heading.\n    // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n    heading: {\n      pattern: /;;;.*/,\n      alias: ['comment', 'title']\n    },\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true,\n      inside: {\n        argument: /[-A-Z]+(?=[.,\\s])/,\n        symbol: RegExp('`' + symbol + \"'\")\n      }\n    },\n    'quoted-symbol': {\n      pattern: RegExp(\"#?'\" + symbol),\n      alias: ['variable', 'symbol']\n    },\n    'lisp-property': {\n      pattern: RegExp(':' + symbol),\n      alias: 'property'\n    },\n    splice: {\n      pattern: RegExp(',@?' + symbol),\n      alias: ['symbol', 'variable']\n    },\n    keyword: [{\n      pattern: RegExp(par + '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' + space),\n      lookbehind: true\n    }, {\n      pattern: RegExp(par + '(?:for|do|collect|return|finally|append|concat|in|by)' + space),\n      lookbehind: true\n    }],\n    declare: {\n      pattern: simple_form('declare'),\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    interactive: {\n      pattern: simple_form('interactive'),\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    boolean: {\n      pattern: primitive('(?:t|nil)'),\n      lookbehind: true\n    },\n    number: {\n      pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n      lookbehind: true\n    },\n    defvar: {\n      pattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n      lookbehind: true,\n      inside: {\n        keyword: /^def[a-z]+/,\n        variable: RegExp(symbol)\n      }\n    },\n    defun: {\n      pattern: RegExp(par + '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' + symbol + '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'),\n      lookbehind: true,\n      inside: {\n        keyword: /^(?:cl-)?def\\S+/,\n        // See below, this property needs to be defined later so that it can\n        // reference the language object.\n        arguments: null,\n        function: {\n          pattern: RegExp('(^\\\\s)' + symbol),\n          lookbehind: true\n        },\n        punctuation: /[()]/\n      }\n    },\n    lambda: {\n      pattern: RegExp(par + 'lambda\\\\s+\\\\(\\\\s*(?:&?' + symbol + '(?:\\\\s+&?' + symbol + ')*\\\\s*)?\\\\)'),\n      lookbehind: true,\n      inside: {\n        keyword: /^lambda/,\n        // See below, this property needs to be defined later so that it can\n        // reference the language object.\n        arguments: null,\n        punctuation: /[()]/\n      }\n    },\n    car: {\n      pattern: RegExp(par + symbol),\n      lookbehind: true\n    },\n    punctuation: [// open paren, brackets, and close paren\n    /(?:['`,]?\\(|[)\\[\\]])/, // cons\n    {\n      pattern: /(\\s)\\.(?=\\s)/,\n      lookbehind: true\n    }]\n  };\n  var arg = {\n    'lisp-marker': RegExp(marker),\n    rest: {\n      argument: {\n        pattern: RegExp(symbol),\n        alias: 'variable'\n      },\n      varform: {\n        pattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n        lookbehind: true,\n        inside: {\n          string: language.string,\n          boolean: language.boolean,\n          number: language.number,\n          symbol: language.symbol,\n          punctuation: /[()]/\n        }\n      }\n    }\n  };\n  var forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n  var arglist = {\n    pattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n    lookbehind: true,\n    inside: {\n      'rest-vars': {\n        pattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n        inside: arg\n      },\n      'other-marker-vars': {\n        pattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n        inside: arg\n      },\n      keys: {\n        pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n        inside: arg\n      },\n      argument: {\n        pattern: RegExp(symbol),\n        alias: 'variable'\n      },\n      punctuation: /[()]/\n    }\n  };\n  language['lambda'].inside.arguments = arglist;\n  language['defun'].inside.arguments = Prism.util.clone(arglist);\n  language['defun'].inside.arguments.inside.sublist = arglist;\n  Prism.languages.lisp = language;\n  Prism.languages.elisp = language;\n  Prism.languages.emacs = language;\n  Prism.languages['emacs-lisp'] = language;\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-lisp.js"],"names":["Prism","simple_form","name","RegExp","primitive","pattern","symbol","marker","par","endpar","space","language","heading","alias","comment","string","greedy","inside","argument","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","arg","rest","varform","forms","arglist","keys","util","clone","sublist","languages","lisp","elisp","emacs"],"mappings":"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","sourcesContent":["(function (Prism) {\n\t// Functions to construct regular expressions\n\t// simple form\n\t// e.g. (interactive ... or (interactive)\n\tfunction simple_form(name) {\n\t\treturn RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');\n\t}\n\t// booleans and numbers\n\tfunction primitive(pattern) {\n\t\treturn RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');\n\t}\n\n\t// Patterns in regular expressions\n\n\t// Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n\t// & and : are excluded as they are usually used for special purposes\n\tvar symbol = '[-+*/_~!@$%^=<>{}\\\\w]+';\n\t// symbol starting with & used in function arguments\n\tvar marker = '&' + symbol;\n\t// Open parenthesis for look-behind\n\tvar par = '(\\\\()';\n\tvar endpar = '(?=\\\\))';\n\t// End the pattern with look-ahead space\n\tvar space = '(?=\\\\s)';\n\n\tvar language = {\n\t\t// Three or four semicolons are considered a heading.\n\t\t// See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n\t\theading: {\n\t\t\tpattern: /;;;.*/,\n\t\t\talias: ['comment', 'title']\n\t\t},\n\t\tcomment: /;.*/,\n\t\tstring: {\n\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\targument: /[-A-Z]+(?=[.,\\s])/,\n\t\t\t\tsymbol: RegExp('`' + symbol + \"'\")\n\t\t\t}\n\t\t},\n\t\t'quoted-symbol': {\n\t\t\tpattern: RegExp(\"#?'\" + symbol),\n\t\t\talias: ['variable', 'symbol']\n\t\t},\n\t\t'lisp-property': {\n\t\t\tpattern: RegExp(':' + symbol),\n\t\t\talias: 'property'\n\t\t},\n\t\tsplice: {\n\t\t\tpattern: RegExp(',@?' + symbol),\n\t\t\talias: ['symbol', 'variable']\n\t\t},\n\t\tkeyword: [\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\tpar +\n\t\t\t\t\t\t'(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n\t\t\t\t\t\tspace\n\t\t\t\t),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\tpar + '(?:for|do|collect|return|finally|append|concat|in|by)' + space\n\t\t\t\t),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t],\n\t\tdeclare: {\n\t\t\tpattern: simple_form('declare'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\t\tinteractive: {\n\t\t\tpattern: simple_form('interactive'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\t\tboolean: {\n\t\t\tpattern: primitive('(?:t|nil)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\tnumber: {\n\t\t\tpattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n\t\t\tlookbehind: true\n\t\t},\n\t\tdefvar: {\n\t\t\tpattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^def[a-z]+/,\n\t\t\t\tvariable: RegExp(symbol)\n\t\t\t}\n\t\t},\n\t\tdefun: {\n\t\t\tpattern: RegExp(\n\t\t\t\tpar +\n\t\t\t\t\t'(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n\t\t\t\t\tsymbol +\n\t\t\t\t\t'\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^(?:cl-)?def\\S+/,\n\t\t\t\t// See below, this property needs to be defined later so that it can\n\t\t\t\t// reference the language object.\n\t\t\t\targuments: null,\n\t\t\t\tfunction: {\n\t\t\t\t\tpattern: RegExp('(^\\\\s)' + symbol),\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\tpunctuation: /[()]/\n\t\t\t}\n\t\t},\n\t\tlambda: {\n\t\t\tpattern: RegExp(par + 'lambda\\\\s+\\\\(\\\\s*(?:&?' + symbol + '(?:\\\\s+&?' + symbol + ')*\\\\s*)?\\\\)'),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^lambda/,\n\t\t\t\t// See below, this property needs to be defined later so that it can\n\t\t\t\t// reference the language object.\n\t\t\t\targuments: null,\n\t\t\t\tpunctuation: /[()]/\n\t\t\t}\n\t\t},\n\t\tcar: {\n\t\t\tpattern: RegExp(par + symbol),\n\t\t\tlookbehind: true\n\t\t},\n\t\tpunctuation: [\n\t\t\t// open paren, brackets, and close paren\n\t\t\t/(?:['`,]?\\(|[)\\[\\]])/,\n\t\t\t// cons\n\t\t\t{\n\t\t\t\tpattern: /(\\s)\\.(?=\\s)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t]\n\t};\n\n\tvar arg = {\n\t\t'lisp-marker': RegExp(marker),\n\t\trest: {\n\t\t\targument: {\n\t\t\t\tpattern: RegExp(symbol),\n\t\t\t\talias: 'variable'\n\t\t\t},\n\t\t\tvarform: {\n\t\t\t\tpattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\tstring: language.string,\n\t\t\t\t\tboolean: language.boolean,\n\t\t\t\t\tnumber: language.number,\n\t\t\t\t\tsymbol: language.symbol,\n\t\t\t\t\tpunctuation: /[()]/\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tvar forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n\n\tvar arglist = {\n\t\tpattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'rest-vars': {\n\t\t\t\tpattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\t'other-marker-vars': {\n\t\t\t\tpattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\tkeys: {\n\t\t\t\tpattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\targument: {\n\t\t\t\tpattern: RegExp(symbol),\n\t\t\t\talias: 'variable'\n\t\t\t},\n\t\t\tpunctuation: /[()]/\n\t\t}\n\t};\n\n\tlanguage['lambda'].inside.arguments = arglist;\n\tlanguage['defun'].inside.arguments = Prism.util.clone(arglist);\n\tlanguage['defun'].inside.arguments.inside.sublist = arglist;\n\n\tPrism.languages.lisp = language;\n\tPrism.languages.elisp = language;\n\tPrism.languages.emacs = language;\n\tPrism.languages['emacs-lisp'] = language;\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}