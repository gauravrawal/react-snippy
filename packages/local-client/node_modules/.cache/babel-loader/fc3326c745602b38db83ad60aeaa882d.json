{"ast":null,"code":"!function (e) {\n  var t = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n      n = \"\\\\b(?!<keyword>)\\\\w+(?:\\\\s*\\\\.\\\\s*\\\\w+)*\\\\b\".replace(/<keyword>/g, function () {\n    return t.source;\n  });\n  e.languages.cpp = e.languages.extend(\"c\", {\n    \"class-name\": [{\n      pattern: RegExp(\"(\\\\b(?:class|concept|enum|struct|typename)\\\\s+)(?!<keyword>)\\\\w+\".replace(/<keyword>/g, function () {\n        return t.source;\n      })),\n      lookbehind: !0\n    }, /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    keyword: t,\n    number: {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: !0\n    },\n    operator: />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    boolean: /\\b(?:true|false)\\b/\n  }), e.languages.insertBefore(\"cpp\", \"string\", {\n    module: {\n      pattern: RegExp('(\\\\b(?:module|import)\\\\s+)(?:\"(?:\\\\\\\\(?:\\r\\n|[^])|[^\"\\\\\\\\\\r\\n])*\"|<[^<>\\r\\n]*>|' + \"<mod-name>(?:\\\\s*:\\\\s*<mod-name>)?|:\\\\s*<mod-name>\".replace(/<mod-name>/g, function () {\n        return n;\n      }) + \")\"),\n      lookbehind: !0,\n      greedy: !0,\n      inside: {\n        string: /^[<\"][\\s\\S]+/,\n        operator: /:/,\n        punctuation: /\\./\n      }\n    },\n    \"raw-string\": {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: \"string\",\n      greedy: !0\n    }\n  }), e.languages.insertBefore(\"cpp\", \"keyword\", {\n    \"generic-function\": {\n      pattern: /\\b[a-z_]\\w*\\s*<(?:[^<>]|<(?:[^<>])*>)*>(?=\\s*\\()/i,\n      inside: {\n        function: /^\\w+/,\n        generic: {\n          pattern: /<[\\s\\S]+/,\n          alias: \"class-name\",\n          inside: e.languages.cpp\n        }\n      }\n    }\n  }), e.languages.insertBefore(\"cpp\", \"operator\", {\n    \"double-colon\": {\n      pattern: /::/,\n      alias: \"punctuation\"\n    }\n  }), e.languages.insertBefore(\"cpp\", \"class-name\", {\n    \"base-clause\": {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: !0,\n      greedy: !0,\n      inside: e.languages.extend(\"cpp\", {})\n    }\n  }), e.languages.insertBefore(\"inside\", \"double-colon\", {\n    \"class-name\": /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, e.languages.cpp[\"base-clause\"]);\n}(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-cpp.min.js"],"names":["e","t","n","replace","source","languages","cpp","extend","pattern","RegExp","lookbehind","keyword","number","greedy","operator","boolean","insertBefore","module","inside","string","punctuation","alias","function","generic","Prism"],"mappings":"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","sourcesContent":["!function(e){var t=/\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,n=\"\\\\b(?!<keyword>)\\\\w+(?:\\\\s*\\\\.\\\\s*\\\\w+)*\\\\b\".replace(/<keyword>/g,function(){return t.source});e.languages.cpp=e.languages.extend(\"c\",{\"class-name\":[{pattern:RegExp(\"(\\\\b(?:class|concept|enum|struct|typename)\\\\s+)(?!<keyword>)\\\\w+\".replace(/<keyword>/g,function(){return t.source})),lookbehind:!0},/\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,/\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,/\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],keyword:t,number:{pattern:/(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,boolean:/\\b(?:true|false)\\b/}),e.languages.insertBefore(\"cpp\",\"string\",{module:{pattern:RegExp('(\\\\b(?:module|import)\\\\s+)(?:\"(?:\\\\\\\\(?:\\r\\n|[^])|[^\"\\\\\\\\\\r\\n])*\"|<[^<>\\r\\n]*>|'+\"<mod-name>(?:\\\\s*:\\\\s*<mod-name>)?|:\\\\s*<mod-name>\".replace(/<mod-name>/g,function(){return n})+\")\"),lookbehind:!0,greedy:!0,inside:{string:/^[<\"][\\s\\S]+/,operator:/:/,punctuation:/\\./}},\"raw-string\":{pattern:/R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,alias:\"string\",greedy:!0}}),e.languages.insertBefore(\"cpp\",\"keyword\",{\"generic-function\":{pattern:/\\b[a-z_]\\w*\\s*<(?:[^<>]|<(?:[^<>])*>)*>(?=\\s*\\()/i,inside:{function:/^\\w+/,generic:{pattern:/<[\\s\\S]+/,alias:\"class-name\",inside:e.languages.cpp}}}}),e.languages.insertBefore(\"cpp\",\"operator\",{\"double-colon\":{pattern:/::/,alias:\"punctuation\"}}),e.languages.insertBefore(\"cpp\",\"class-name\",{\"base-clause\":{pattern:/(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend(\"cpp\",{})}}),e.languages.insertBefore(\"inside\",\"double-colon\",{\"class-name\":/\\b[a-z_]\\w*\\b(?!\\s*::)/i},e.languages.cpp[\"base-clause\"])}(Prism);"]},"metadata":{},"sourceType":"script"}