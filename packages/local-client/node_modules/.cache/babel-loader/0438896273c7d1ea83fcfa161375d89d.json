{"ast":null,"code":"(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\n   * @param {string} source\n   * @param {string} [flags]\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore\n            } else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-jsx.js"],"names":["Prism","javascript","util","clone","languages","space","source","braces","spread","re","flags","replace","RegExp","jsx","extend","tag","pattern","inside","insertBefore","alias","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","Token","hooks","add","env","language"],"mappings":"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","sourcesContent":["(function (Prism) {\n\n\tvar javascript = Prism.util.clone(Prism.languages.javascript);\n\n\tvar space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n\tvar braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n\tvar spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n\n\t/**\n\t * @param {string} source\n\t * @param {string} [flags]\n\t */\n\tfunction re(source, flags) {\n\t\tsource = source\n\t\t\t.replace(/<S>/g, function () { return space; })\n\t\t\t.replace(/<BRACES>/g, function () { return braces; })\n\t\t\t.replace(/<SPREAD>/g, function () { return spread; });\n\t\treturn RegExp(source, flags);\n\t}\n\n\tspread = re(spread).source;\n\n\n\tPrism.languages.jsx = Prism.languages.extend('markup', javascript);\n\tPrism.languages.jsx.tag.pattern = re(\n\t\t/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source\n\t);\n\n\tPrism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n\tPrism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/i;\n\tPrism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n\tPrism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n\n\tPrism.languages.insertBefore('inside', 'attr-name', {\n\t\t'spread': {\n\t\t\tpattern: re(/<SPREAD>/.source),\n\t\t\tinside: Prism.languages.jsx\n\t\t}\n\t}, Prism.languages.jsx.tag);\n\n\tPrism.languages.insertBefore('inside', 'special-attr', {\n\t\t'script': {\n\t\t\t// Allow for two levels of nesting\n\t\t\tpattern: re(/=<BRACES>/.source),\n\t\t\tinside: {\n\t\t\t\t'script-punctuation': {\n\t\t\t\t\tpattern: /^=(?=\\{)/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.jsx\n\t\t\t},\n\t\t\t'alias': 'language-javascript'\n\t\t}\n\t}, Prism.languages.jsx.tag);\n\n\t// The following will handle plain text inside tags\n\tvar stringifyToken = function (token) {\n\t\tif (!token) {\n\t\t\treturn '';\n\t\t}\n\t\tif (typeof token === 'string') {\n\t\t\treturn token;\n\t\t}\n\t\tif (typeof token.content === 'string') {\n\t\t\treturn token.content;\n\t\t}\n\t\treturn token.content.map(stringifyToken).join('');\n\t};\n\n\tvar walkTokens = function (tokens) {\n\t\tvar openedTags = [];\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tvar notTagNorBrace = false;\n\n\t\t\tif (typeof token !== 'string') {\n\t\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n\t\t\t\t\t// We found a tag, now find its kind\n\n\t\t\t\t\tif (token.content[0].content[0].content === '</') {\n\t\t\t\t\t\t// Closing tag\n\t\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n\t\t\t\t\t\t\t// Pop matching opening tag\n\t\t\t\t\t\t\topenedTags.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {\n\t\t\t\t\t\t\t// Autoclosed tag, ignore\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Opening tag\n\t\t\t\t\t\t\topenedTags.push({\n\t\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),\n\t\t\t\t\t\t\t\topenedBraces: 0\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n\n\t\t\t\t\t// Here we might have entered a JSX context inside a tag\n\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;\n\n\t\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n\n\t\t\t\t\t// Here we might have left a JSX context inside a tag\n\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;\n\n\t\t\t\t} else {\n\t\t\t\t\tnotTagNorBrace = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (notTagNorBrace || typeof token === 'string') {\n\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n\t\t\t\t\t// Here we are inside a tag, and not inside a JSX context.\n\t\t\t\t\t// That's plain text: drop any tokens matched.\n\t\t\t\t\tvar plainText = stringifyToken(token);\n\n\t\t\t\t\t// And merge text with adjacent text\n\t\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n\t\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);\n\t\t\t\t\t\ttokens.splice(i + 1, 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n\t\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;\n\t\t\t\t\t\ttokens.splice(i - 1, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\n\t\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (token.content && typeof token.content !== 'string') {\n\t\t\t\twalkTokens(token.content);\n\t\t\t}\n\t\t}\n\t};\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tif (env.language !== 'jsx' && env.language !== 'tsx') {\n\t\t\treturn;\n\t\t}\n\t\twalkTokens(env.tokens);\n\t});\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}