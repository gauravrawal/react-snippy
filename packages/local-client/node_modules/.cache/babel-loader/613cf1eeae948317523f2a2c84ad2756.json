{"ast":null,"code":"!function (e) {\n  for (var a = \"/\\\\*(?:[^*/]|\\\\*(?!/)|/(?!\\\\*)|<self>)*\\\\*/\", t = 0; t < 2; t++) a = a.replace(/<self>/g, function () {\n    return a;\n  });\n\n  a = a.replace(/<self>/g, function () {\n    return \"[^\\\\s\\\\S]\";\n  }), e.languages.rust = {\n    comment: [{\n      pattern: RegExp(\"(^|[^\\\\\\\\])\" + a),\n      lookbehind: !0,\n      greedy: !0\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: !0,\n      greedy: !0\n    }],\n    string: {\n      pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n      greedy: !0\n    },\n    char: {\n      pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n      greedy: !0,\n      alias: \"string\"\n    },\n    attribute: {\n      pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n      greedy: !0,\n      alias: \"attr-name\",\n      inside: {\n        string: null\n      }\n    },\n    \"closure-params\": {\n      pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n      lookbehind: !0,\n      greedy: !0,\n      inside: {\n        \"closure-punctuation\": {\n          pattern: /^\\||\\|$/,\n          alias: \"punctuation\"\n        },\n        rest: null\n      }\n    },\n    \"lifetime-annotation\": {\n      pattern: /'\\w+/,\n      alias: \"symbol\"\n    },\n    \"fragment-specifier\": {\n      pattern: /(\\$\\w+:)[a-z]+/,\n      lookbehind: !0,\n      alias: \"punctuation\"\n    },\n    variable: /\\$\\w+/,\n    \"function-definition\": {\n      pattern: /(\\bfn\\s+)\\w+/,\n      lookbehind: !0,\n      alias: \"function\"\n    },\n    \"type-definition\": {\n      pattern: /(\\b(?:enum|struct|union)\\s+)\\w+/,\n      lookbehind: !0,\n      alias: \"class-name\"\n    },\n    \"module-declaration\": [{\n      pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n      lookbehind: !0,\n      alias: \"namespace\"\n    }, {\n      pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n      lookbehind: !0,\n      alias: \"namespace\",\n      inside: {\n        punctuation: /::/\n      }\n    }],\n    keyword: [/\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, /\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/],\n    function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n    macro: {\n      pattern: /\\b\\w+!/,\n      alias: \"property\"\n    },\n    constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n    \"class-name\": /\\b[A-Z]\\w*\\b/,\n    namespace: {\n      pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n      inside: {\n        punctuation: /::/\n      }\n    },\n    number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n    operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n  }, e.languages.rust[\"closure-params\"].inside.rest = e.languages.rust, e.languages.rust.attribute.inside.string = e.languages.rust.string;\n}(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/prismjs/components/prism-rust.min.js"],"names":["e","a","t","replace","languages","rust","comment","pattern","RegExp","lookbehind","greedy","string","char","alias","attribute","inside","rest","variable","punctuation","keyword","function","macro","constant","namespace","number","boolean","operator","Prism"],"mappings":"AAAA,CAAC,UAASA,CAAT,EAAW;AAAC,OAAI,IAAIC,CAAC,GAAC,6CAAN,EAAoDC,CAAC,GAAC,CAA1D,EAA4DA,CAAC,GAAC,CAA9D,EAAgEA,CAAC,EAAjE,EAAoED,CAAC,GAACA,CAAC,CAACE,OAAF,CAAU,SAAV,EAAoB,YAAU;AAAC,WAAOF,CAAP;AAAS,GAAxC,CAAF;;AAA4CA,EAAAA,CAAC,GAACA,CAAC,CAACE,OAAF,CAAU,SAAV,EAAoB,YAAU;AAAC,WAAM,WAAN;AAAkB,GAAjD,CAAF,EAAqDH,CAAC,CAACI,SAAF,CAAYC,IAAZ,GAAiB;AAACC,IAAAA,OAAO,EAAC,CAAC;AAACC,MAAAA,OAAO,EAACC,MAAM,CAAC,gBAAcP,CAAf,CAAf;AAAiCQ,MAAAA,UAAU,EAAC,CAAC,CAA7C;AAA+CC,MAAAA,MAAM,EAAC,CAAC;AAAvD,KAAD,EAA2D;AAACH,MAAAA,OAAO,EAAC,kBAAT;AAA4BE,MAAAA,UAAU,EAAC,CAAC,CAAxC;AAA0CC,MAAAA,MAAM,EAAC,CAAC;AAAlD,KAA3D,CAAT;AAA0HC,IAAAA,MAAM,EAAC;AAACJ,MAAAA,OAAO,EAAC,uDAAT;AAAiEG,MAAAA,MAAM,EAAC,CAAC;AAAzE,KAAjI;AAA6ME,IAAAA,IAAI,EAAC;AAACL,MAAAA,OAAO,EAAC,0EAAT;AAAoFG,MAAAA,MAAM,EAAC,CAAC,CAA5F;AAA8FG,MAAAA,KAAK,EAAC;AAApG,KAAlN;AAAgUC,IAAAA,SAAS,EAAC;AAACP,MAAAA,OAAO,EAAC,6CAAT;AAAuDG,MAAAA,MAAM,EAAC,CAAC,CAA/D;AAAiEG,MAAAA,KAAK,EAAC,WAAvE;AAAmFE,MAAAA,MAAM,EAAC;AAACJ,QAAAA,MAAM,EAAC;AAAR;AAA1F,KAA1U;AAAmb,sBAAiB;AAACJ,MAAAA,OAAO,EAAC,0DAAT;AAAoEE,MAAAA,UAAU,EAAC,CAAC,CAAhF;AAAkFC,MAAAA,MAAM,EAAC,CAAC,CAA1F;AAA4FK,MAAAA,MAAM,EAAC;AAAC,+BAAsB;AAACR,UAAAA,OAAO,EAAC,SAAT;AAAmBM,UAAAA,KAAK,EAAC;AAAzB,SAAvB;AAA+DG,QAAAA,IAAI,EAAC;AAApE;AAAnG,KAApc;AAAknB,2BAAsB;AAACT,MAAAA,OAAO,EAAC,MAAT;AAAgBM,MAAAA,KAAK,EAAC;AAAtB,KAAxoB;AAAwqB,0BAAqB;AAACN,MAAAA,OAAO,EAAC,gBAAT;AAA0BE,MAAAA,UAAU,EAAC,CAAC,CAAtC;AAAwCI,MAAAA,KAAK,EAAC;AAA9C,KAA7rB;AAA0vBI,IAAAA,QAAQ,EAAC,OAAnwB;AAA2wB,2BAAsB;AAACV,MAAAA,OAAO,EAAC,cAAT;AAAwBE,MAAAA,UAAU,EAAC,CAAC,CAApC;AAAsCI,MAAAA,KAAK,EAAC;AAA5C,KAAjyB;AAAy1B,uBAAkB;AAACN,MAAAA,OAAO,EAAC,iCAAT;AAA2CE,MAAAA,UAAU,EAAC,CAAC,CAAvD;AAAyDI,MAAAA,KAAK,EAAC;AAA/D,KAA32B;AAAw7B,0BAAqB,CAAC;AAACN,MAAAA,OAAO,EAAC,oCAAT;AAA8CE,MAAAA,UAAU,EAAC,CAAC,CAA1D;AAA4DI,MAAAA,KAAK,EAAC;AAAlE,KAAD,EAAgF;AAACN,MAAAA,OAAO,EAAC,uFAAT;AAAiGE,MAAAA,UAAU,EAAC,CAAC,CAA7G;AAA+GI,MAAAA,KAAK,EAAC,WAArH;AAAiIE,MAAAA,MAAM,EAAC;AAACG,QAAAA,WAAW,EAAC;AAAb;AAAxI,KAAhF,CAA78B;AAA0rCC,IAAAA,OAAO,EAAC,CAAC,6RAAD,EAA+R,8DAA/R,CAAlsC;AAAiiDC,IAAAA,QAAQ,EAAC,iCAA1iD;AAA4kDC,IAAAA,KAAK,EAAC;AAACd,MAAAA,OAAO,EAAC,QAAT;AAAkBM,MAAAA,KAAK,EAAC;AAAxB,KAAllD;AAAsnDS,IAAAA,QAAQ,EAAC,qBAA/nD;AAAqpD,kBAAa,cAAlqD;AAAirDC,IAAAA,SAAS,EAAC;AAAChB,MAAAA,OAAO,EAAC,4DAAT;AAAsEQ,MAAAA,MAAM,EAAC;AAACG,QAAAA,WAAW,EAAC;AAAb;AAA7E,KAA3rD;AAA4xDM,IAAAA,MAAM,EAAC,4KAAnyD;AAAg9DC,IAAAA,OAAO,EAAC,oBAAx9D;AAA6+DP,IAAAA,WAAW,EAAC,kCAAz/D;AAA4hEQ,IAAAA,QAAQ,EAAC;AAAriE,GAAtE,EAAkqE1B,CAAC,CAACI,SAAF,CAAYC,IAAZ,CAAiB,gBAAjB,EAAmCU,MAAnC,CAA0CC,IAA1C,GAA+ChB,CAAC,CAACI,SAAF,CAAYC,IAA7tE,EAAkuEL,CAAC,CAACI,SAAF,CAAYC,IAAZ,CAAiBS,SAAjB,CAA2BC,MAA3B,CAAkCJ,MAAlC,GAAyCX,CAAC,CAACI,SAAF,CAAYC,IAAZ,CAAiBM,MAA5xE;AAAmyE,CAA/5E,CAAg6EgB,KAAh6E,CAAD","sourcesContent":["!function(e){for(var a=\"/\\\\*(?:[^*/]|\\\\*(?!/)|/(?!\\\\*)|<self>)*\\\\*/\",t=0;t<2;t++)a=a.replace(/<self>/g,function(){return a});a=a.replace(/<self>/g,function(){return\"[^\\\\s\\\\S]\"}),e.languages.rust={comment:[{pattern:RegExp(\"(^|[^\\\\\\\\])\"+a),lookbehind:!0,greedy:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,greedy:!0},char:{pattern:/b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,greedy:!0,alias:\"string\"},attribute:{pattern:/#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,greedy:!0,alias:\"attr-name\",inside:{string:null}},\"closure-params\":{pattern:/([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,lookbehind:!0,greedy:!0,inside:{\"closure-punctuation\":{pattern:/^\\||\\|$/,alias:\"punctuation\"},rest:null}},\"lifetime-annotation\":{pattern:/'\\w+/,alias:\"symbol\"},\"fragment-specifier\":{pattern:/(\\$\\w+:)[a-z]+/,lookbehind:!0,alias:\"punctuation\"},variable:/\\$\\w+/,\"function-definition\":{pattern:/(\\bfn\\s+)\\w+/,lookbehind:!0,alias:\"function\"},\"type-definition\":{pattern:/(\\b(?:enum|struct|union)\\s+)\\w+/,lookbehind:!0,alias:\"class-name\"},\"module-declaration\":[{pattern:/(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,lookbehind:!0,alias:\"namespace\"},{pattern:/(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,lookbehind:!0,alias:\"namespace\",inside:{punctuation:/::/}}],keyword:[/\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,/\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/],function:/\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,macro:{pattern:/\\b\\w+!/,alias:\"property\"},constant:/\\b[A-Z_][A-Z_\\d]+\\b/,\"class-name\":/\\b[A-Z]\\w*\\b/,namespace:{pattern:/(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,inside:{punctuation:/::/}},number:/\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,boolean:/\\b(?:false|true)\\b/,punctuation:/->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,operator:/[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/},e.languages.rust[\"closure-params\"].inside.rest=e.languages.rust,e.languages.rust.attribute.inside.string=e.languages.rust.string}(Prism);"]},"metadata":{},"sourceType":"script"}