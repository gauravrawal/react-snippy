{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTypedSelector } from './use-typed-selector';\nexport const useCumulativeCode = cellId => {\n  _s();\n\n  const cumulativeCode = useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n\n    var show = (value) => {\n      const root = document.querySelector('#root');\n\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root)\n        } else {\n          root.innerHTML = JSON.stringify(value);\n        }\n      } else {\n        root.innerHTML = value;\n      }\n    };\n    `;\n    const showFuncNoop = `var show = () => {}`;\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cellId) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  });\n};\n\n_s(useCumulativeCode, \"5QuS5d71aZyuyE16WJsZPaJlMfk=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","cumulativeCode","state","data","order","cells","orderedCells","map","id","showFunc","showFuncNoop","c","type","push","content"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,sBAAjC;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAoB;AAAA;;AACnD,QAAMC,cAAc,GAAGH,gBAAgB,CAAEI,KAAD,IAAW;AACjD,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,KAA9B;AACA,UAAMC,YAAY,GAAGF,KAAK,CAACG,GAAN,CAAWC,EAAD,IAAQL,IAAI,CAACK,EAAD,CAAtB,CAArB;AAEA,UAAMC,QAAQ,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjBI;AAmBA,UAAMC,YAAY,GAAI,qBAAtB;AACA,UAAMT,cAAc,GAAG,EAAvB;;AACA,SAAK,IAAIU,CAAT,IAAcL,YAAd,EAA4B;AAC1B,UAAIK,CAAC,CAACC,IAAF,KAAW,MAAf,EAAuB;AACrB,YAAID,CAAC,CAACH,EAAF,KAASR,MAAb,EAAqB;AACnBC,UAAAA,cAAc,CAACY,IAAf,CAAoBJ,QAApB;AACD,SAFD,MAEO;AACLR,UAAAA,cAAc,CAACY,IAAf,CAAoBH,YAApB;AACD;;AACDT,QAAAA,cAAc,CAACY,IAAf,CAAoBF,CAAC,CAACG,OAAtB;AACD;;AAED,UAAIH,CAAC,CAACH,EAAF,KAASR,MAAb,EAAqB;AACnB;AACD;AACF;;AACD,WAAOC,cAAP;AACD,GAxCsC,CAAvC;AAyCD,CA1CM;;GAAMF,iB;UACYD,gB","sourcesContent":["import { useTypedSelector } from './use-typed-selector';\n\nexport const useCumulativeCode = (cellId: string) => {\n  const cumulativeCode = useTypedSelector((state) => {\n    const { data, order } = state.cells;\n    const orderedCells = order.map((id) => data[id]);\n\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n\n    var show = (value) => {\n      const root = document.querySelector('#root');\n\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root)\n        } else {\n          root.innerHTML = JSON.stringify(value);\n        }\n      } else {\n        root.innerHTML = value;\n      }\n    };\n    `;\n\n    const showFuncNoop = `var show = () => {}`;\n    const cumulativeCode = [];\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cellId) {\n        break;\n      }\n    }\n    return cumulativeCode;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}