{"ast":null,"code":"/* TODO\n\tAdd support for variables inside double quoted strings\n\tAdd support for {php}\n*/\n(function (Prism) {\n  Prism.languages.smarty = {\n    'comment': /\\{\\*[\\s\\S]*?\\*\\}/,\n    'delimiter': {\n      pattern: /^\\{|\\}$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    'variable': [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n      pattern: /(\\.|->)(?!\\d)\\w+/,\n      lookbehind: true\n    }, {\n      pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n      lookbehind: true\n    }],\n    'function': [{\n      pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n      lookbehind: true\n    }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n    'attr-name': {\n      // Value is made optional because it may have already been tokenized\n      pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n      inside: {\n        'variable': {\n          pattern: /(=\\s*)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        'operator': /=/\n      }\n    },\n    'punctuation': [/[\\[\\]().,:`]|->/],\n    'operator': [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n    'keyword': /\\b(?:false|off|on|no|true|yes)\\b/\n  }; // Tokenize all inline Smarty expressions\n\n  Prism.hooks.add('before-tokenize', function (env) {\n    var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n    var smartyLitteralStart = '{literal}';\n    var smartyLitteralEnd = '{/literal}';\n    var smartyLitteralMode = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n      // Smarty tags inside {literal} block are ignored\n      if (match === smartyLitteralEnd) {\n        smartyLitteralMode = false;\n      }\n\n      if (!smartyLitteralMode) {\n        if (match === smartyLitteralStart) {\n          smartyLitteralMode = true;\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  }); // Re-insert the tokens after tokenizing\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n  });\n})(Prism);","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/prismjs/components/prism-smarty.js"],"names":["Prism","languages","smarty","pattern","alias","lookbehind","inside","hooks","add","env","smartyPattern","smartyLitteralStart","smartyLitteralEnd","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"mappings":"AAAA;AACA;AACA;AACA;AAEC,WAAUA,KAAV,EAAiB;AAEjBA,EAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB;AACxB,eAAW,kBADa;AAExB,iBAAa;AACZC,MAAAA,OAAO,EAAE,UADG;AAEZC,MAAAA,KAAK,EAAE;AAFK,KAFW;AAMxB,cAAU,kCANc;AAOxB,cAAU,8DAPc;AAQxB,gBAAY,CACX,aADW,EAEX,aAFW,EAGX;AACCD,MAAAA,OAAO,EAAE,kBADV;AAECE,MAAAA,UAAU,EAAE;AAFb,KAHW,EAOX;AACCF,MAAAA,OAAO,EAAE,qBADV;AAECE,MAAAA,UAAU,EAAE;AAFb,KAPW,CARY;AAoBxB,gBAAY,CACX;AACCF,MAAAA,OAAO,EAAE,oBADV;AAECE,MAAAA,UAAU,EAAE;AAFb,KADW,EAKX,eALW,EAMX,iBANW,CApBY;AA4BxB,iBAAa;AACZ;AACAF,MAAAA,OAAO,EAAE,0BAFG;AAGZG,MAAAA,MAAM,EAAE;AACP,oBAAY;AACXH,UAAAA,OAAO,EAAE,iBADE;AAEXE,UAAAA,UAAU,EAAE;AAFD,SADL;AAKP,oBAAY;AALL;AAHI,KA5BW;AAuCxB,mBAAe,CACd,iBADc,CAvCS;AA0CxB,gBAAY,CACX,kCADW,EAEX,gDAFW,EAGX,gDAHW,CA1CY;AA+CxB,eAAW;AA/Ca,GAAzB,CAFiB,CAoDjB;;AACAL,EAAAA,KAAK,CAACO,KAAN,CAAYC,GAAZ,CAAgB,iBAAhB,EAAmC,UAAUC,GAAV,EAAe;AACjD,QAAIC,aAAa,GAAG,gCAApB;AACA,QAAIC,mBAAmB,GAAG,WAA1B;AACA,QAAIC,iBAAiB,GAAG,YAAxB;AACA,QAAIC,kBAAkB,GAAG,KAAzB;AAEAb,IAAAA,KAAK,CAACC,SAAN,CAAgB,mBAAhB,EAAqCa,iBAArC,CAAuDL,GAAvD,EAA4D,QAA5D,EAAsEC,aAAtE,EAAqF,UAAUK,KAAV,EAAiB;AACrG;AACA,UAAIA,KAAK,KAAKH,iBAAd,EAAiC;AAChCC,QAAAA,kBAAkB,GAAG,KAArB;AACA;;AAED,UAAI,CAACA,kBAAL,EAAyB;AACxB,YAAIE,KAAK,KAAKJ,mBAAd,EAAmC;AAClCE,UAAAA,kBAAkB,GAAG,IAArB;AACA;;AAED,eAAO,IAAP;AACA;;AACD,aAAO,KAAP;AACA,KAdD;AAeA,GArBD,EArDiB,CA4EjB;;AACAb,EAAAA,KAAK,CAACO,KAAN,CAAYC,GAAZ,CAAgB,gBAAhB,EAAkC,UAAUC,GAAV,EAAe;AAChDT,IAAAA,KAAK,CAACC,SAAN,CAAgB,mBAAhB,EAAqCe,oBAArC,CAA0DP,GAA1D,EAA+D,QAA/D;AACA,GAFD;AAIA,CAjFA,EAiFCT,KAjFD,CAAD","sourcesContent":["/* TODO\n\tAdd support for variables inside double quoted strings\n\tAdd support for {php}\n*/\n\n(function (Prism) {\n\n\tPrism.languages.smarty = {\n\t\t'comment': /\\{\\*[\\s\\S]*?\\*\\}/,\n\t\t'delimiter': {\n\t\t\tpattern: /^\\{|\\}$/i,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n\t\t'variable': [\n\t\t\t/\\$(?!\\d)\\w+/,\n\t\t\t/#(?!\\d)\\w+#/,\n\t\t\t{\n\t\t\t\tpattern: /(\\.|->)(?!\\d)\\w+/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'function': [\n\t\t\t{\n\t\t\t\tpattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t/^\\/?(?!\\d)\\w+/,\n\t\t\t/(?!\\d)\\w+(?=\\()/\n\t\t],\n\t\t'attr-name': {\n\t\t\t// Value is made optional because it may have already been tokenized\n\t\t\tpattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n\t\t\tinside: {\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /(=\\s*)(?!\\d)\\w+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'operator': /=/\n\t\t\t}\n\t\t},\n\t\t'punctuation': [\n\t\t\t/[\\[\\]().,:`]|->/\n\t\t],\n\t\t'operator': [\n\t\t\t/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n\t\t\t/\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n\t\t\t/\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/\n\t\t],\n\t\t'keyword': /\\b(?:false|off|on|no|true|yes)\\b/\n\t};\n\n\t// Tokenize all inline Smarty expressions\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tvar smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n\t\tvar smartyLitteralStart = '{literal}';\n\t\tvar smartyLitteralEnd = '{/literal}';\n\t\tvar smartyLitteralMode = false;\n\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n\t\t\t// Smarty tags inside {literal} block are ignored\n\t\t\tif (match === smartyLitteralEnd) {\n\t\t\t\tsmartyLitteralMode = false;\n\t\t\t}\n\n\t\t\tif (!smartyLitteralMode) {\n\t\t\t\tif (match === smartyLitteralStart) {\n\t\t\t\t\tsmartyLitteralMode = true;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t});\n\n\t// Re-insert the tokens after tokenizing\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n\t});\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}