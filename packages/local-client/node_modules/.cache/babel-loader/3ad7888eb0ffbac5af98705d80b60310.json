{"ast":null,"code":"import * as React from 'react';\nimport { selectWord } from '../utils/markdownUtils';\nexport var italic = {\n  name: 'italic',\n  keyCommand: 'italic',\n  buttonProps: {\n    'aria-label': 'Add italic text'\n  },\n  icon: /*#__PURE__*/React.createElement(\"svg\", {\n    \"data-name\": \"italic\",\n    width: \"12\",\n    height: \"12\",\n    role: \"img\",\n    viewBox: \"0 0 320 512\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z\"\n  })),\n  execute: function execute(state, api) {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = selectWord({\n      text: state.text,\n      selection: state.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange); // Replaces the current selection with the italic mark up\n\n    var state2 = api.replaceSelection(\"*\".concat(state1.selectedText, \"*\")); // Adjust the selection to not contain the *\n\n    api.setSelectionRange({\n      start: state2.selection.end - 1 - state1.selectedText.length,\n      end: state2.selection.end - 1\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/commands/italic.tsx"],"names":["italic","name","keyCommand","buttonProps","icon","execute","newSelectionRange","selectWord","text","state","selection","state1","api","state2","start","end"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,UAAA,QAAA,wBAAA;AAEA,OAAO,IAAMA,MAAgB,GAAG;AAC9BC,EAAAA,IAAI,EAD0B,QAAA;AAE9BC,EAAAA,UAAU,EAFoB,QAAA;AAG9BC,EAAAA,WAAW,EAAE;AAAE,kBAAc;AAAhB,GAHiB;AAI9BC,EAAAA,IAAI,EAAA,aACF,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,iBAAL,QAAA;AAAwB,IAAA,KAAK,EAA7B,IAAA;AAAmC,IAAA,MAAM,EAAzC,IAAA;AAA+C,IAAA,IAAI,EAAnD,KAAA;AAA0D,IAAA,OAAO,EAAC;AAAlE,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,IAAI,EAAV,cAAA;AAA0B,IAAA,CAAC,EAAC;AAA5B,GAAA,CADF,CAL4B;AAS9BC,EAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,KAAA,EAAA,GAAA,EAAoC;AAC3C;AACA,QAAMC,iBAAiB,GAAGC,UAAU,CAAC;AAAEC,MAAAA,IAAI,EAAEC,KAAK,CAAb,IAAA;AAAoBC,MAAAA,SAAS,EAAED,KAAK,CAACC;AAArC,KAAD,CAApC;AACA,QAAMC,MAAM,GAAGC,GAAG,CAAHA,iBAAAA,CAH4B,iBAG5BA,CAAf,CAH2C,CAI3C;;AACA,QAAMC,MAAM,GAAGD,GAAG,CAAHA,gBAAAA,CAAAA,IAAAA,MAAAA,CAAyBD,MAAM,CAA/BC,YAAAA,EAL4B,GAK5BA,CAAAA,CAAf,CAL2C,CAM3C;;AACAA,IAAAA,GAAG,CAAHA,iBAAAA,CAAsB;AACpBE,MAAAA,KAAK,EAAED,MAAM,CAANA,SAAAA,CAAAA,GAAAA,GAAAA,CAAAA,GAA2BF,MAAM,CAANA,YAAAA,CADd,MAAA;AAEpBI,MAAAA,GAAG,EAAEF,MAAM,CAANA,SAAAA,CAAAA,GAAAA,GAAuB;AAFR,KAAtBD;AAID;AApB6B,CAAzB","sourcesContent":["import * as React from 'react';\nimport { ICommand, TextState, TextApi } from './';\nimport { selectWord } from '../utils/markdownUtils';\n\nexport const italic: ICommand = {\n  name: 'italic',\n  keyCommand: 'italic',\n  buttonProps: { 'aria-label': 'Add italic text' },\n  icon: (\n    <svg data-name=\"italic\" width=\"12\" height=\"12\" role=\"img\" viewBox=\"0 0 320 512\">\n      <path fill=\"currentColor\" d=\"M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z\" />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the italic mark up\n    const state2 = api.replaceSelection(`*${state1.selectedText}*`);\n    // Adjust the selection to not contain the *\n    api.setSelectionRange({\n      start: state2.selection.end - 1 - state1.selectedText.length,\n      end: state2.selection.end - 1\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}