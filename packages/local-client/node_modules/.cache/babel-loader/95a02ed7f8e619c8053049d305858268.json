{"ast":null,"code":"var ccount = require('ccount');\n\nvar findAndReplace = require('mdast-util-find-and-replace');\n\nvar unicodePunctuation = require('micromark/dist/character/unicode-punctuation');\n\nvar unicodeWhitespace = require('micromark/dist/character/unicode-whitespace');\n\nexports.transforms = [transformGfmAutolinkLiterals];\nexports.enter = {\n  literalAutolink: enterLiteralAutolink,\n  literalAutolinkEmail: enterLiteralAutolinkValue,\n  literalAutolinkHttp: enterLiteralAutolinkValue,\n  literalAutolinkWww: enterLiteralAutolinkValue\n};\nexports.exit = {\n  literalAutolink: exitLiteralAutolink,\n  literalAutolinkEmail: exitLiteralAutolinkEmail,\n  literalAutolinkHttp: exitLiteralAutolinkHttp,\n  literalAutolinkWww: exitLiteralAutolinkWww\n};\n\nfunction enterLiteralAutolink(token) {\n  this.enter({\n    type: 'link',\n    title: null,\n    url: '',\n    children: []\n  }, token);\n}\n\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token);\n}\n\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token);\n}\n\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token);\n  this.stack[this.stack.length - 1].url = 'http://' + this.sliceSerialize(token);\n}\n\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token);\n}\n\nfunction exitLiteralAutolink(token) {\n  this.exit(token);\n}\n\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(tree, [[/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/i, findUrl], [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/, findEmail]], {\n    ignore: ['link', 'linkReference']\n  });\n}\n\nfunction findUrl($0, protocol, domain, path, match) {\n  var prefix = '';\n  var parts;\n  var result; // Not an expected previous character.\n\n  if (!previous(match)) {\n    return false;\n  } // Treat `www` as part of the domain.\n\n\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain;\n    protocol = '';\n    prefix = 'http://';\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false;\n  }\n\n  parts = splitUrl(domain + path);\n  if (!parts[0]) return false;\n  result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{\n      type: 'text',\n      value: protocol + parts[0]\n    }]\n  };\n\n  if (parts[1]) {\n    result = [result, {\n      type: 'text',\n      value: parts[1]\n    }];\n  }\n\n  return result;\n}\n\nfunction findEmail($0, atext, label, match) {\n  // Not an expected previous character.\n  if (!previous(match, true) || /[_-]$/.test(label)) {\n    return false;\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{\n      type: 'text',\n      value: atext + '@' + label\n    }]\n  };\n}\n\nfunction isCorrectDomain(domain) {\n  var parts = domain.split('.');\n\n  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 2]))) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction splitUrl(url) {\n  var trail = /[!\"&'),.:;<>?\\]}]+$/.exec(url);\n  var closingParenIndex;\n  var openingParens;\n  var closingParens;\n\n  if (trail) {\n    url = url.slice(0, trail.index);\n    trail = trail[0];\n    closingParenIndex = trail.indexOf(')');\n    openingParens = ccount(url, '(');\n    closingParens = ccount(url, ')');\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1);\n      trail = trail.slice(closingParenIndex + 1);\n      closingParenIndex = trail.indexOf(')');\n      closingParens++;\n    }\n  }\n\n  return [url, trail];\n}\n\nfunction previous(match, email) {\n  var code = match.input.charCodeAt(match.index - 1);\n  return (code !== code || unicodeWhitespace(code) || unicodePunctuation(code)) && (!email || code !== 47);\n}","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/mdast-util-gfm-autolink-literal/from-markdown.js"],"names":["ccount","require","findAndReplace","unicodePunctuation","unicodeWhitespace","exports","transforms","transformGfmAutolinkLiterals","enter","literalAutolink","enterLiteralAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","exit","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","token","type","title","url","children","config","autolinkProtocol","call","data","stack","length","sliceSerialize","autolinkEmail","tree","findUrl","findEmail","ignore","$0","protocol","domain","path","match","prefix","parts","result","previous","test","isCorrectDomain","splitUrl","value","atext","label","split","trail","exec","closingParenIndex","openingParens","closingParens","slice","index","indexOf","email","code","input","charCodeAt"],"mappings":"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","sourcesContent":["var ccount = require('ccount')\nvar findAndReplace = require('mdast-util-find-and-replace')\nvar unicodePunctuation = require('micromark/dist/character/unicode-punctuation')\nvar unicodeWhitespace = require('micromark/dist/character/unicode-whitespace')\n\nexports.transforms = [transformGfmAutolinkLiterals]\nexports.enter = {\n  literalAutolink: enterLiteralAutolink,\n  literalAutolinkEmail: enterLiteralAutolinkValue,\n  literalAutolinkHttp: enterLiteralAutolinkValue,\n  literalAutolinkWww: enterLiteralAutolinkValue\n}\nexports.exit = {\n  literalAutolink: exitLiteralAutolink,\n  literalAutolinkEmail: exitLiteralAutolinkEmail,\n  literalAutolinkHttp: exitLiteralAutolinkHttp,\n  literalAutolinkWww: exitLiteralAutolinkWww\n}\n\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  this.stack[this.stack.length - 1].url = 'http://' + this.sliceSerialize(token)\n}\n\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/i, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\nfunction findUrl($0, protocol, domain, path, match) {\n  var prefix = ''\n  var parts\n  var result\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    result = [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\nfunction findEmail($0, atext, label, match) {\n  // Not an expected previous character.\n  if (!previous(match, true) || /[_-]$/.test(label)) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\nfunction isCorrectDomain(domain) {\n  var parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\nfunction splitUrl(url) {\n  var trail = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n  var closingParenIndex\n  var openingParens\n  var closingParens\n\n  if (trail) {\n    url = url.slice(0, trail.index)\n    trail = trail[0]\n    closingParenIndex = trail.indexOf(')')\n    openingParens = ccount(url, '(')\n    closingParens = ccount(url, ')')\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1)\n      trail = trail.slice(closingParenIndex + 1)\n      closingParenIndex = trail.indexOf(')')\n      closingParens++\n    }\n  }\n\n  return [url, trail]\n}\n\nfunction previous(match, email) {\n  var code = match.input.charCodeAt(match.index - 1)\n  return (\n    (code !== code || unicodeWhitespace(code) || unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n"]},"metadata":{},"sourceType":"script"}