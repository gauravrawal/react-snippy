{"ast":null,"code":"\"use strict\";\n\n;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar core_operators_1 = require(\"./core-operators\");\n\nvar es2019_1 = tslib_1.__importDefault(require(\"./es2019\"));\n\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\n\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\n\nfunction default_1(fork) {\n  fork.use(es2019_1.default);\n  var types = fork.use(types_1.default);\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var shared = fork.use(shared_1.default);\n  var defaults = shared.defaults;\n  def(\"ImportExpression\").bases(\"Expression\").build(\"source\").field(\"source\", def(\"Expression\"));\n  def(\"ExportAllDeclaration\").build(\"source\", \"exported\").field(\"source\", def(\"Literal\")).field(\"exported\", or(def(\"Identifier\"), null)); // Optional chaining\n\n  def(\"ChainElement\").bases(\"Node\").field(\"optional\", Boolean, defaults[\"false\"]);\n  def(\"CallExpression\").bases(\"Expression\", \"ChainElement\");\n  def(\"MemberExpression\").bases(\"Expression\", \"ChainElement\");\n  def(\"ChainExpression\").bases(\"Expression\").build(\"expression\").field(\"expression\", def(\"ChainElement\"));\n  def(\"OptionalCallExpression\").bases(\"CallExpression\").build(\"callee\", \"arguments\", \"optional\").field(\"optional\", Boolean, defaults[\"true\"]); // Deprecated optional chaining type, doesn't work with babelParser@7.11.0 or newer\n\n  def(\"OptionalMemberExpression\").bases(\"MemberExpression\").build(\"object\", \"property\", \"computed\", \"optional\").field(\"optional\", Boolean, defaults[\"true\"]); // Nullish coalescing\n\n  var LogicalOperator = or.apply(void 0, tslib_1.__spreadArrays(core_operators_1.LogicalOperators, [\"??\"]));\n  def(\"LogicalExpression\").field(\"operator\", LogicalOperator);\n}\n\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/github/react-snippy/node_modules/jscodeshift/node_modules/ast-types/def/es2020.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","core_operators_1","es2019_1","__importDefault","types_1","shared_1","default_1","fork","use","default","types","def","Type","or","shared","defaults","bases","build","field","Boolean","LogicalOperator","apply","__spreadArrays","LogicalOperators","module"],"mappings":"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","sourcesContent":["\"use strict\";;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_operators_1 = require(\"./core-operators\");\nvar es2019_1 = tslib_1.__importDefault(require(\"./es2019\"));\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\nfunction default_1(fork) {\n    fork.use(es2019_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var shared = fork.use(shared_1.default);\n    var defaults = shared.defaults;\n    def(\"ImportExpression\")\n        .bases(\"Expression\")\n        .build(\"source\")\n        .field(\"source\", def(\"Expression\"));\n    def(\"ExportAllDeclaration\")\n        .build(\"source\", \"exported\")\n        .field(\"source\", def(\"Literal\"))\n        .field(\"exported\", or(def(\"Identifier\"), null));\n    // Optional chaining\n    def(\"ChainElement\")\n        .bases(\"Node\")\n        .field(\"optional\", Boolean, defaults[\"false\"]);\n    def(\"CallExpression\")\n        .bases(\"Expression\", \"ChainElement\");\n    def(\"MemberExpression\")\n        .bases(\"Expression\", \"ChainElement\");\n    def(\"ChainExpression\")\n        .bases(\"Expression\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"ChainElement\"));\n    def(\"OptionalCallExpression\")\n        .bases(\"CallExpression\")\n        .build(\"callee\", \"arguments\", \"optional\")\n        .field(\"optional\", Boolean, defaults[\"true\"]);\n    // Deprecated optional chaining type, doesn't work with babelParser@7.11.0 or newer\n    def(\"OptionalMemberExpression\")\n        .bases(\"MemberExpression\")\n        .build(\"object\", \"property\", \"computed\", \"optional\")\n        .field(\"optional\", Boolean, defaults[\"true\"]);\n    // Nullish coalescing\n    var LogicalOperator = or.apply(void 0, tslib_1.__spreadArrays(core_operators_1.LogicalOperators, [\"??\"]));\n    def(\"LogicalExpression\")\n        .field(\"operator\", LogicalOperator);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n"]},"metadata":{},"sourceType":"script"}