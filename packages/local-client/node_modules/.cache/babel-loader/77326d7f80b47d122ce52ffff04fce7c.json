{"ast":null,"code":"\"use strict\";\n\n;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar es2020_1 = tslib_1.__importDefault(require(\"./es2020\"));\n\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\n\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\n\nfunction default_1(fork) {\n  fork.use(es2020_1.default);\n  var types = fork.use(types_1.default);\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var defaults = fork.use(shared_1.default).defaults;\n  def(\"JSXAttribute\").bases(\"Node\").build(\"name\", \"value\").field(\"name\", or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"))).field(\"value\", or(def(\"Literal\"), // attr=\"value\"\n  def(\"JSXExpressionContainer\"), // attr={value}\n  def(\"JSXElement\"), // attr=<div />\n  def(\"JSXFragment\"), // attr=<></>\n  null // attr= or just attr\n  ), defaults[\"null\"]);\n  def(\"JSXIdentifier\").bases(\"Identifier\").build(\"name\").field(\"name\", String);\n  def(\"JSXNamespacedName\").bases(\"Node\").build(\"namespace\", \"name\").field(\"namespace\", def(\"JSXIdentifier\")).field(\"name\", def(\"JSXIdentifier\"));\n  def(\"JSXMemberExpression\").bases(\"MemberExpression\").build(\"object\", \"property\").field(\"object\", or(def(\"JSXIdentifier\"), def(\"JSXMemberExpression\"))).field(\"property\", def(\"JSXIdentifier\")).field(\"computed\", Boolean, defaults.false);\n  var JSXElementName = or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"), def(\"JSXMemberExpression\"));\n  def(\"JSXSpreadAttribute\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n  var JSXAttributes = [or(def(\"JSXAttribute\"), def(\"JSXSpreadAttribute\"))];\n  def(\"JSXExpressionContainer\").bases(\"Expression\").build(\"expression\").field(\"expression\", or(def(\"Expression\"), def(\"JSXEmptyExpression\")));\n  var JSXChildren = [or(def(\"JSXText\"), def(\"JSXExpressionContainer\"), def(\"JSXSpreadChild\"), def(\"JSXElement\"), def(\"JSXFragment\"), def(\"Literal\") // Legacy: Esprima should return JSXText instead.\n  )];\n  def(\"JSXElement\").bases(\"Expression\").build(\"openingElement\", \"closingElement\", \"children\").field(\"openingElement\", def(\"JSXOpeningElement\")).field(\"closingElement\", or(def(\"JSXClosingElement\"), null), defaults[\"null\"]).field(\"children\", JSXChildren, defaults.emptyArray).field(\"name\", JSXElementName, function () {\n    // Little-known fact: the `this` object inside a default function\n    // is none other than the partially-built object itself, and any\n    // fields initialized directly from builder function arguments\n    // (like openingElement, closingElement, and children) are\n    // guaranteed to be available.\n    return this.openingElement.name;\n  }, true) // hidden from traversal\n  .field(\"selfClosing\", Boolean, function () {\n    return this.openingElement.selfClosing;\n  }, true) // hidden from traversal\n  .field(\"attributes\", JSXAttributes, function () {\n    return this.openingElement.attributes;\n  }, true); // hidden from traversal\n\n  def(\"JSXOpeningElement\").bases(\"Node\").build(\"name\", \"attributes\", \"selfClosing\").field(\"name\", JSXElementName).field(\"attributes\", JSXAttributes, defaults.emptyArray).field(\"selfClosing\", Boolean, defaults[\"false\"]);\n  def(\"JSXClosingElement\").bases(\"Node\").build(\"name\").field(\"name\", JSXElementName);\n  def(\"JSXFragment\").bases(\"Expression\").build(\"openingFragment\", \"closingFragment\", \"children\").field(\"openingFragment\", def(\"JSXOpeningFragment\")).field(\"closingFragment\", def(\"JSXClosingFragment\")).field(\"children\", JSXChildren, defaults.emptyArray);\n  def(\"JSXOpeningFragment\").bases(\"Node\").build();\n  def(\"JSXClosingFragment\").bases(\"Node\").build();\n  def(\"JSXText\").bases(\"Literal\").build(\"value\", \"raw\").field(\"value\", String).field(\"raw\", String, function () {\n    return this.value;\n  });\n  def(\"JSXEmptyExpression\").bases(\"Node\").build();\n  def(\"JSXSpreadChild\").bases(\"Node\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n}\n\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/jscodeshift/node_modules/ast-types/def/jsx.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","es2020_1","__importDefault","types_1","shared_1","default_1","fork","use","default","types","def","Type","or","defaults","bases","build","field","String","Boolean","false","JSXElementName","JSXAttributes","JSXChildren","emptyArray","openingElement","name","selfClosing","attributes","module"],"mappings":"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","sourcesContent":["\"use strict\";;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar es2020_1 = tslib_1.__importDefault(require(\"./es2020\"));\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\nfunction default_1(fork) {\n    fork.use(es2020_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    def(\"JSXAttribute\")\n        .bases(\"Node\")\n        .build(\"name\", \"value\")\n        .field(\"name\", or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\")))\n        .field(\"value\", or(def(\"Literal\"), // attr=\"value\"\n    def(\"JSXExpressionContainer\"), // attr={value}\n    def(\"JSXElement\"), // attr=<div />\n    def(\"JSXFragment\"), // attr=<></>\n    null // attr= or just attr\n    ), defaults[\"null\"]);\n    def(\"JSXIdentifier\")\n        .bases(\"Identifier\")\n        .build(\"name\")\n        .field(\"name\", String);\n    def(\"JSXNamespacedName\")\n        .bases(\"Node\")\n        .build(\"namespace\", \"name\")\n        .field(\"namespace\", def(\"JSXIdentifier\"))\n        .field(\"name\", def(\"JSXIdentifier\"));\n    def(\"JSXMemberExpression\")\n        .bases(\"MemberExpression\")\n        .build(\"object\", \"property\")\n        .field(\"object\", or(def(\"JSXIdentifier\"), def(\"JSXMemberExpression\")))\n        .field(\"property\", def(\"JSXIdentifier\"))\n        .field(\"computed\", Boolean, defaults.false);\n    var JSXElementName = or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"), def(\"JSXMemberExpression\"));\n    def(\"JSXSpreadAttribute\")\n        .bases(\"Node\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n    var JSXAttributes = [or(def(\"JSXAttribute\"), def(\"JSXSpreadAttribute\"))];\n    def(\"JSXExpressionContainer\")\n        .bases(\"Expression\")\n        .build(\"expression\")\n        .field(\"expression\", or(def(\"Expression\"), def(\"JSXEmptyExpression\")));\n    var JSXChildren = [or(def(\"JSXText\"), def(\"JSXExpressionContainer\"), def(\"JSXSpreadChild\"), def(\"JSXElement\"), def(\"JSXFragment\"), def(\"Literal\") // Legacy: Esprima should return JSXText instead.\n        )];\n    def(\"JSXElement\")\n        .bases(\"Expression\")\n        .build(\"openingElement\", \"closingElement\", \"children\")\n        .field(\"openingElement\", def(\"JSXOpeningElement\"))\n        .field(\"closingElement\", or(def(\"JSXClosingElement\"), null), defaults[\"null\"])\n        .field(\"children\", JSXChildren, defaults.emptyArray)\n        .field(\"name\", JSXElementName, function () {\n        // Little-known fact: the `this` object inside a default function\n        // is none other than the partially-built object itself, and any\n        // fields initialized directly from builder function arguments\n        // (like openingElement, closingElement, and children) are\n        // guaranteed to be available.\n        return this.openingElement.name;\n    }, true) // hidden from traversal\n        .field(\"selfClosing\", Boolean, function () {\n        return this.openingElement.selfClosing;\n    }, true) // hidden from traversal\n        .field(\"attributes\", JSXAttributes, function () {\n        return this.openingElement.attributes;\n    }, true); // hidden from traversal\n    def(\"JSXOpeningElement\")\n        .bases(\"Node\")\n        .build(\"name\", \"attributes\", \"selfClosing\")\n        .field(\"name\", JSXElementName)\n        .field(\"attributes\", JSXAttributes, defaults.emptyArray)\n        .field(\"selfClosing\", Boolean, defaults[\"false\"]);\n    def(\"JSXClosingElement\")\n        .bases(\"Node\")\n        .build(\"name\")\n        .field(\"name\", JSXElementName);\n    def(\"JSXFragment\")\n        .bases(\"Expression\")\n        .build(\"openingFragment\", \"closingFragment\", \"children\")\n        .field(\"openingFragment\", def(\"JSXOpeningFragment\"))\n        .field(\"closingFragment\", def(\"JSXClosingFragment\"))\n        .field(\"children\", JSXChildren, defaults.emptyArray);\n    def(\"JSXOpeningFragment\")\n        .bases(\"Node\")\n        .build();\n    def(\"JSXClosingFragment\")\n        .bases(\"Node\")\n        .build();\n    def(\"JSXText\")\n        .bases(\"Literal\")\n        .build(\"value\", \"raw\")\n        .field(\"value\", String)\n        .field(\"raw\", String, function () {\n        return this.value;\n    });\n    def(\"JSXEmptyExpression\")\n        .bases(\"Node\")\n        .build();\n    def(\"JSXSpreadChild\")\n        .bases(\"Node\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n"]},"metadata":{},"sourceType":"script"}