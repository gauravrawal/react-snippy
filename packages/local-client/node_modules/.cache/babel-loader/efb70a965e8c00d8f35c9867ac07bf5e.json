{"ast":null,"code":"var defaultListItem = require('mdast-util-to-markdown/lib/handle/list-item');\n\nexports.unsafe = [{\n  atBreak: true,\n  character: '-',\n  after: '[:|-]'\n}];\nexports.handlers = {\n  listItem: listItemWithTaskListItem\n};\n\nfunction listItemWithTaskListItem(node, parent, context) {\n  var value = defaultListItem(node, parent, context);\n  var head = node.children[0];\n\n  if (typeof node.checked === 'boolean' && head && head.type === 'paragraph') {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check);\n  }\n\n  return value;\n\n  function check($0) {\n    return $0 + '[' + (node.checked ? 'x' : ' ') + '] ';\n  }\n}","map":{"version":3,"sources":["/Users/gauravrawal/gaurav/udemy/jbook/node_modules/mdast-util-gfm-task-list-item/to-markdown.js"],"names":["defaultListItem","require","exports","unsafe","atBreak","character","after","handlers","listItem","listItemWithTaskListItem","node","parent","context","value","head","children","checked","type","replace","check","$0"],"mappings":"AAAA,IAAIA,eAAe,GAAGC,OAAO,CAAC,6CAAD,CAA7B;;AAEAC,OAAO,CAACC,MAAR,GAAiB,CAAC;AAACC,EAAAA,OAAO,EAAE,IAAV;AAAgBC,EAAAA,SAAS,EAAE,GAA3B;AAAgCC,EAAAA,KAAK,EAAE;AAAvC,CAAD,CAAjB;AAEAJ,OAAO,CAACK,QAAR,GAAmB;AACjBC,EAAAA,QAAQ,EAAEC;AADO,CAAnB;;AAIA,SAASA,wBAAT,CAAkCC,IAAlC,EAAwCC,MAAxC,EAAgDC,OAAhD,EAAyD;AACvD,MAAIC,KAAK,GAAGb,eAAe,CAACU,IAAD,EAAOC,MAAP,EAAeC,OAAf,CAA3B;AACA,MAAIE,IAAI,GAAGJ,IAAI,CAACK,QAAL,CAAc,CAAd,CAAX;;AAEA,MAAI,OAAOL,IAAI,CAACM,OAAZ,KAAwB,SAAxB,IAAqCF,IAArC,IAA6CA,IAAI,CAACG,IAAL,KAAc,WAA/D,EAA4E;AAC1EJ,IAAAA,KAAK,GAAGA,KAAK,CAACK,OAAN,CAAc,iCAAd,EAAiDC,KAAjD,CAAR;AACD;;AAED,SAAON,KAAP;;AAEA,WAASM,KAAT,CAAeC,EAAf,EAAmB;AACjB,WAAOA,EAAE,GAAG,GAAL,IAAYV,IAAI,CAACM,OAAL,GAAe,GAAf,GAAqB,GAAjC,IAAwC,IAA/C;AACD;AACF","sourcesContent":["var defaultListItem = require('mdast-util-to-markdown/lib/handle/list-item')\n\nexports.unsafe = [{atBreak: true, character: '-', after: '[:|-]'}]\n\nexports.handlers = {\n  listItem: listItemWithTaskListItem\n}\n\nfunction listItemWithTaskListItem(node, parent, context) {\n  var value = defaultListItem(node, parent, context)\n  var head = node.children[0]\n\n  if (typeof node.checked === 'boolean' && head && head.type === 'paragraph') {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  function check($0) {\n    return $0 + '[' + (node.checked ? 'x' : ' ') + '] '\n  }\n}\n"]},"metadata":{},"sourceType":"script"}