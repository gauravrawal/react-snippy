import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["className", "source", "style", "onScroll", "onMouseOver"];
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useEffect, useImperativeHandle } from 'react';
import ReactMarkdown from 'react-markdown';
import gfm from 'remark-gfm';
import Prism from 'prismjs';
import 'prismjs/components/prism-markup';
import { loadLang } from './langs';
import "./styles/markdown.css";
import "./styles/markdowncolor.css";
export default /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _ref = props || {},
      className = _ref.className,
      source = _ref.source,
      style = _ref.style,
      onScroll = _ref.onScroll,
      onMouseOver = _ref.onMouseOver,
      other = _objectWithoutProperties(_ref, _excluded);

  var mdp = /*#__PURE__*/React.createRef();
  var loadedLang = React.useRef(['markup']);
  useEffect(function () {
    highlight(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [source]);

  function highlight() {
    return _highlight.apply(this, arguments);
  }

  function _highlight() {
    _highlight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var codes, _iterator, _step, val, tag, lang;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (mdp.current) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              codes = mdp.current.getElementsByTagName('code');
              _iterator = _createForOfIteratorHelper(codes);
              _context.prev = 4;

              _iterator.s();

            case 6:
              if ((_step = _iterator.n()).done) {
                _context.next = 24;
                break;
              }

              val = _step.value;
              tag = val.parentNode;

              if (!(tag && tag.tagName === 'PRE' && /^language-/.test(val.className.trim()))) {
                _context.next = 22;
                break;
              }

              lang = val.className.trim().replace(/^language-/, '');
              _context.prev = 11;

              if (loadedLang.current.includes(lang)) {
                _context.next = 16;
                break;
              }

              loadedLang.current.push(lang);
              _context.next = 16;
              return loadLang(lang);

            case 16:
              _context.next = 18;
              return Prism.highlightElement(val);

            case 18:
              _context.next = 22;
              break;

            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](11);

            case 22:
              _context.next = 6;
              break;

            case 24:
              _context.next = 29;
              break;

            case 26:
              _context.prev = 26;
              _context.t1 = _context["catch"](4);

              _iterator.e(_context.t1);

            case 29:
              _context.prev = 29;

              _iterator.f();

              return _context.finish(29);

            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 26, 29, 32], [11, 20]]);
    }));
    return _highlight.apply(this, arguments);
  }

  useImperativeHandle(ref, function () {
    return _objectSpread(_objectSpread({}, props), {}, {
      lang: loadedLang.current,
      mdp: mdp
    });
  }, [mdp, props]);
  var cls = "wmde-markdown wmde-markdown-color ".concat(className || '');

  var reactMarkdownProps = _objectSpread(_objectSpread({
    allowDangerousHtml: true,
    allowNode: function allowNode(node, index, parent) {
      if (node.type === 'html' && reactMarkdownProps.allowDangerousHtml) {
        // filter style
        node.value = node.value.replace(/<((style|script|link|input|form)|\/(style|script|link|input|form))(\s?[^>]*>)/gi, function (a) {
          return a.replace(/[<>]/g, function (e) {
            return {
              '<': '&lt;',
              '>': '&gt;'
            }[e];
          });
        });
      }

      return true;
    }
  }, other), {}, {
    plugins: [gfm].concat(_toConsumableArray(other.plugins || [])),
    source: source || ''
  });

  return /*#__PURE__*/React.createElement("div", {
    ref: mdp,
    onScroll: onScroll,
    onMouseOver: onMouseOver,
    className: cls,
    style: style
  }, /*#__PURE__*/React.createElement(ReactMarkdown, reactMarkdownProps));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,