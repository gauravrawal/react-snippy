"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _createForOfIteratorHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/createForOfIteratorHelper"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactMarkdown = _interopRequireDefault(require("react-markdown"));

var _remarkGfm = _interopRequireDefault(require("remark-gfm"));

var _prismjs = _interopRequireDefault(require("prismjs"));

require("prismjs/components/prism-markup");

var _langs = require("./langs");

var _excluded = ["className", "source", "style", "onScroll", "onMouseOver"];

var _default = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var _ref = props || {},
      className = _ref.className,
      source = _ref.source,
      style = _ref.style,
      onScroll = _ref.onScroll,
      onMouseOver = _ref.onMouseOver,
      other = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var mdp = /*#__PURE__*/_react.default.createRef();

  var loadedLang = _react.default.useRef(['markup']);

  (0, _react.useEffect)(function () {
    highlight(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [source]);

  function highlight() {
    return _highlight.apply(this, arguments);
  }

  function _highlight() {
    _highlight = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var codes, _iterator, _step, val, tag, lang;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (mdp.current) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              codes = mdp.current.getElementsByTagName('code');
              _iterator = (0, _createForOfIteratorHelper2.default)(codes);
              _context.prev = 4;

              _iterator.s();

            case 6:
              if ((_step = _iterator.n()).done) {
                _context.next = 24;
                break;
              }

              val = _step.value;
              tag = val.parentNode;

              if (!(tag && tag.tagName === 'PRE' && /^language-/.test(val.className.trim()))) {
                _context.next = 22;
                break;
              }

              lang = val.className.trim().replace(/^language-/, '');
              _context.prev = 11;

              if (loadedLang.current.includes(lang)) {
                _context.next = 16;
                break;
              }

              loadedLang.current.push(lang);
              _context.next = 16;
              return (0, _langs.loadLang)(lang);

            case 16:
              _context.next = 18;
              return _prismjs.default.highlightElement(val);

            case 18:
              _context.next = 22;
              break;

            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](11);

            case 22:
              _context.next = 6;
              break;

            case 24:
              _context.next = 29;
              break;

            case 26:
              _context.prev = 26;
              _context.t1 = _context["catch"](4);

              _iterator.e(_context.t1);

            case 29:
              _context.prev = 29;

              _iterator.f();

              return _context.finish(29);

            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 26, 29, 32], [11, 20]]);
    }));
    return _highlight.apply(this, arguments);
  }

  (0, _react.useImperativeHandle)(ref, function () {
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
      lang: loadedLang.current,
      mdp: mdp
    });
  }, [mdp, props]);
  var cls = "wmde-markdown wmde-markdown-color ".concat(className || '');
  var reactMarkdownProps = (0, _objectSpread2.default)((0, _objectSpread2.default)({
    allowDangerousHtml: true,
    allowNode: function allowNode(node, index, parent) {
      if (node.type === 'html' && reactMarkdownProps.allowDangerousHtml) {
        // filter style
        node.value = node.value.replace(/<((style|script|link|input|form)|\/(style|script|link|input|form))(\s?[^>]*>)/gi, function (a) {
          return a.replace(/[<>]/g, function (e) {
            return {
              '<': '&lt;',
              '>': '&gt;'
            }[e];
          });
        });
      }

      return true;
    }
  }, other), {}, {
    plugins: [_remarkGfm.default].concat((0, _toConsumableArray2.default)(other.plugins || [])),
    source: source || ''
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: mdp,
    onScroll: onScroll,
    onMouseOver: onMouseOver,
    className: cls,
    style: style
  }, /*#__PURE__*/_react.default.createElement(_reactMarkdown.default, reactMarkdownProps));
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJjbGFzc05hbWUiLCJzb3VyY2UiLCJzdHlsZSIsIm9uU2Nyb2xsIiwib25Nb3VzZU92ZXIiLCJvdGhlciIsIm1kcCIsImNyZWF0ZVJlZiIsImxvYWRlZExhbmciLCJ1c2VSZWYiLCJoaWdobGlnaHQiLCJjdXJyZW50IiwiY29kZXMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInZhbCIsInRhZyIsInBhcmVudE5vZGUiLCJ0YWdOYW1lIiwidGVzdCIsInRyaW0iLCJsYW5nIiwicmVwbGFjZSIsImluY2x1ZGVzIiwicHVzaCIsIlByaXNtIiwiaGlnaGxpZ2h0RWxlbWVudCIsImNscyIsInJlYWN0TWFya2Rvd25Qcm9wcyIsImFsbG93RGFuZ2Vyb3VzSHRtbCIsImFsbG93Tm9kZSIsIm5vZGUiLCJpbmRleCIsInBhcmVudCIsInR5cGUiLCJ2YWx1ZSIsImEiLCJlIiwicGx1Z2lucyIsImdmbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs0QkFpQmVBLGVBQU1DLFVBQU4sQ0FBMkQsVUFBQ0MsS0FBRCxFQUFRQyxHQUFSLEVBQWdCO0FBQ3hGLGFBQXVFRCxLQUFLLElBQUksRUFBaEY7QUFBQSxNQUFRRSxTQUFSLFFBQVFBLFNBQVI7QUFBQSxNQUFtQkMsTUFBbkIsUUFBbUJBLE1BQW5CO0FBQUEsTUFBMkJDLEtBQTNCLFFBQTJCQSxLQUEzQjtBQUFBLE1BQWtDQyxRQUFsQyxRQUFrQ0EsUUFBbEM7QUFBQSxNQUE0Q0MsV0FBNUMsUUFBNENBLFdBQTVDO0FBQUEsTUFBNERDLEtBQTVEOztBQUNBLE1BQU1DLEdBQUcsZ0JBQUdWLGVBQU1XLFNBQU4sRUFBWjs7QUFDQSxNQUFNQyxVQUFVLEdBQUdaLGVBQU1hLE1BQU4sQ0FBdUIsQ0FBQyxRQUFELENBQXZC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QUVBLE1BQU0sSUFBSTtBQWJJLElBQXhCO0FBZUEsc0JBQ0U7QUFBSyxJQUFBLEdBQUcsRUFBRUssR0FBVjtBQUFlLElBQUEsUUFBUSxFQUFFSCxRQUF6QjtBQUFtQyxJQUFBLFdBQVcsRUFBRUMsV0FBaEQ7QUFBNkQsSUFBQSxTQUFTLEVBQUVzQixHQUF4RTtBQUE2RSxJQUFBLEtBQUssRUFBRXhCO0FBQXBGLGtCQUNFLDZCQUFDLHNCQUFELEVBQW1CeUIsa0JBQW5CLENBREYsQ0FERjtBQUtELENBbERjLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VJbXBlcmF0aXZlSGFuZGxlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24sIHsgUmVhY3RNYXJrZG93blByb3BzIH0gZnJvbSAncmVhY3QtbWFya2Rvd24nO1xuaW1wb3J0IGdmbSBmcm9tICdyZW1hcmstZ2ZtJztcbmltcG9ydCBQcmlzbSBmcm9tICdwcmlzbWpzJztcbmltcG9ydCAncHJpc21qcy9jb21wb25lbnRzL3ByaXNtLW1hcmt1cCc7XG5pbXBvcnQgeyBsb2FkTGFuZyB9IGZyb20gJy4vbGFuZ3MnO1xuaW1wb3J0ICcuL3N0eWxlcy9tYXJrZG93bi5sZXNzJztcbmltcG9ydCAnLi9zdHlsZXMvbWFya2Rvd25jb2xvci5sZXNzJztcblxuZXhwb3J0IHR5cGUgTWFya2Rvd25QcmV2aWV3UHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc291cmNlPzogc3RyaW5nO1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG4gIG9uU2Nyb2xsPzogKGU6IFJlYWN0LlVJRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSA9PiB2b2lkO1xuICBvbk1vdXNlT3Zlcj86IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4gdm9pZDtcbn0gJiBSZWFjdE1hcmtkb3duUHJvcHM7XG5cbmV4cG9ydCB0eXBlIE1hcmtkb3duUHJldmlld1JlZiA9IHtcbiAgbWRwOiBSZWFjdC5SZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuICBsYW5nOiBzdHJpbmdbXSxcbn0gJiBNYXJrZG93blByZXZpZXdQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QuZm9yd2FyZFJlZjxNYXJrZG93blByZXZpZXdSZWYsIE1hcmtkb3duUHJldmlld1Byb3BzPigocHJvcHMsIHJlZikgPT4ge1xuICBjb25zdCB7IGNsYXNzTmFtZSwgc291cmNlLCBzdHlsZSwgb25TY3JvbGwsIG9uTW91c2VPdmVyLCAuLi5vdGhlciAgfSA9IHByb3BzIHx8IHt9O1xuICBjb25zdCBtZHAgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG4gIGNvbnN0IGxvYWRlZExhbmcgPSBSZWFjdC51c2VSZWY8c3RyaW5nW10+KFsnbWFya3VwJ10pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGhpZ2hsaWdodCgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW3NvdXJjZV0pO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGhpZ2hsaWdodCgpIHtcbiAgICBpZiAoIW1kcC5jdXJyZW50KSByZXR1cm47XG4gICAgY29uc3QgY29kZXMgPSBtZHAuY3VycmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnY29kZScpIGFzIHVua25vd24gYXMgSFRNTEVsZW1lbnRbXTtcbiAgICBmb3IgKGNvbnN0IHZhbCBvZiBjb2Rlcykge1xuICAgICAgY29uc3QgdGFnID0gdmFsLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBpZiAodGFnICYmIHRhZy50YWdOYW1lID09PSAnUFJFJyAmJiAvXmxhbmd1YWdlLS8udGVzdCh2YWwuY2xhc3NOYW1lLnRyaW0oKSkpIHtcbiAgICAgICAgY29uc3QgbGFuZyA9IHZhbC5jbGFzc05hbWUudHJpbSgpLnJlcGxhY2UoL15sYW5ndWFnZS0vLCAnJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFsb2FkZWRMYW5nLmN1cnJlbnQuaW5jbHVkZXMobGFuZyBhcyBuZXZlcikpIHtcbiAgICAgICAgICAgIGxvYWRlZExhbmcuY3VycmVudC5wdXNoKGxhbmcpO1xuICAgICAgICAgICAgYXdhaXQgbG9hZExhbmcobGFuZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF3YWl0IFByaXNtLmhpZ2hsaWdodEVsZW1lbnQodmFsKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoeyAuLi5wcm9wcywgbGFuZzogbG9hZGVkTGFuZy5jdXJyZW50LCBtZHAgfSksIFttZHAsIHByb3BzXSk7XG5cbiAgY29uc3QgY2xzID0gYHdtZGUtbWFya2Rvd24gd21kZS1tYXJrZG93bi1jb2xvciAke2NsYXNzTmFtZSB8fCAnJ31gO1xuICBjb25zdCByZWFjdE1hcmtkb3duUHJvcHMgPSB7XG4gICAgYWxsb3dEYW5nZXJvdXNIdG1sOiB0cnVlLFxuICAgIGFsbG93Tm9kZTogKG5vZGUsIGluZGV4LCBwYXJlbnQpID0+IHtcbiAgICAgIGlmIChub2RlLnR5cGUgPT09ICdodG1sJyAmJiByZWFjdE1hcmtkb3duUHJvcHMuYWxsb3dEYW5nZXJvdXNIdG1sKSB7XG4gICAgICAgIC8vIGZpbHRlciBzdHlsZVxuICAgICAgICBub2RlLnZhbHVlID0gKG5vZGUudmFsdWUgYXMgc3RyaW5nKS5yZXBsYWNlKC88KChzdHlsZXxzY3JpcHR8bGlua3xpbnB1dHxmb3JtKXxcXC8oc3R5bGV8c2NyaXB0fGxpbmt8aW5wdXR8Zm9ybSkpKFxccz9bXj5dKj4pL2dpLCAoYTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGEucmVwbGFjZSgvWzw+XS9nLCAoZTogc3RyaW5nKSA9PiAoKHsgJzwnOiAnJmx0OycsICc+JzogJyZndDsnIH0gYXMgeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSlbZV0pKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgLi4ub3RoZXIsXG4gICAgcGx1Z2luczogW2dmbSwgIC4uLihvdGhlci5wbHVnaW5zIHx8IFtdKV0sXG4gICAgc291cmNlOiBzb3VyY2UgfHwgJycsXG4gIH0gYXMgUmVhY3RNYXJrZG93blByb3BzO1xuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXttZHB9IG9uU2Nyb2xsPXtvblNjcm9sbH0gb25Nb3VzZU92ZXI9e29uTW91c2VPdmVyfSBjbGFzc05hbWU9e2Nsc30gc3R5bGU9e3N0eWxlfT5cbiAgICAgIDxSZWFjdE1hcmtkb3duIHsuLi5yZWFjdE1hcmtkb3duUHJvcHN9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59KTtcbiJdfQ==