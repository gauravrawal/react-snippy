{"version":3,"sources":["../../../../src/components/TextArea/index.tsx"],"names":["React","Component","classnames","Prism","hotkeys","TextArea","props","preElm","createRef","warp","text","state","value","e","onChange","setState","target","highlight","autoFocus","current","focus","nextProps","nextState","pre","html","languages","markdown","innerHTML","prefixCls","className","onScroll","tabSize","style","otherProps","bind","handleChange","defaultProps","spellCheck"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markdown.js';\nimport { IProps } from '../../utils';\nimport hotkeys, { IHotkeyOptions } from './hotkeys';\nimport './index.less';\n\nexport interface ITextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onChange' | 'onScroll'>, IProps {\n  onChange?: (value?: string) => void;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  value?: string;\n  tabSize?: number;\n}\n\nexport interface ITextAreaState {\n  value?: string;\n}\n\nexport default class TextArea extends Component<ITextAreaProps, ITextAreaState> {\n  public preElm = React.createRef<HTMLPreElement>();\n  public warp = React.createRef<HTMLDivElement>();\n  public text = React.createRef<HTMLTextAreaElement>();\n  public static defaultProps: ITextAreaProps = {\n    tabSize: 2,\n    autoFocus: true,\n    spellCheck: false,\n  }\n  public static state: ITextAreaState;\n  public constructor(props: ITextAreaProps) {\n    super(props);\n    this.state = {\n      value: props.value || '',\n    };\n  }\n  private handleChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    const { onChange } = this.props;\n    this.setState({ value: e.target.value }, () => {\n      onChange && onChange(this.state.value);\n      this.highlight();\n    });\n  }\n  public async componentDidMount() {\n    if (this.props.autoFocus && this.text.current) {\n      this.text.current.focus();\n    }\n    this.highlight();\n  }\n  public shouldComponentUpdate(nextProps: ITextAreaProps, nextState: ITextAreaState) {\n    return nextProps.value !== this.props.value || nextState.value !== this.state.value;\n  }\n  public async highlight() {\n    const { value } = this.state;\n    const pre = this.preElm.current;\n    const html = Prism.highlight(value as string, Prism.languages.markdown, 'markdown');\n    pre!.innerHTML = `${html}<br />`;\n  }\n  render() {\n    const { prefixCls, className, onChange, onScroll, tabSize, style, ...otherProps } = this.props;\n    return (\n      <div ref={this.warp} className={classnames(`${prefixCls}-aree`, className)} onScroll={onScroll}>\n        <div className={classnames(`${prefixCls}-text`)}>\n          <pre\n            ref={this.preElm}\n            className={classnames(`${prefixCls}-text-pre`, 'wmde-markdown-color')}\n          />\n          <textarea\n            {...otherProps}\n            ref={this.text}\n            onKeyDown={hotkeys.bind(this, { tabSize } as IHotkeyOptions)}\n            className={`${prefixCls}-text-input`}\n            value={this.state.value}\n            onChange={this.handleChange.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}"]}