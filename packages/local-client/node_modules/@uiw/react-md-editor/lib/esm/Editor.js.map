{"version":3,"sources":["../../src/Editor.tsx"],"names":["React","useEffect","useMemo","useRef","useState","classnames","MarkdownPreview","TextArea","Toolbar","DragBar","getCommands","TextAreaCommandOrchestrator","setGroupPopFalse","data","Object","keys","forEach","keyname","InternalMDEditor","props","ref","prefixCls","className","propsValue","value","commands","height","heightWarp","visiableDragbar","preview","previewType","isfullscreen","fullscreen","previewOptions","textareaProps","maxHeight","minHeight","autoFocus","tabSize","onChange","hideToolbar","other","setValue","setPreview","isFullscreen","setIsFullscreen","groupPop","setGroupPop","leftScroll","previewRef","createRef","setHeight","textarea","commandOrchestrator","cls","current","text","handleChange","mdStr","handleCommand","command","groupName","keyCommand","document","body","style","overflow","executeCommand","handleScroll","e","mdp","warp","previewDom","textareaDom","scale","scrollHeight","offsetHeight","target","scrollTop","chestratorObj","mdProps","onScroll","source","Number","getState","textApi","test","newHeight","MDEditor","forwardRef","Markdown"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview, { MarkdownPreviewProps, MarkdownPreviewRef } from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator, ICommand } from './commands';\nimport './index.less';\n\nexport type PreviewType = 'live' | 'edit' | 'preview';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: React.CSSProperties['height'];\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean>) {\n  Object.keys(data).forEach(keyname => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (props: MDEditorProps, \n  ref?:\n    | ((instance: HTMLDivElement) => void)\n    | React.RefObject<HTMLDivElement | null>\n    | null\n  ) => {\n  const { prefixCls = 'w-md-editor', className, value: propsValue, commands = getCommands(), height: heightWarp = 200, visiableDragbar = true, preview: previewType = 'live', fullscreen: isfullscreen, previewOptions, textareaProps, maxHeight = 1200, minHeight = 100, autoFocus, tabSize = 2, onChange, hideToolbar, ...other } = props || {};\n  const [value, setValue] = useState<string>(propsValue || '')\n  const [preview, setPreview] = useState<PreviewType>(previewType);\n  const [isFullscreen, setIsFullscreen] = useState(isfullscreen || false);\n  const [groupPop, setGroupPop] = useState<Record<string, boolean>>({});\n  \n  const leftScroll = useRef(false);\n  const previewRef = React.createRef<MarkdownPreviewRef>()\n\n  const [height, setHeight] = useState(heightWarp);\n  const textarea = React.createRef<TextArea>();\n  const commandOrchestrator = useRef<TextAreaCommandOrchestrator>()\n\n  const cls = classnames(className, prefixCls, {\n    [`${prefixCls}-show-${preview}`]: preview,\n    [`${prefixCls}-fullscreen`]: isFullscreen,\n  });\n  useEffect(() => {\n    commandOrchestrator.current = new TextAreaCommandOrchestrator((textarea.current!.text.current || null) as HTMLTextAreaElement);\n  }, []);\n\n  useMemo(() => preview !== props.preview && props.preview && setPreview(props.preview!), [props.preview]);\n  useMemo(() => value !== props.value && setValue(props.value!), [props.value]);\n  useMemo(() => height !== props.height && setHeight(heightWarp!), [heightWarp]);\n\n  function handleChange(mdStr?: string) {\n    setValue(mdStr!);\n    onChange && onChange(mdStr || '');\n  }\n  function handleCommand(command: ICommand, groupName?: string) {\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value as PreviewType);\n    }\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n    if (command.keyCommand === 'group') {\n      setGroupPop({ ...setGroupPopFalse(groupPop), [`${groupName}`]: true });\n    }\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop({ ...groupPop, [`${groupName}`]: false });\n    }\n    commandOrchestrator.current!.executeCommand(command);\n  }\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n    const previewDom = previewRef.current.mdp.current! as HTMLDivElement;\n    const textareaDom = textarea.current.warp.current! as HTMLDivElement;\n    if (textareaDom && previewDom) {\n      const scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n  const chestratorObj = useMemo(() => commandOrchestrator.current, [commandOrchestrator.current]);\n  const mdProps = {\n    ...previewOptions,\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value,\n  } as unknown as MarkdownPreviewProps;\n  return (\n    <div className={cls} onClick={() => setGroupPop({...setGroupPopFalse(groupPop)})} style={{ height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height }} {...other}>\n      {!hideToolbar && (\n        <Toolbar\n          active={{\n            fullscreen: isFullscreen,\n            preview: preview,\n            ...groupPop\n          }}\n          prefixCls={prefixCls}\n          commands={commands}\n          commandHelp={{\n            getState: commandOrchestrator.current && commandOrchestrator.current!.getState,\n            textApi: commandOrchestrator.current && commandOrchestrator.current!.textApi,\n            ...chestratorObj,\n          }}\n          onCommand={handleCommand}\n        />\n      )}\n      <div\n        className={`${prefixCls}-content`}\n        style={{ height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29 }}\n      >\n        {/(edit|live)/.test(preview as string) && (\n          <TextArea\n            ref={textarea}\n            tabSize={tabSize}\n            className={`${prefixCls}-input`}\n            prefixCls={prefixCls}\n            value={value}\n            autoFocus={autoFocus}\n            {...textareaProps}\n            onScroll={handleScroll}\n            onMouseOver={() => leftScroll.current = true}\n            onMouseLeave={() => leftScroll.current = false}\n            onChange={handleChange}\n          />\n        )}\n        {/(live|preview)/.test(preview as string) && (\n          <MarkdownPreview {...mdProps} className={`${prefixCls}-preview`}/>\n        )}\n        {visiableDragbar && !isFullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={(newHeight) => {\n              setHeight(newHeight);\n            }}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst MDEditor = React.forwardRef<HTMLDivElement, MDEditorProps>(InternalMDEditor);\n\ntype MDEditor = typeof MDEditor & {\n  Markdown: typeof MarkdownPreview;\n};\n\n(MDEditor as MDEditor).Markdown = MarkdownPreview;\n\nexport default MDEditor as MDEditor;\n"]}