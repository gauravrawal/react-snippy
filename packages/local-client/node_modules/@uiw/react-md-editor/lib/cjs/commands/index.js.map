{"version":3,"sources":["../../../src/commands/index.ts"],"names":["getCommands","bold","italic","strikethrough","hr","title","divider","link","quote","code","image","unorderedListCommand","orderedListCommand","checkedListCommand","codeEdit","codeLive","codePreview","fullscreen","getStateFromTextArea","textArea","console","log","selection","start","selectionStart","end","selectionEnd","text","value","selectedText","slice","TextAreaTextApi","focus","TextAreaCommandOrchestrator","textApi","command","execute"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAuDA,IAAMA,WAA6B,GAAG,SAAhCA,WAAgC;AAAA,SAAM,CAC1CC,UAD0C,EACpCC,cADoC,EAC5BC,4BAD4B,EACbC,MADa,EACTC,YADS,EAE1CC,gBAF0C,EAEjCC,UAFiC,EAE3BC,YAF2B,EAEpBC,UAFoB,EAEdC,YAFc,EAEPJ,gBAFO,EAG1CK,0BAH0C,EAGpBC,wBAHoB,EAGAC,wBAHA,EAGoBP,gBAHpB,EAG6BQ,iBAH7B,EAGuCC,iBAHvC,EAGiDC,oBAHjD,EAG8DV,gBAH9D,EAGuEW,sBAHvE,CAAN;AAAA,CAAtC;;;;AAMA,SAASC,oBAAT,CAA8BC,QAA9B,EAAwE;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,QAAzB;AACA,SAAO;AACLG,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAEJ,QAAQ,CAACK,cADP;AAETC,MAAAA,GAAG,EAAEN,QAAQ,CAACO;AAFL,KADN;AAKLC,IAAAA,IAAI,EAAER,QAAQ,CAACS,KALV;AAMLC,IAAAA,YAAY,EAAEV,QAAQ,CAACS,KAAT,CAAeE,KAAf,CAAqBX,QAAQ,CAACK,cAA9B,EAA8CL,QAAQ,CAACO,YAAvD;AANT,GAAP;AAQD;;IAEKK,e;AAGJ,2BAAYZ,QAAZ,EAA2C;AAAA;AAAA,SAF3CA,QAE2C;AACzC,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;qCAEgBQ,I,EAAyB;AACxC,yCAAW,KAAKR,QAAhB,EAA0BQ,IAA1B;AACA,aAAOT,oBAAoB,CAAC,KAAKC,QAAN,CAA3B;AACD;;;sCAEiBG,S,EAAiC;AACjD,WAAKH,QAAL,CAAca,KAAd;AACA,WAAKb,QAAL,CAAcK,cAAd,GAA+BF,SAAS,CAACC,KAAzC;AACA,WAAKJ,QAAL,CAAcO,YAAd,GAA6BJ,SAAS,CAACG,GAAvC;AACA,aAAOP,oBAAoB,CAAC,KAAKC,QAAN,CAA3B;AACD;;;;;;;IAIGc,2B;AAIJ,uCAAYd,QAAZ,EAA2C;AAAA;AAAA,SAH3CA,QAG2C;AAAA,SAF3Ce,OAE2C;AACzC,SAAKf,QAAL,GAAgBA,QAAhB;AACA,SAAKe,OAAL,GAAe,IAAIH,eAAJ,CAAoBZ,QAApB,CAAf;AACD;;;;+BAEU;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKF,QAA/B;AACA,UAAI,CAAC,KAAKA,QAAV,EAAoB,OAAO,KAAP;AACpB,aAAOD,oBAAoB,CAAC,KAAKC,QAAN,CAA3B;AACD;;;mCAEcgB,O,EAAiC;AAC9CA,MAAAA,OAAO,CAACC,OAAR,IAAmBD,OAAO,CAACC,OAAR,CAAgBlB,oBAAoB,CAAC,KAAKC,QAAN,CAApC,EAAqD,KAAKe,OAA1D,CAAnB;AACD","sourcesContent":["import { bold } from './bold';\nimport { code } from './code';\nimport { italic } from './italic';\nimport { link } from './link';\nimport { unorderedListCommand, orderedListCommand, checkedListCommand } from './list';\nimport { quote } from './quote';\nimport { hr } from './hr';\nimport { title } from './title';\nimport { title1 } from './title1';\nimport { title2 } from './title2';\nimport { title3 } from './title3';\nimport { title4 } from './title4';\nimport { title5 } from './title5';\nimport { title6 } from './title6';\nimport { group } from './group';\nimport { divider } from './divider';\nimport { codePreview, codeEdit, codeLive } from './preview';\nimport { fullscreen } from './fullscreen';\nimport { image } from './image';\nimport { strikethrough } from './strikeThrough';\nimport insertText from '../utils/InsertTextAtPosition';\n\nexport interface CommandOrchestrator {\n  executeCommand(command: ICommand): void\n}\nexport type ICommandChildHandleParam = {\n  getState?: TextAreaCommandOrchestrator['getState'];\n  textApi?: TextApi;\n}\nexport type ICommandChildHandle  = {\n  children?: (handle: { close: () => void; execute: () => void } & ICommandChildHandleParam) => React.ReactElement;\n}\nexport type ICommandChildCommands<T = string> = {\n  children?: Array<ICommand<T>>;\n}\n\nexport type ICommand<T = string> = {\n  keyCommand?: string,\n  name?: string,\n  groupName?: string,\n  icon?: React.ReactElement,\n  value?: T,\n  position?: 'right'\n  liProps?: React.LiHTMLAttributes<HTMLLIElement>,\n  buttonProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | null,\n  execute?: (state: TextState, api: TextApi) => void,\n} & ICommandChildCommands & ICommandChildHandle;\n\n\nexport interface TextRange {\n  start: number;\n  end: number;\n}\n\nexport interface TextState {\n  text: string,\n  selectedText: string,\n  selection: TextRange,\n}\n\nexport interface TextApi {\n  /**\n   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the\n   * selection start and selection end will be the same and will both point to the end\n   * @param text Text that should replace the current selection\n   */\n  replaceSelection(text: string): TextState;\n\n  /**\n   * Selects the specified text range\n   * @param selection\n   */\n  setSelectionRange(selection: TextRange): TextState;\n}\n\nconst getCommands: () => ICommand[] = () => [\n  bold, italic, strikethrough, hr, title,\n  divider, link, quote, code, image, divider,\n  unorderedListCommand, orderedListCommand, checkedListCommand, divider, codeEdit, codeLive, codePreview, divider, fullscreen,\n];\n\nfunction getStateFromTextArea(textArea: HTMLTextAreaElement): TextState {\n  console.log('textArea:', textArea)\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd\n    },\n    text: textArea.value,\n    selectedText: textArea.value.slice(textArea.selectionStart, textArea.selectionEnd)\n  };\n}\n\nclass TextAreaTextApi implements TextApi {\n  textArea: HTMLTextAreaElement;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n  }\n\n  replaceSelection(text: string): TextState {\n    insertText(this.textArea, text);\n    return getStateFromTextArea(this.textArea);\n  }\n\n  setSelectionRange(selection: TextRange): TextState {\n    this.textArea.focus();\n    this.textArea.selectionStart = selection.start;\n    this.textArea.selectionEnd = selection.end;\n    return getStateFromTextArea(this.textArea);\n  }\n}\n\n\nclass TextAreaCommandOrchestrator implements CommandOrchestrator {\n  textArea: HTMLTextAreaElement;\n  textApi: TextApi;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n\n  getState() {\n    console.log('>getState>', this.textArea)\n    if (!this.textArea) return false;\n    return getStateFromTextArea(this.textArea);\n  }\n\n  executeCommand(command: ICommand<string>): void {\n    command.execute && command.execute(getStateFromTextArea(this.textArea), this.textApi);\n  }\n}\n\nexport {\n  // Toolbars.\n  title, title1, title2, title3, title4, title5, title6,\n  bold, italic, strikethrough, hr, group, divider, link, quote, code, image,\n  unorderedListCommand, orderedListCommand, checkedListCommand, codeEdit, codeLive, codePreview, fullscreen,\n  // Tool method.\n  getCommands, getStateFromTextArea, TextAreaCommandOrchestrator, TextAreaTextApi\n}\n"]}